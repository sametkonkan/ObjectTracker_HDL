-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\Divide2.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Divide2
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Track/MaxCorrelation/Divide2
-- Hierarchy Level: 3
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ObjectTrackerHDL_pkg.ALL;

ENTITY Divide2 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dividend_in                       :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        divisor_in                        :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        quotient                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
        );
END Divide2;


ARCHITECTURE rtl OF Divide2 IS

  -- Signals
  SIGNAL trueFlag_1                       : std_logic;  -- ufix1
  SIGNAL initFlagDelay_reg                : std_logic_vector(18 DOWNTO 0);  -- ufix1 [19]
  SIGNAL initFlagenable                   : std_logic;  -- ufix1
  SIGNAL ConstantSignal_1                 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL delayMatch_reg                   : vector_of_unsigned16(0 TO 18);  -- ufix16 [19]
  SIGNAL ConstantSignal_2                 : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL dividend_in_unsigned             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL dividend_in_reg                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL In1_dtc_1                        : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL corrected_z_p_1                  : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits                          : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x                                : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL divisor_in_unsigned              : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL divisor_in_reg                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL In2_dtc_1                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL corrected_d_p_1                  : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0                        : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_1                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits                     : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits                          : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit                      : std_logic;  -- ufix1
  SIGNAL qBit                             : std_logic;  -- ufix1
  SIGNAL rNextTemp                        : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r1                               : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r1_p                             : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_1                        : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_1                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit                           : std_logic;  -- ufix1
  SIGNAL rMSBitneg                        : std_logic;  -- ufix1
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL d1_p                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_1                      : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_3                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_3                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_1                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_1                    : std_logic;  -- ufix1
  SIGNAL qBit_1                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_1                      : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r2                               : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r2_p                             : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_2                        : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_2                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_1                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_1                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL d2_p                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_2                      : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_5                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_3                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_4                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_2                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_2                    : std_logic;  -- ufix1
  SIGNAL qBit_2                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_2                      : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r3                               : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r3_p                             : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_3                        : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_3                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL d3_p                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_3                      : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_7                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_5                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_5                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_3                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_3                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_3                    : std_logic;  -- ufix1
  SIGNAL qBit_3                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_3                      : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r4                               : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r4_p                             : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_4                        : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_4                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_3                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_3                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL d4_p                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_4                      : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_9                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_7                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_6                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_4                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_4                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_4                    : std_logic;  -- ufix1
  SIGNAL qBit_4                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_4                      : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r5                               : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r5_p                             : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_5                        : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_5                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_4                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_4                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL d5_p                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_5                      : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_11                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_9                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_7                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_5                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_5                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_5                    : std_logic;  -- ufix1
  SIGNAL qBit_5                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_5                      : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r6                               : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r6_p                             : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_6                        : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_6                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_5                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_5                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL d6_p                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_6                      : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_13                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_11                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_8                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_6                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_6                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_6                    : std_logic;  -- ufix1
  SIGNAL qBit_6                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_6                      : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r7                               : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r7_p                             : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_7                        : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_7                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_6                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_6                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL d7_p                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_7                      : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_15                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_13                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_9                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_7                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_7                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_7                    : std_logic;  -- ufix1
  SIGNAL qBit_7                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_7                      : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r8                               : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r8_p                             : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_8                        : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_8                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_7                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_7                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL d8_p                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_8                      : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_17                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_15                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_10                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_8                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_8                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_8                    : std_logic;  -- ufix1
  SIGNAL qBit_8                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_8                      : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r9                               : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r9_p                             : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_9                        : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_9                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_8                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_8                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL d9_p                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_9                      : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_19                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_17                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_11                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_9                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_9                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_9                    : std_logic;  -- ufix1
  SIGNAL qBit_9                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_9                      : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r10                              : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r10_p                            : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_10                       : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_10                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_9                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_9                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL d10_p                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_10                     : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_21                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_19                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_12                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_10                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_10                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_10                   : std_logic;  -- ufix1
  SIGNAL qBit_10                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_10                     : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r11                              : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r11_p                            : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_11                       : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_11                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_10                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_10                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL d11_p                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_11                     : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_23                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_21                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_13                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_11                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_11                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_11                   : std_logic;  -- ufix1
  SIGNAL qBit_11                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_11                     : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r12                              : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r12_p                            : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_12                       : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_12                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_11                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_11                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL d12_p                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_12                     : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_25                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_23                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_14                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_12                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_12                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_12                   : std_logic;  -- ufix1
  SIGNAL qBit_12                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_12                     : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r13                              : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r13_p                            : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_13                       : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_13                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_12                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_12                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL d13_p                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_13                     : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_27                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_25                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_15                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_13                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_13                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_13                   : std_logic;  -- ufix1
  SIGNAL qBit_13                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_13                     : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r14                              : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r14_p                            : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_14                       : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_14                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_13                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_13                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL d14_p                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_14                     : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_29                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_27                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_16                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_14                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_14                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_14                   : std_logic;  -- ufix1
  SIGNAL qBit_14                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_14                     : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r15                              : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r15_p                            : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL rMSBits_15                       : unsigned(18 DOWNTO 0);  -- ufix19
  SIGNAL x_15                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_14                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_14                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL d15_p                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_15                     : signed(19 DOWNTO 0);  -- sfix20
  SIGNAL d_neg_31                         : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_29                             : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL temp_17                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBNextBits_15                  : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_15                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tempSignBit_15                   : std_logic;  -- ufix1
  SIGNAL qBit_15                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_15                     : unsigned(33 DOWNTO 0);  -- ufix34
  SIGNAL r16                              : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL r16_p                            : signed(33 DOWNTO 0);  -- sfix34
  SIGNAL qTemp                            : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL qtempExt_p_temp                  : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL qtempPost                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL qoutDTC                          : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL quotient_tmp                     : unsigned(15 DOWNTO 0);  -- uint16

BEGIN
  trueFlag_1 <= '1';

  initFlagDelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      initFlagDelay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        initFlagDelay_reg(0) <= trueFlag_1;
        initFlagDelay_reg(18 DOWNTO 1) <= initFlagDelay_reg(17 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS initFlagDelay_process;

  initFlagenable <= initFlagDelay_reg(18);

  ConstantSignal_1 <= to_unsigned(16#0000#, 16);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_unsigned(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= ConstantSignal_1;
        delayMatch_reg(1 TO 18) <= delayMatch_reg(0 TO 17);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  ConstantSignal_2 <= delayMatch_reg(18);

  dividend_in_unsigned <= unsigned(dividend_in);

  z_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dividend_in_reg <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dividend_in_reg <= dividend_in_unsigned;
      END IF;
    END IF;
  END PROCESS z_p_process;


  In1_dtc_1 <= signed(resize(dividend_in_reg, 34));

  corrected_z_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      corrected_z_p_1 <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        corrected_z_p_1 <= In1_dtc_1;
      END IF;
    END IF;
  END PROCESS corrected_z_p_process;


  rMSBits <= unsigned(corrected_z_p_1(33 DOWNTO 15));

  x <= signed(rMSBits);

  divisor_in_unsigned <= unsigned(divisor_in);

  d_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      divisor_in_reg <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        divisor_in_reg <= divisor_in_unsigned;
      END IF;
    END IF;
  END PROCESS d_p_process;


  In2_dtc_1 <= signed(resize(divisor_in_reg, 19));

  corrected_d_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      corrected_d_p_1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        corrected_d_p_1 <= In2_dtc_1;
      END IF;
    END IF;
  END PROCESS corrected_d_p_process;


  d_neg_in0 <=  - (resize(corrected_d_p_1, 20));
  d_neg_1 <= d_neg_in0(18 DOWNTO 0);

  temp <= x + d_neg_1;

  rMSBNextBits <= unsigned(temp(17 DOWNTO 0));

  rLSBits <= unsigned(corrected_z_p_1(14 DOWNTO 0));

  tempSignBit <= temp(17);

  qBit <=  NOT tempSignBit;

  rNextTemp <= rMSBNextBits & rLSBits & qBit;

  r1 <= signed(rNextTemp);

  r_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r1_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r1_p <= r1;
      END IF;
    END IF;
  END PROCESS r_reg_process;


  rMSBits_1 <= unsigned(r1_p(33 DOWNTO 15));

  x_1 <= signed(rMSBits_1);

  rMSBit <= r1_p(33);

  rMSBitneg <=  NOT rMSBit;

  
  switch_compare_1 <= '1' WHEN rMSBitneg > '0' ELSE
      '0';

  d_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d1_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d1_p <= corrected_d_p_1;
      END IF;
    END IF;
  END PROCESS d_reg_process;


  d_neg_in0_1 <=  - (resize(d1_p, 20));
  d_neg_3 <= d_neg_in0_1(18 DOWNTO 0);

  
  y_1 <= d1_p WHEN switch_compare_1 = '0' ELSE
      d_neg_3;

  temp_3 <= x_1 + y_1;

  rMSBNextBits_1 <= unsigned(temp_3(17 DOWNTO 0));

  rLSBits_1 <= unsigned(r1_p(14 DOWNTO 0));

  tempSignBit_1 <= temp_3(17);

  qBit_1 <=  NOT tempSignBit_1;

  rNextTemp_1 <= rMSBNextBits_1 & rLSBits_1 & qBit_1;

  r2 <= signed(rNextTemp_1);

  r_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r2_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r2_p <= r2;
      END IF;
    END IF;
  END PROCESS r_reg_1_process;


  rMSBits_2 <= unsigned(r2_p(33 DOWNTO 15));

  x_2 <= signed(rMSBits_2);

  rMSBit_1 <= r2_p(33);

  rMSBitneg_1 <=  NOT rMSBit_1;

  
  switch_compare_1_1 <= '1' WHEN rMSBitneg_1 > '0' ELSE
      '0';

  d_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d2_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d2_p <= d1_p;
      END IF;
    END IF;
  END PROCESS d_reg_1_process;


  d_neg_in0_2 <=  - (resize(d2_p, 20));
  d_neg_5 <= d_neg_in0_2(18 DOWNTO 0);

  
  y_3 <= d2_p WHEN switch_compare_1_1 = '0' ELSE
      d_neg_5;

  temp_4 <= x_2 + y_3;

  rMSBNextBits_2 <= unsigned(temp_4(17 DOWNTO 0));

  rLSBits_2 <= unsigned(r2_p(14 DOWNTO 0));

  tempSignBit_2 <= temp_4(17);

  qBit_2 <=  NOT tempSignBit_2;

  rNextTemp_2 <= rMSBNextBits_2 & rLSBits_2 & qBit_2;

  r3 <= signed(rNextTemp_2);

  r_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r3_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r3_p <= r3;
      END IF;
    END IF;
  END PROCESS r_reg_2_process;


  rMSBits_3 <= unsigned(r3_p(33 DOWNTO 15));

  x_3 <= signed(rMSBits_3);

  rMSBit_2 <= r3_p(33);

  rMSBitneg_2 <=  NOT rMSBit_2;

  
  switch_compare_1_2 <= '1' WHEN rMSBitneg_2 > '0' ELSE
      '0';

  d_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d3_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d3_p <= d2_p;
      END IF;
    END IF;
  END PROCESS d_reg_2_process;


  d_neg_in0_3 <=  - (resize(d3_p, 20));
  d_neg_7 <= d_neg_in0_3(18 DOWNTO 0);

  
  y_5 <= d3_p WHEN switch_compare_1_2 = '0' ELSE
      d_neg_7;

  temp_5 <= x_3 + y_5;

  rMSBNextBits_3 <= unsigned(temp_5(17 DOWNTO 0));

  rLSBits_3 <= unsigned(r3_p(14 DOWNTO 0));

  tempSignBit_3 <= temp_5(17);

  qBit_3 <=  NOT tempSignBit_3;

  rNextTemp_3 <= rMSBNextBits_3 & rLSBits_3 & qBit_3;

  r4 <= signed(rNextTemp_3);

  r_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r4_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r4_p <= r4;
      END IF;
    END IF;
  END PROCESS r_reg_3_process;


  rMSBits_4 <= unsigned(r4_p(33 DOWNTO 15));

  x_4 <= signed(rMSBits_4);

  rMSBit_3 <= r4_p(33);

  rMSBitneg_3 <=  NOT rMSBit_3;

  
  switch_compare_1_3 <= '1' WHEN rMSBitneg_3 > '0' ELSE
      '0';

  d_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d4_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d4_p <= d3_p;
      END IF;
    END IF;
  END PROCESS d_reg_3_process;


  d_neg_in0_4 <=  - (resize(d4_p, 20));
  d_neg_9 <= d_neg_in0_4(18 DOWNTO 0);

  
  y_7 <= d4_p WHEN switch_compare_1_3 = '0' ELSE
      d_neg_9;

  temp_6 <= x_4 + y_7;

  rMSBNextBits_4 <= unsigned(temp_6(17 DOWNTO 0));

  rLSBits_4 <= unsigned(r4_p(14 DOWNTO 0));

  tempSignBit_4 <= temp_6(17);

  qBit_4 <=  NOT tempSignBit_4;

  rNextTemp_4 <= rMSBNextBits_4 & rLSBits_4 & qBit_4;

  r5 <= signed(rNextTemp_4);

  r_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r5_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r5_p <= r5;
      END IF;
    END IF;
  END PROCESS r_reg_4_process;


  rMSBits_5 <= unsigned(r5_p(33 DOWNTO 15));

  x_5 <= signed(rMSBits_5);

  rMSBit_4 <= r5_p(33);

  rMSBitneg_4 <=  NOT rMSBit_4;

  
  switch_compare_1_4 <= '1' WHEN rMSBitneg_4 > '0' ELSE
      '0';

  d_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d5_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d5_p <= d4_p;
      END IF;
    END IF;
  END PROCESS d_reg_4_process;


  d_neg_in0_5 <=  - (resize(d5_p, 20));
  d_neg_11 <= d_neg_in0_5(18 DOWNTO 0);

  
  y_9 <= d5_p WHEN switch_compare_1_4 = '0' ELSE
      d_neg_11;

  temp_7 <= x_5 + y_9;

  rMSBNextBits_5 <= unsigned(temp_7(17 DOWNTO 0));

  rLSBits_5 <= unsigned(r5_p(14 DOWNTO 0));

  tempSignBit_5 <= temp_7(17);

  qBit_5 <=  NOT tempSignBit_5;

  rNextTemp_5 <= rMSBNextBits_5 & rLSBits_5 & qBit_5;

  r6 <= signed(rNextTemp_5);

  r_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r6_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r6_p <= r6;
      END IF;
    END IF;
  END PROCESS r_reg_5_process;


  rMSBits_6 <= unsigned(r6_p(33 DOWNTO 15));

  x_6 <= signed(rMSBits_6);

  rMSBit_5 <= r6_p(33);

  rMSBitneg_5 <=  NOT rMSBit_5;

  
  switch_compare_1_5 <= '1' WHEN rMSBitneg_5 > '0' ELSE
      '0';

  d_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d6_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d6_p <= d5_p;
      END IF;
    END IF;
  END PROCESS d_reg_5_process;


  d_neg_in0_6 <=  - (resize(d6_p, 20));
  d_neg_13 <= d_neg_in0_6(18 DOWNTO 0);

  
  y_11 <= d6_p WHEN switch_compare_1_5 = '0' ELSE
      d_neg_13;

  temp_8 <= x_6 + y_11;

  rMSBNextBits_6 <= unsigned(temp_8(17 DOWNTO 0));

  rLSBits_6 <= unsigned(r6_p(14 DOWNTO 0));

  tempSignBit_6 <= temp_8(17);

  qBit_6 <=  NOT tempSignBit_6;

  rNextTemp_6 <= rMSBNextBits_6 & rLSBits_6 & qBit_6;

  r7 <= signed(rNextTemp_6);

  r_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r7_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r7_p <= r7;
      END IF;
    END IF;
  END PROCESS r_reg_6_process;


  rMSBits_7 <= unsigned(r7_p(33 DOWNTO 15));

  x_7 <= signed(rMSBits_7);

  rMSBit_6 <= r7_p(33);

  rMSBitneg_6 <=  NOT rMSBit_6;

  
  switch_compare_1_6 <= '1' WHEN rMSBitneg_6 > '0' ELSE
      '0';

  d_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d7_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d7_p <= d6_p;
      END IF;
    END IF;
  END PROCESS d_reg_6_process;


  d_neg_in0_7 <=  - (resize(d7_p, 20));
  d_neg_15 <= d_neg_in0_7(18 DOWNTO 0);

  
  y_13 <= d7_p WHEN switch_compare_1_6 = '0' ELSE
      d_neg_15;

  temp_9 <= x_7 + y_13;

  rMSBNextBits_7 <= unsigned(temp_9(17 DOWNTO 0));

  rLSBits_7 <= unsigned(r7_p(14 DOWNTO 0));

  tempSignBit_7 <= temp_9(17);

  qBit_7 <=  NOT tempSignBit_7;

  rNextTemp_7 <= rMSBNextBits_7 & rLSBits_7 & qBit_7;

  r8 <= signed(rNextTemp_7);

  r_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r8_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r8_p <= r8;
      END IF;
    END IF;
  END PROCESS r_reg_7_process;


  rMSBits_8 <= unsigned(r8_p(33 DOWNTO 15));

  x_8 <= signed(rMSBits_8);

  rMSBit_7 <= r8_p(33);

  rMSBitneg_7 <=  NOT rMSBit_7;

  
  switch_compare_1_7 <= '1' WHEN rMSBitneg_7 > '0' ELSE
      '0';

  d_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d8_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d8_p <= d7_p;
      END IF;
    END IF;
  END PROCESS d_reg_7_process;


  d_neg_in0_8 <=  - (resize(d8_p, 20));
  d_neg_17 <= d_neg_in0_8(18 DOWNTO 0);

  
  y_15 <= d8_p WHEN switch_compare_1_7 = '0' ELSE
      d_neg_17;

  temp_10 <= x_8 + y_15;

  rMSBNextBits_8 <= unsigned(temp_10(17 DOWNTO 0));

  rLSBits_8 <= unsigned(r8_p(14 DOWNTO 0));

  tempSignBit_8 <= temp_10(17);

  qBit_8 <=  NOT tempSignBit_8;

  rNextTemp_8 <= rMSBNextBits_8 & rLSBits_8 & qBit_8;

  r9 <= signed(rNextTemp_8);

  r_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r9_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r9_p <= r9;
      END IF;
    END IF;
  END PROCESS r_reg_8_process;


  rMSBits_9 <= unsigned(r9_p(33 DOWNTO 15));

  x_9 <= signed(rMSBits_9);

  rMSBit_8 <= r9_p(33);

  rMSBitneg_8 <=  NOT rMSBit_8;

  
  switch_compare_1_8 <= '1' WHEN rMSBitneg_8 > '0' ELSE
      '0';

  d_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d9_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d9_p <= d8_p;
      END IF;
    END IF;
  END PROCESS d_reg_8_process;


  d_neg_in0_9 <=  - (resize(d9_p, 20));
  d_neg_19 <= d_neg_in0_9(18 DOWNTO 0);

  
  y_17 <= d9_p WHEN switch_compare_1_8 = '0' ELSE
      d_neg_19;

  temp_11 <= x_9 + y_17;

  rMSBNextBits_9 <= unsigned(temp_11(17 DOWNTO 0));

  rLSBits_9 <= unsigned(r9_p(14 DOWNTO 0));

  tempSignBit_9 <= temp_11(17);

  qBit_9 <=  NOT tempSignBit_9;

  rNextTemp_9 <= rMSBNextBits_9 & rLSBits_9 & qBit_9;

  r10 <= signed(rNextTemp_9);

  r_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r10_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r10_p <= r10;
      END IF;
    END IF;
  END PROCESS r_reg_9_process;


  rMSBits_10 <= unsigned(r10_p(33 DOWNTO 15));

  x_10 <= signed(rMSBits_10);

  rMSBit_9 <= r10_p(33);

  rMSBitneg_9 <=  NOT rMSBit_9;

  
  switch_compare_1_9 <= '1' WHEN rMSBitneg_9 > '0' ELSE
      '0';

  d_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d10_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d10_p <= d9_p;
      END IF;
    END IF;
  END PROCESS d_reg_9_process;


  d_neg_in0_10 <=  - (resize(d10_p, 20));
  d_neg_21 <= d_neg_in0_10(18 DOWNTO 0);

  
  y_19 <= d10_p WHEN switch_compare_1_9 = '0' ELSE
      d_neg_21;

  temp_12 <= x_10 + y_19;

  rMSBNextBits_10 <= unsigned(temp_12(17 DOWNTO 0));

  rLSBits_10 <= unsigned(r10_p(14 DOWNTO 0));

  tempSignBit_10 <= temp_12(17);

  qBit_10 <=  NOT tempSignBit_10;

  rNextTemp_10 <= rMSBNextBits_10 & rLSBits_10 & qBit_10;

  r11 <= signed(rNextTemp_10);

  r_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r11_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r11_p <= r11;
      END IF;
    END IF;
  END PROCESS r_reg_10_process;


  rMSBits_11 <= unsigned(r11_p(33 DOWNTO 15));

  x_11 <= signed(rMSBits_11);

  rMSBit_10 <= r11_p(33);

  rMSBitneg_10 <=  NOT rMSBit_10;

  
  switch_compare_1_10 <= '1' WHEN rMSBitneg_10 > '0' ELSE
      '0';

  d_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d11_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d11_p <= d10_p;
      END IF;
    END IF;
  END PROCESS d_reg_10_process;


  d_neg_in0_11 <=  - (resize(d11_p, 20));
  d_neg_23 <= d_neg_in0_11(18 DOWNTO 0);

  
  y_21 <= d11_p WHEN switch_compare_1_10 = '0' ELSE
      d_neg_23;

  temp_13 <= x_11 + y_21;

  rMSBNextBits_11 <= unsigned(temp_13(17 DOWNTO 0));

  rLSBits_11 <= unsigned(r11_p(14 DOWNTO 0));

  tempSignBit_11 <= temp_13(17);

  qBit_11 <=  NOT tempSignBit_11;

  rNextTemp_11 <= rMSBNextBits_11 & rLSBits_11 & qBit_11;

  r12 <= signed(rNextTemp_11);

  r_reg_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r12_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r12_p <= r12;
      END IF;
    END IF;
  END PROCESS r_reg_11_process;


  rMSBits_12 <= unsigned(r12_p(33 DOWNTO 15));

  x_12 <= signed(rMSBits_12);

  rMSBit_11 <= r12_p(33);

  rMSBitneg_11 <=  NOT rMSBit_11;

  
  switch_compare_1_11 <= '1' WHEN rMSBitneg_11 > '0' ELSE
      '0';

  d_reg_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d12_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d12_p <= d11_p;
      END IF;
    END IF;
  END PROCESS d_reg_11_process;


  d_neg_in0_12 <=  - (resize(d12_p, 20));
  d_neg_25 <= d_neg_in0_12(18 DOWNTO 0);

  
  y_23 <= d12_p WHEN switch_compare_1_11 = '0' ELSE
      d_neg_25;

  temp_14 <= x_12 + y_23;

  rMSBNextBits_12 <= unsigned(temp_14(17 DOWNTO 0));

  rLSBits_12 <= unsigned(r12_p(14 DOWNTO 0));

  tempSignBit_12 <= temp_14(17);

  qBit_12 <=  NOT tempSignBit_12;

  rNextTemp_12 <= rMSBNextBits_12 & rLSBits_12 & qBit_12;

  r13 <= signed(rNextTemp_12);

  r_reg_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r13_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r13_p <= r13;
      END IF;
    END IF;
  END PROCESS r_reg_12_process;


  rMSBits_13 <= unsigned(r13_p(33 DOWNTO 15));

  x_13 <= signed(rMSBits_13);

  rMSBit_12 <= r13_p(33);

  rMSBitneg_12 <=  NOT rMSBit_12;

  
  switch_compare_1_12 <= '1' WHEN rMSBitneg_12 > '0' ELSE
      '0';

  d_reg_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d13_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d13_p <= d12_p;
      END IF;
    END IF;
  END PROCESS d_reg_12_process;


  d_neg_in0_13 <=  - (resize(d13_p, 20));
  d_neg_27 <= d_neg_in0_13(18 DOWNTO 0);

  
  y_25 <= d13_p WHEN switch_compare_1_12 = '0' ELSE
      d_neg_27;

  temp_15 <= x_13 + y_25;

  rMSBNextBits_13 <= unsigned(temp_15(17 DOWNTO 0));

  rLSBits_13 <= unsigned(r13_p(14 DOWNTO 0));

  tempSignBit_13 <= temp_15(17);

  qBit_13 <=  NOT tempSignBit_13;

  rNextTemp_13 <= rMSBNextBits_13 & rLSBits_13 & qBit_13;

  r14 <= signed(rNextTemp_13);

  r_reg_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r14_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r14_p <= r14;
      END IF;
    END IF;
  END PROCESS r_reg_13_process;


  rMSBits_14 <= unsigned(r14_p(33 DOWNTO 15));

  x_14 <= signed(rMSBits_14);

  rMSBit_13 <= r14_p(33);

  rMSBitneg_13 <=  NOT rMSBit_13;

  
  switch_compare_1_13 <= '1' WHEN rMSBitneg_13 > '0' ELSE
      '0';

  d_reg_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d14_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d14_p <= d13_p;
      END IF;
    END IF;
  END PROCESS d_reg_13_process;


  d_neg_in0_14 <=  - (resize(d14_p, 20));
  d_neg_29 <= d_neg_in0_14(18 DOWNTO 0);

  
  y_27 <= d14_p WHEN switch_compare_1_13 = '0' ELSE
      d_neg_29;

  temp_16 <= x_14 + y_27;

  rMSBNextBits_14 <= unsigned(temp_16(17 DOWNTO 0));

  rLSBits_14 <= unsigned(r14_p(14 DOWNTO 0));

  tempSignBit_14 <= temp_16(17);

  qBit_14 <=  NOT tempSignBit_14;

  rNextTemp_14 <= rMSBNextBits_14 & rLSBits_14 & qBit_14;

  r15 <= signed(rNextTemp_14);

  r_reg_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r15_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r15_p <= r15;
      END IF;
    END IF;
  END PROCESS r_reg_14_process;


  rMSBits_15 <= unsigned(r15_p(33 DOWNTO 15));

  x_15 <= signed(rMSBits_15);

  rMSBit_14 <= r15_p(33);

  rMSBitneg_14 <=  NOT rMSBit_14;

  
  switch_compare_1_14 <= '1' WHEN rMSBitneg_14 > '0' ELSE
      '0';

  d_reg_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d15_p <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d15_p <= d14_p;
      END IF;
    END IF;
  END PROCESS d_reg_14_process;


  d_neg_in0_15 <=  - (resize(d15_p, 20));
  d_neg_31 <= d_neg_in0_15(18 DOWNTO 0);

  
  y_29 <= d15_p WHEN switch_compare_1_14 = '0' ELSE
      d_neg_31;

  temp_17 <= x_15 + y_29;

  rMSBNextBits_15 <= unsigned(temp_17(17 DOWNTO 0));

  rLSBits_15 <= unsigned(r15_p(14 DOWNTO 0));

  tempSignBit_15 <= temp_17(17);

  qBit_15 <=  NOT tempSignBit_15;

  rNextTemp_15 <= rMSBNextBits_15 & rLSBits_15 & qBit_15;

  r16 <= signed(rNextTemp_15);

  r_reg_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r16_p <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r16_p <= r16;
      END IF;
    END IF;
  END PROCESS r_reg_15_process;


  qTemp <= unsigned(r16_p(15 DOWNTO 0));

  qtempExt_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qtempExt_p_temp <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        qtempExt_p_temp <= qTemp;
      END IF;
    END IF;
  END PROCESS qtempExt_p_process;


  
  qtempPost <= ConstantSignal_2 WHEN initFlagenable = '0' ELSE
      qtempExt_p_temp;

  qoutDTC <= qtempPost;

  q_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      quotient_tmp <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        quotient_tmp <= qoutDTC;
      END IF;
    END IF;
  END PROCESS q_process;


  quotient <= std_logic_vector(quotient_tmp);

END rtl;

