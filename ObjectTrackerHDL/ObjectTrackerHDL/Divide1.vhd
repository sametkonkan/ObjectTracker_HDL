-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\Divide1.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Divide1
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Preprocess/CurrPreprocess/Divide1
-- Hierarchy Level: 3
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ObjectTrackerHDL_pkg.ALL;

ENTITY Divide1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dividend_in                       :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28_En12
        divisor_in                        :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        quotient                          :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En12
        );
END Divide1;


ARCHITECTURE rtl OF Divide1 IS

  -- Signals
  SIGNAL trueFlag_1                       : std_logic;  -- ufix1
  SIGNAL initFlagDelay_reg                : std_logic_vector(32 DOWNTO 0);  -- ufix1 [33]
  SIGNAL initFlagenable                   : std_logic;  -- ufix1
  SIGNAL ConstantSignal_1                 : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL delayMatch_reg                   : vector_of_signed31(0 TO 32);  -- sfix31 [33]
  SIGNAL ConstantSignal_2                 : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL dividend_in_signed               : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL dividend_in_reg                  : signed(27 DOWNTO 0);  -- sfix28_En12
  SIGNAL z_MSB                            : std_logic;  -- ufix1
  SIGNAL divisor_in_unsigned              : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL divisor_in_reg                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL s                                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL In2_dtc_2                        : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL d_MSB                            : std_logic;  -- ufix1
  SIGNAL isSignsDiffer                    : std_logic;  -- ufix1
  SIGNAL signFlag_p_reg                   : std_logic_vector(31 DOWNTO 0);  -- ufix1 [32]
  SIGNAL signFlag_p_1                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL preCorrectionIn1_sig_dtc_1       : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL preCorrectionIn1_sig_dtc_dtc     : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL z_neg_in0                        : signed(29 DOWNTO 0);  -- sfix30
  SIGNAL z_neg_1                          : signed(28 DOWNTO 0);  -- sfix29
  SIGNAL z_neg_dtc                        : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL corrected_z                      : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL corrected_z_p_1                  : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits                          : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x                                : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL preCorrectionIn2_sig_dtc_1       : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL preCorrectionIn2_sig_dtc_dtc     : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0                        : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL d_neg_1                          : signed(9 DOWNTO 0);  -- sfix10
  SIGNAL d_neg_dtc                        : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL corrected_d                      : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL corrected_d_p_1                  : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_1                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_3                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits                     : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits                          : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit                      : std_logic;  -- ufix1
  SIGNAL qBit                             : std_logic;  -- ufix1
  SIGNAL rNextTemp                        : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r1                               : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r1_p                             : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_1                        : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_1                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit                           : std_logic;  -- ufix1
  SIGNAL rMSBitneg                        : std_logic;  -- ufix1
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL d1_p                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_2                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_5                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_1                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_3                           : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_1                   : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_1                        : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_1                    : std_logic;  -- ufix1
  SIGNAL qBit_1                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_1                      : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r2                               : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r2_p                             : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_2                        : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_2                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_1                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_1                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL d2_p                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_3                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_7                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_3                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_4                           : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_2                   : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_2                        : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_2                    : std_logic;  -- ufix1
  SIGNAL qBit_2                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_2                      : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r3                               : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r3_p                             : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_3                        : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_3                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_2                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_2                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL d3_p                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_4                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_9                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_5                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_5                           : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_3                   : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_3                        : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_3                    : std_logic;  -- ufix1
  SIGNAL qBit_3                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_3                      : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r4                               : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r4_p                             : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_4                        : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_4                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_3                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_3                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL d4_p                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_5                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_11                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_7                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_6                           : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_4                   : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_4                        : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_4                    : std_logic;  -- ufix1
  SIGNAL qBit_4                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_4                      : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r5                               : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r5_p                             : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_5                        : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_5                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_4                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_4                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL d5_p                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_6                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_13                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_9                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_7                           : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_5                   : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_5                        : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_5                    : std_logic;  -- ufix1
  SIGNAL qBit_5                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_5                      : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r6                               : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r6_p                             : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_6                        : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_6                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_5                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_5                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL d6_p                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_7                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_15                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_11                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_8                           : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_6                   : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_6                        : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_6                    : std_logic;  -- ufix1
  SIGNAL qBit_6                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_6                      : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r7                               : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r7_p                             : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_7                        : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_7                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_6                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_6                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL d7_p                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_8                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_17                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_13                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_9                           : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_7                   : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_7                        : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_7                    : std_logic;  -- ufix1
  SIGNAL qBit_7                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_7                      : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r8                               : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r8_p                             : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_8                        : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_8                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_7                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_7                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL d8_p                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_9                      : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_19                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_15                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_10                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_8                   : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_8                        : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_8                    : std_logic;  -- ufix1
  SIGNAL qBit_8                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_8                      : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r9                               : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r9_p                             : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_9                        : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_9                              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_8                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_8                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL d9_p                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_10                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_21                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_17                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_11                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_9                   : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_9                        : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_9                    : std_logic;  -- ufix1
  SIGNAL qBit_9                           : std_logic;  -- ufix1
  SIGNAL rNextTemp_9                      : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r10                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r10_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_10                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_10                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_9                         : std_logic;  -- ufix1
  SIGNAL rMSBitneg_9                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL d10_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_11                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_23                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_19                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_12                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_10                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_10                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_10                   : std_logic;  -- ufix1
  SIGNAL qBit_10                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_10                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r11                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r11_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_11                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_11                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_10                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_10                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL d11_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_12                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_25                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_21                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_13                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_11                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_11                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_11                   : std_logic;  -- ufix1
  SIGNAL qBit_11                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_11                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r12                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r12_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_12                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_12                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_11                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_11                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL d12_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_13                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_27                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_23                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_14                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_12                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_12                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_12                   : std_logic;  -- ufix1
  SIGNAL qBit_12                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_12                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r13                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r13_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_13                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_13                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_12                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_12                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL d13_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_14                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_29                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_25                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_15                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_13                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_13                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_13                   : std_logic;  -- ufix1
  SIGNAL qBit_13                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_13                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r14                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r14_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_14                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_14                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_13                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_13                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL d14_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_15                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_31                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_27                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_16                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_14                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_14                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_14                   : std_logic;  -- ufix1
  SIGNAL qBit_14                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_14                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r15                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r15_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_15                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_15                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_14                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_14                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL d15_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_16                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_33                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_29                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_17                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_15                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_15                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_15                   : std_logic;  -- ufix1
  SIGNAL qBit_15                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_15                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r16                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r16_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_16                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_16                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_15                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_15                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL d16_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_17                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_35                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_31                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_18                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_16                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_16                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_16                   : std_logic;  -- ufix1
  SIGNAL qBit_16                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_16                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r17                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r17_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_17                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_17                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_16                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_16                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL d17_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_18                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_37                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_33                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_19                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_17                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_17                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_17                   : std_logic;  -- ufix1
  SIGNAL qBit_17                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_17                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r18                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r18_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_18                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_18                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_17                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_17                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_20              : std_logic;
  SIGNAL d18_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_19                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_39                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_35                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_20                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_18                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_18                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_18                   : std_logic;  -- ufix1
  SIGNAL qBit_18                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_18                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r19                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r19_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_19                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_19                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_18                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_18                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_21              : std_logic;
  SIGNAL d19_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_20                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_41                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_37                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_21                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_19                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_19                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_19                   : std_logic;  -- ufix1
  SIGNAL qBit_19                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_19                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r20                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r20_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_20                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_20                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_19                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_19                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_22              : std_logic;
  SIGNAL d20_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_21                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_43                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_39                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_22                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_20                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_20                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_20                   : std_logic;  -- ufix1
  SIGNAL qBit_20                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_20                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r21                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r21_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_21                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_21                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_20                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_20                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_23              : std_logic;
  SIGNAL d21_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_22                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_45                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_41                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_23                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_21                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_21                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_21                   : std_logic;  -- ufix1
  SIGNAL qBit_21                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_21                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r22                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r22_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_22                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_22                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_21                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_21                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_24              : std_logic;
  SIGNAL d22_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_23                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_47                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_43                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_24                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_22                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_22                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_22                   : std_logic;  -- ufix1
  SIGNAL qBit_22                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_22                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r23                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r23_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_23                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_23                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_22                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_22                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_25              : std_logic;
  SIGNAL d23_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_24                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_49                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_45                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_25                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_23                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_23                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_23                   : std_logic;  -- ufix1
  SIGNAL qBit_23                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_23                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r24                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r24_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_24                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_24                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_23                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_23                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_26              : std_logic;
  SIGNAL d24_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_25                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_51                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_47                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_26                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_24                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_24                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_24                   : std_logic;  -- ufix1
  SIGNAL qBit_24                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_24                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r25                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r25_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_25                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_25                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_24                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_24                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_27              : std_logic;
  SIGNAL d25_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_26                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_53                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_49                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_27                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_25                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_25                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_25                   : std_logic;  -- ufix1
  SIGNAL qBit_25                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_25                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r26                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r26_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_26                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_26                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_25                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_25                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_28              : std_logic;
  SIGNAL d26_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_27                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_55                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_51                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_28                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_26                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_26                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_26                   : std_logic;  -- ufix1
  SIGNAL qBit_26                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_26                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r27                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r27_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_27                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_27                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_26                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_26                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_29              : std_logic;
  SIGNAL d27_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_28                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_57                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_53                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_29                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_27                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_27                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_27                   : std_logic;  -- ufix1
  SIGNAL qBit_27                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_27                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r28                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r28_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_28                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_28                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_27                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_27                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_30              : std_logic;
  SIGNAL d28_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_29                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_59                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_55                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_30                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_28                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_28                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_28                   : std_logic;  -- ufix1
  SIGNAL qBit_28                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_28                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r29                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r29_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL rMSBits_29                       : unsigned(30 DOWNTO 0);  -- ufix31
  SIGNAL x_29                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBit_28                        : std_logic;  -- ufix1
  SIGNAL rMSBitneg_28                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1_31              : std_logic;
  SIGNAL d29_p                            : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL d_neg_in0_30                     : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL d_neg_61                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL y_57                             : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL temp_31                          : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL rMSBNextBits_29                  : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rLSBits_29                       : unsigned(28 DOWNTO 0);  -- ufix29
  SIGNAL tempSignBit_29                   : std_logic;  -- ufix1
  SIGNAL qBit_29                          : std_logic;  -- ufix1
  SIGNAL rNextTemp_29                     : unsigned(59 DOWNTO 0);  -- ufix60
  SIGNAL r30                              : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL r30_p                            : signed(59 DOWNTO 0);  -- sfix60
  SIGNAL qTemp                            : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL qtempExt                         : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL qtempExt_p_1                     : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL qin_neg_post_in0                 : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL qin_neg_post_1                   : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL qtemp_post                       : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL sel1                             : std_logic;  -- ufix1
  SIGNAL sel0                             : std_logic;  -- ufix1
  SIGNAL sel                              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL ConstantSignalMax_1              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL delayMatch_reg_1                 : vector_of_signed31(0 TO 32);  -- sfix31 [33]
  SIGNAL ConstantSignalMax_2              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL ConstantSignalMin_1              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL delayMatch_reg_2                 : vector_of_signed31(0 TO 32);  -- sfix31 [33]
  SIGNAL ConstantSignalMin_2              : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL qtempPost                        : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL qtempPost_1                      : signed(30 DOWNTO 0);  -- sfix31
  SIGNAL qtempPost_2                      : signed(30 DOWNTO 0);  -- sfix31_En12
  SIGNAL qoutDTC                          : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL quotient_tmp                     : signed(15 DOWNTO 0);  -- sfix16_En12

BEGIN
  trueFlag_1 <= '1';

  initFlagDelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      initFlagDelay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        initFlagDelay_reg(0) <= trueFlag_1;
        initFlagDelay_reg(32 DOWNTO 1) <= initFlagDelay_reg(31 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS initFlagDelay_process;

  initFlagenable <= initFlagDelay_reg(32);

  ConstantSignal_1 <= to_signed(16#00000000#, 31);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_signed(16#00000000#, 31));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= ConstantSignal_1;
        delayMatch_reg(1 TO 32) <= delayMatch_reg(0 TO 31);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  ConstantSignal_2 <= delayMatch_reg(32);

  dividend_in_signed <= signed(dividend_in);

  z_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dividend_in_reg <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dividend_in_reg <= dividend_in_signed;
      END IF;
    END IF;
  END PROCESS z_p_process;


  z_MSB <= dividend_in_reg(27);

  divisor_in_unsigned <= unsigned(divisor_in);

  d_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      divisor_in_reg <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        divisor_in_reg <= divisor_in_unsigned;
      END IF;
    END IF;
  END PROCESS d_p_process;


  s <= divisor_in_reg;

  In2_dtc_2 <= signed(resize(s, 9));

  d_MSB <= In2_dtc_2(8);

  isSignsDiffer <= z_MSB XOR d_MSB;

  signFlag_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      signFlag_p_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        signFlag_p_reg(0) <= isSignsDiffer;
        signFlag_p_reg(31 DOWNTO 1) <= signFlag_p_reg(30 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS signFlag_p_process;

  signFlag_p_1 <= signFlag_p_reg(31);

  
  switch_compare_1 <= '1' WHEN signFlag_p_1 > '0' ELSE
      '0';

  
  switch_compare_1_1 <= '1' WHEN z_MSB > '0' ELSE
      '0';

  preCorrectionIn1_sig_dtc_1 <= resize(dividend_in_reg, 29);

  preCorrectionIn1_sig_dtc_dtc <= resize(preCorrectionIn1_sig_dtc_1, 60);

  z_neg_in0 <=  - (resize(preCorrectionIn1_sig_dtc_1, 30));
  z_neg_1 <= z_neg_in0(28 DOWNTO 0);

  z_neg_dtc <= resize(z_neg_1, 60);

  
  corrected_z <= preCorrectionIn1_sig_dtc_dtc WHEN switch_compare_1_1 = '0' ELSE
      z_neg_dtc;

  corrected_z_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      corrected_z_p_1 <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        corrected_z_p_1 <= corrected_z;
      END IF;
    END IF;
  END PROCESS corrected_z_p_process;


  rMSBits <= unsigned(corrected_z_p_1(59 DOWNTO 29));

  x <= signed(rMSBits);

  
  switch_compare_1_2 <= '1' WHEN d_MSB > '0' ELSE
      '0';

  preCorrectionIn2_sig_dtc_1 <= resize(In2_dtc_2, 10);

  preCorrectionIn2_sig_dtc_dtc <= resize(preCorrectionIn2_sig_dtc_1, 31);

  d_neg_in0 <=  - (resize(preCorrectionIn2_sig_dtc_1, 11));
  d_neg_1 <= d_neg_in0(9 DOWNTO 0);

  d_neg_dtc <= resize(d_neg_1, 31);

  
  corrected_d <= preCorrectionIn2_sig_dtc_dtc WHEN switch_compare_1_2 = '0' ELSE
      d_neg_dtc;

  corrected_d_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      corrected_d_p_1 <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        corrected_d_p_1 <= corrected_d;
      END IF;
    END IF;
  END PROCESS corrected_d_p_process;


  d_neg_in0_1 <=  - (resize(corrected_d_p_1, 32));
  d_neg_3 <= d_neg_in0_1(30 DOWNTO 0);

  temp <= x + d_neg_3;

  rMSBNextBits <= unsigned(temp(29 DOWNTO 0));

  rLSBits <= unsigned(corrected_z_p_1(28 DOWNTO 0));

  tempSignBit <= temp(29);

  qBit <=  NOT tempSignBit;

  rNextTemp <= rMSBNextBits & rLSBits & qBit;

  r1 <= signed(rNextTemp);

  r_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r1_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r1_p <= r1;
      END IF;
    END IF;
  END PROCESS r_reg_process;


  rMSBits_1 <= unsigned(r1_p(59 DOWNTO 29));

  x_1 <= signed(rMSBits_1);

  rMSBit <= r1_p(59);

  rMSBitneg <=  NOT rMSBit;

  
  switch_compare_1_3 <= '1' WHEN rMSBitneg > '0' ELSE
      '0';

  d_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d1_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d1_p <= corrected_d_p_1;
      END IF;
    END IF;
  END PROCESS d_reg_process;


  d_neg_in0_2 <=  - (resize(d1_p, 32));
  d_neg_5 <= d_neg_in0_2(30 DOWNTO 0);

  
  y_1 <= d1_p WHEN switch_compare_1_3 = '0' ELSE
      d_neg_5;

  temp_3 <= x_1 + y_1;

  rMSBNextBits_1 <= unsigned(temp_3(29 DOWNTO 0));

  rLSBits_1 <= unsigned(r1_p(28 DOWNTO 0));

  tempSignBit_1 <= temp_3(29);

  qBit_1 <=  NOT tempSignBit_1;

  rNextTemp_1 <= rMSBNextBits_1 & rLSBits_1 & qBit_1;

  r2 <= signed(rNextTemp_1);

  r_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r2_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r2_p <= r2;
      END IF;
    END IF;
  END PROCESS r_reg_1_process;


  rMSBits_2 <= unsigned(r2_p(59 DOWNTO 29));

  x_2 <= signed(rMSBits_2);

  rMSBit_1 <= r2_p(59);

  rMSBitneg_1 <=  NOT rMSBit_1;

  
  switch_compare_1_4 <= '1' WHEN rMSBitneg_1 > '0' ELSE
      '0';

  d_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d2_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d2_p <= d1_p;
      END IF;
    END IF;
  END PROCESS d_reg_1_process;


  d_neg_in0_3 <=  - (resize(d2_p, 32));
  d_neg_7 <= d_neg_in0_3(30 DOWNTO 0);

  
  y_3 <= d2_p WHEN switch_compare_1_4 = '0' ELSE
      d_neg_7;

  temp_4 <= x_2 + y_3;

  rMSBNextBits_2 <= unsigned(temp_4(29 DOWNTO 0));

  rLSBits_2 <= unsigned(r2_p(28 DOWNTO 0));

  tempSignBit_2 <= temp_4(29);

  qBit_2 <=  NOT tempSignBit_2;

  rNextTemp_2 <= rMSBNextBits_2 & rLSBits_2 & qBit_2;

  r3 <= signed(rNextTemp_2);

  r_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r3_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r3_p <= r3;
      END IF;
    END IF;
  END PROCESS r_reg_2_process;


  rMSBits_3 <= unsigned(r3_p(59 DOWNTO 29));

  x_3 <= signed(rMSBits_3);

  rMSBit_2 <= r3_p(59);

  rMSBitneg_2 <=  NOT rMSBit_2;

  
  switch_compare_1_5 <= '1' WHEN rMSBitneg_2 > '0' ELSE
      '0';

  d_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d3_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d3_p <= d2_p;
      END IF;
    END IF;
  END PROCESS d_reg_2_process;


  d_neg_in0_4 <=  - (resize(d3_p, 32));
  d_neg_9 <= d_neg_in0_4(30 DOWNTO 0);

  
  y_5 <= d3_p WHEN switch_compare_1_5 = '0' ELSE
      d_neg_9;

  temp_5 <= x_3 + y_5;

  rMSBNextBits_3 <= unsigned(temp_5(29 DOWNTO 0));

  rLSBits_3 <= unsigned(r3_p(28 DOWNTO 0));

  tempSignBit_3 <= temp_5(29);

  qBit_3 <=  NOT tempSignBit_3;

  rNextTemp_3 <= rMSBNextBits_3 & rLSBits_3 & qBit_3;

  r4 <= signed(rNextTemp_3);

  r_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r4_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r4_p <= r4;
      END IF;
    END IF;
  END PROCESS r_reg_3_process;


  rMSBits_4 <= unsigned(r4_p(59 DOWNTO 29));

  x_4 <= signed(rMSBits_4);

  rMSBit_3 <= r4_p(59);

  rMSBitneg_3 <=  NOT rMSBit_3;

  
  switch_compare_1_6 <= '1' WHEN rMSBitneg_3 > '0' ELSE
      '0';

  d_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d4_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d4_p <= d3_p;
      END IF;
    END IF;
  END PROCESS d_reg_3_process;


  d_neg_in0_5 <=  - (resize(d4_p, 32));
  d_neg_11 <= d_neg_in0_5(30 DOWNTO 0);

  
  y_7 <= d4_p WHEN switch_compare_1_6 = '0' ELSE
      d_neg_11;

  temp_6 <= x_4 + y_7;

  rMSBNextBits_4 <= unsigned(temp_6(29 DOWNTO 0));

  rLSBits_4 <= unsigned(r4_p(28 DOWNTO 0));

  tempSignBit_4 <= temp_6(29);

  qBit_4 <=  NOT tempSignBit_4;

  rNextTemp_4 <= rMSBNextBits_4 & rLSBits_4 & qBit_4;

  r5 <= signed(rNextTemp_4);

  r_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r5_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r5_p <= r5;
      END IF;
    END IF;
  END PROCESS r_reg_4_process;


  rMSBits_5 <= unsigned(r5_p(59 DOWNTO 29));

  x_5 <= signed(rMSBits_5);

  rMSBit_4 <= r5_p(59);

  rMSBitneg_4 <=  NOT rMSBit_4;

  
  switch_compare_1_7 <= '1' WHEN rMSBitneg_4 > '0' ELSE
      '0';

  d_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d5_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d5_p <= d4_p;
      END IF;
    END IF;
  END PROCESS d_reg_4_process;


  d_neg_in0_6 <=  - (resize(d5_p, 32));
  d_neg_13 <= d_neg_in0_6(30 DOWNTO 0);

  
  y_9 <= d5_p WHEN switch_compare_1_7 = '0' ELSE
      d_neg_13;

  temp_7 <= x_5 + y_9;

  rMSBNextBits_5 <= unsigned(temp_7(29 DOWNTO 0));

  rLSBits_5 <= unsigned(r5_p(28 DOWNTO 0));

  tempSignBit_5 <= temp_7(29);

  qBit_5 <=  NOT tempSignBit_5;

  rNextTemp_5 <= rMSBNextBits_5 & rLSBits_5 & qBit_5;

  r6 <= signed(rNextTemp_5);

  r_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r6_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r6_p <= r6;
      END IF;
    END IF;
  END PROCESS r_reg_5_process;


  rMSBits_6 <= unsigned(r6_p(59 DOWNTO 29));

  x_6 <= signed(rMSBits_6);

  rMSBit_5 <= r6_p(59);

  rMSBitneg_5 <=  NOT rMSBit_5;

  
  switch_compare_1_8 <= '1' WHEN rMSBitneg_5 > '0' ELSE
      '0';

  d_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d6_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d6_p <= d5_p;
      END IF;
    END IF;
  END PROCESS d_reg_5_process;


  d_neg_in0_7 <=  - (resize(d6_p, 32));
  d_neg_15 <= d_neg_in0_7(30 DOWNTO 0);

  
  y_11 <= d6_p WHEN switch_compare_1_8 = '0' ELSE
      d_neg_15;

  temp_8 <= x_6 + y_11;

  rMSBNextBits_6 <= unsigned(temp_8(29 DOWNTO 0));

  rLSBits_6 <= unsigned(r6_p(28 DOWNTO 0));

  tempSignBit_6 <= temp_8(29);

  qBit_6 <=  NOT tempSignBit_6;

  rNextTemp_6 <= rMSBNextBits_6 & rLSBits_6 & qBit_6;

  r7 <= signed(rNextTemp_6);

  r_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r7_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r7_p <= r7;
      END IF;
    END IF;
  END PROCESS r_reg_6_process;


  rMSBits_7 <= unsigned(r7_p(59 DOWNTO 29));

  x_7 <= signed(rMSBits_7);

  rMSBit_6 <= r7_p(59);

  rMSBitneg_6 <=  NOT rMSBit_6;

  
  switch_compare_1_9 <= '1' WHEN rMSBitneg_6 > '0' ELSE
      '0';

  d_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d7_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d7_p <= d6_p;
      END IF;
    END IF;
  END PROCESS d_reg_6_process;


  d_neg_in0_8 <=  - (resize(d7_p, 32));
  d_neg_17 <= d_neg_in0_8(30 DOWNTO 0);

  
  y_13 <= d7_p WHEN switch_compare_1_9 = '0' ELSE
      d_neg_17;

  temp_9 <= x_7 + y_13;

  rMSBNextBits_7 <= unsigned(temp_9(29 DOWNTO 0));

  rLSBits_7 <= unsigned(r7_p(28 DOWNTO 0));

  tempSignBit_7 <= temp_9(29);

  qBit_7 <=  NOT tempSignBit_7;

  rNextTemp_7 <= rMSBNextBits_7 & rLSBits_7 & qBit_7;

  r8 <= signed(rNextTemp_7);

  r_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r8_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r8_p <= r8;
      END IF;
    END IF;
  END PROCESS r_reg_7_process;


  rMSBits_8 <= unsigned(r8_p(59 DOWNTO 29));

  x_8 <= signed(rMSBits_8);

  rMSBit_7 <= r8_p(59);

  rMSBitneg_7 <=  NOT rMSBit_7;

  
  switch_compare_1_10 <= '1' WHEN rMSBitneg_7 > '0' ELSE
      '0';

  d_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d8_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d8_p <= d7_p;
      END IF;
    END IF;
  END PROCESS d_reg_7_process;


  d_neg_in0_9 <=  - (resize(d8_p, 32));
  d_neg_19 <= d_neg_in0_9(30 DOWNTO 0);

  
  y_15 <= d8_p WHEN switch_compare_1_10 = '0' ELSE
      d_neg_19;

  temp_10 <= x_8 + y_15;

  rMSBNextBits_8 <= unsigned(temp_10(29 DOWNTO 0));

  rLSBits_8 <= unsigned(r8_p(28 DOWNTO 0));

  tempSignBit_8 <= temp_10(29);

  qBit_8 <=  NOT tempSignBit_8;

  rNextTemp_8 <= rMSBNextBits_8 & rLSBits_8 & qBit_8;

  r9 <= signed(rNextTemp_8);

  r_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r9_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r9_p <= r9;
      END IF;
    END IF;
  END PROCESS r_reg_8_process;


  rMSBits_9 <= unsigned(r9_p(59 DOWNTO 29));

  x_9 <= signed(rMSBits_9);

  rMSBit_8 <= r9_p(59);

  rMSBitneg_8 <=  NOT rMSBit_8;

  
  switch_compare_1_11 <= '1' WHEN rMSBitneg_8 > '0' ELSE
      '0';

  d_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d9_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d9_p <= d8_p;
      END IF;
    END IF;
  END PROCESS d_reg_8_process;


  d_neg_in0_10 <=  - (resize(d9_p, 32));
  d_neg_21 <= d_neg_in0_10(30 DOWNTO 0);

  
  y_17 <= d9_p WHEN switch_compare_1_11 = '0' ELSE
      d_neg_21;

  temp_11 <= x_9 + y_17;

  rMSBNextBits_9 <= unsigned(temp_11(29 DOWNTO 0));

  rLSBits_9 <= unsigned(r9_p(28 DOWNTO 0));

  tempSignBit_9 <= temp_11(29);

  qBit_9 <=  NOT tempSignBit_9;

  rNextTemp_9 <= rMSBNextBits_9 & rLSBits_9 & qBit_9;

  r10 <= signed(rNextTemp_9);

  r_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r10_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r10_p <= r10;
      END IF;
    END IF;
  END PROCESS r_reg_9_process;


  rMSBits_10 <= unsigned(r10_p(59 DOWNTO 29));

  x_10 <= signed(rMSBits_10);

  rMSBit_9 <= r10_p(59);

  rMSBitneg_9 <=  NOT rMSBit_9;

  
  switch_compare_1_12 <= '1' WHEN rMSBitneg_9 > '0' ELSE
      '0';

  d_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d10_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d10_p <= d9_p;
      END IF;
    END IF;
  END PROCESS d_reg_9_process;


  d_neg_in0_11 <=  - (resize(d10_p, 32));
  d_neg_23 <= d_neg_in0_11(30 DOWNTO 0);

  
  y_19 <= d10_p WHEN switch_compare_1_12 = '0' ELSE
      d_neg_23;

  temp_12 <= x_10 + y_19;

  rMSBNextBits_10 <= unsigned(temp_12(29 DOWNTO 0));

  rLSBits_10 <= unsigned(r10_p(28 DOWNTO 0));

  tempSignBit_10 <= temp_12(29);

  qBit_10 <=  NOT tempSignBit_10;

  rNextTemp_10 <= rMSBNextBits_10 & rLSBits_10 & qBit_10;

  r11 <= signed(rNextTemp_10);

  r_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r11_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r11_p <= r11;
      END IF;
    END IF;
  END PROCESS r_reg_10_process;


  rMSBits_11 <= unsigned(r11_p(59 DOWNTO 29));

  x_11 <= signed(rMSBits_11);

  rMSBit_10 <= r11_p(59);

  rMSBitneg_10 <=  NOT rMSBit_10;

  
  switch_compare_1_13 <= '1' WHEN rMSBitneg_10 > '0' ELSE
      '0';

  d_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d11_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d11_p <= d10_p;
      END IF;
    END IF;
  END PROCESS d_reg_10_process;


  d_neg_in0_12 <=  - (resize(d11_p, 32));
  d_neg_25 <= d_neg_in0_12(30 DOWNTO 0);

  
  y_21 <= d11_p WHEN switch_compare_1_13 = '0' ELSE
      d_neg_25;

  temp_13 <= x_11 + y_21;

  rMSBNextBits_11 <= unsigned(temp_13(29 DOWNTO 0));

  rLSBits_11 <= unsigned(r11_p(28 DOWNTO 0));

  tempSignBit_11 <= temp_13(29);

  qBit_11 <=  NOT tempSignBit_11;

  rNextTemp_11 <= rMSBNextBits_11 & rLSBits_11 & qBit_11;

  r12 <= signed(rNextTemp_11);

  r_reg_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r12_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r12_p <= r12;
      END IF;
    END IF;
  END PROCESS r_reg_11_process;


  rMSBits_12 <= unsigned(r12_p(59 DOWNTO 29));

  x_12 <= signed(rMSBits_12);

  rMSBit_11 <= r12_p(59);

  rMSBitneg_11 <=  NOT rMSBit_11;

  
  switch_compare_1_14 <= '1' WHEN rMSBitneg_11 > '0' ELSE
      '0';

  d_reg_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d12_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d12_p <= d11_p;
      END IF;
    END IF;
  END PROCESS d_reg_11_process;


  d_neg_in0_13 <=  - (resize(d12_p, 32));
  d_neg_27 <= d_neg_in0_13(30 DOWNTO 0);

  
  y_23 <= d12_p WHEN switch_compare_1_14 = '0' ELSE
      d_neg_27;

  temp_14 <= x_12 + y_23;

  rMSBNextBits_12 <= unsigned(temp_14(29 DOWNTO 0));

  rLSBits_12 <= unsigned(r12_p(28 DOWNTO 0));

  tempSignBit_12 <= temp_14(29);

  qBit_12 <=  NOT tempSignBit_12;

  rNextTemp_12 <= rMSBNextBits_12 & rLSBits_12 & qBit_12;

  r13 <= signed(rNextTemp_12);

  r_reg_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r13_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r13_p <= r13;
      END IF;
    END IF;
  END PROCESS r_reg_12_process;


  rMSBits_13 <= unsigned(r13_p(59 DOWNTO 29));

  x_13 <= signed(rMSBits_13);

  rMSBit_12 <= r13_p(59);

  rMSBitneg_12 <=  NOT rMSBit_12;

  
  switch_compare_1_15 <= '1' WHEN rMSBitneg_12 > '0' ELSE
      '0';

  d_reg_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d13_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d13_p <= d12_p;
      END IF;
    END IF;
  END PROCESS d_reg_12_process;


  d_neg_in0_14 <=  - (resize(d13_p, 32));
  d_neg_29 <= d_neg_in0_14(30 DOWNTO 0);

  
  y_25 <= d13_p WHEN switch_compare_1_15 = '0' ELSE
      d_neg_29;

  temp_15 <= x_13 + y_25;

  rMSBNextBits_13 <= unsigned(temp_15(29 DOWNTO 0));

  rLSBits_13 <= unsigned(r13_p(28 DOWNTO 0));

  tempSignBit_13 <= temp_15(29);

  qBit_13 <=  NOT tempSignBit_13;

  rNextTemp_13 <= rMSBNextBits_13 & rLSBits_13 & qBit_13;

  r14 <= signed(rNextTemp_13);

  r_reg_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r14_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r14_p <= r14;
      END IF;
    END IF;
  END PROCESS r_reg_13_process;


  rMSBits_14 <= unsigned(r14_p(59 DOWNTO 29));

  x_14 <= signed(rMSBits_14);

  rMSBit_13 <= r14_p(59);

  rMSBitneg_13 <=  NOT rMSBit_13;

  
  switch_compare_1_16 <= '1' WHEN rMSBitneg_13 > '0' ELSE
      '0';

  d_reg_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d14_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d14_p <= d13_p;
      END IF;
    END IF;
  END PROCESS d_reg_13_process;


  d_neg_in0_15 <=  - (resize(d14_p, 32));
  d_neg_31 <= d_neg_in0_15(30 DOWNTO 0);

  
  y_27 <= d14_p WHEN switch_compare_1_16 = '0' ELSE
      d_neg_31;

  temp_16 <= x_14 + y_27;

  rMSBNextBits_14 <= unsigned(temp_16(29 DOWNTO 0));

  rLSBits_14 <= unsigned(r14_p(28 DOWNTO 0));

  tempSignBit_14 <= temp_16(29);

  qBit_14 <=  NOT tempSignBit_14;

  rNextTemp_14 <= rMSBNextBits_14 & rLSBits_14 & qBit_14;

  r15 <= signed(rNextTemp_14);

  r_reg_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r15_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r15_p <= r15;
      END IF;
    END IF;
  END PROCESS r_reg_14_process;


  rMSBits_15 <= unsigned(r15_p(59 DOWNTO 29));

  x_15 <= signed(rMSBits_15);

  rMSBit_14 <= r15_p(59);

  rMSBitneg_14 <=  NOT rMSBit_14;

  
  switch_compare_1_17 <= '1' WHEN rMSBitneg_14 > '0' ELSE
      '0';

  d_reg_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d15_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d15_p <= d14_p;
      END IF;
    END IF;
  END PROCESS d_reg_14_process;


  d_neg_in0_16 <=  - (resize(d15_p, 32));
  d_neg_33 <= d_neg_in0_16(30 DOWNTO 0);

  
  y_29 <= d15_p WHEN switch_compare_1_17 = '0' ELSE
      d_neg_33;

  temp_17 <= x_15 + y_29;

  rMSBNextBits_15 <= unsigned(temp_17(29 DOWNTO 0));

  rLSBits_15 <= unsigned(r15_p(28 DOWNTO 0));

  tempSignBit_15 <= temp_17(29);

  qBit_15 <=  NOT tempSignBit_15;

  rNextTemp_15 <= rMSBNextBits_15 & rLSBits_15 & qBit_15;

  r16 <= signed(rNextTemp_15);

  r_reg_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r16_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r16_p <= r16;
      END IF;
    END IF;
  END PROCESS r_reg_15_process;


  rMSBits_16 <= unsigned(r16_p(59 DOWNTO 29));

  x_16 <= signed(rMSBits_16);

  rMSBit_15 <= r16_p(59);

  rMSBitneg_15 <=  NOT rMSBit_15;

  
  switch_compare_1_18 <= '1' WHEN rMSBitneg_15 > '0' ELSE
      '0';

  d_reg_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d16_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d16_p <= d15_p;
      END IF;
    END IF;
  END PROCESS d_reg_15_process;


  d_neg_in0_17 <=  - (resize(d16_p, 32));
  d_neg_35 <= d_neg_in0_17(30 DOWNTO 0);

  
  y_31 <= d16_p WHEN switch_compare_1_18 = '0' ELSE
      d_neg_35;

  temp_18 <= x_16 + y_31;

  rMSBNextBits_16 <= unsigned(temp_18(29 DOWNTO 0));

  rLSBits_16 <= unsigned(r16_p(28 DOWNTO 0));

  tempSignBit_16 <= temp_18(29);

  qBit_16 <=  NOT tempSignBit_16;

  rNextTemp_16 <= rMSBNextBits_16 & rLSBits_16 & qBit_16;

  r17 <= signed(rNextTemp_16);

  r_reg_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r17_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r17_p <= r17;
      END IF;
    END IF;
  END PROCESS r_reg_16_process;


  rMSBits_17 <= unsigned(r17_p(59 DOWNTO 29));

  x_17 <= signed(rMSBits_17);

  rMSBit_16 <= r17_p(59);

  rMSBitneg_16 <=  NOT rMSBit_16;

  
  switch_compare_1_19 <= '1' WHEN rMSBitneg_16 > '0' ELSE
      '0';

  d_reg_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d17_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d17_p <= d16_p;
      END IF;
    END IF;
  END PROCESS d_reg_16_process;


  d_neg_in0_18 <=  - (resize(d17_p, 32));
  d_neg_37 <= d_neg_in0_18(30 DOWNTO 0);

  
  y_33 <= d17_p WHEN switch_compare_1_19 = '0' ELSE
      d_neg_37;

  temp_19 <= x_17 + y_33;

  rMSBNextBits_17 <= unsigned(temp_19(29 DOWNTO 0));

  rLSBits_17 <= unsigned(r17_p(28 DOWNTO 0));

  tempSignBit_17 <= temp_19(29);

  qBit_17 <=  NOT tempSignBit_17;

  rNextTemp_17 <= rMSBNextBits_17 & rLSBits_17 & qBit_17;

  r18 <= signed(rNextTemp_17);

  r_reg_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r18_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r18_p <= r18;
      END IF;
    END IF;
  END PROCESS r_reg_17_process;


  rMSBits_18 <= unsigned(r18_p(59 DOWNTO 29));

  x_18 <= signed(rMSBits_18);

  rMSBit_17 <= r18_p(59);

  rMSBitneg_17 <=  NOT rMSBit_17;

  
  switch_compare_1_20 <= '1' WHEN rMSBitneg_17 > '0' ELSE
      '0';

  d_reg_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d18_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d18_p <= d17_p;
      END IF;
    END IF;
  END PROCESS d_reg_17_process;


  d_neg_in0_19 <=  - (resize(d18_p, 32));
  d_neg_39 <= d_neg_in0_19(30 DOWNTO 0);

  
  y_35 <= d18_p WHEN switch_compare_1_20 = '0' ELSE
      d_neg_39;

  temp_20 <= x_18 + y_35;

  rMSBNextBits_18 <= unsigned(temp_20(29 DOWNTO 0));

  rLSBits_18 <= unsigned(r18_p(28 DOWNTO 0));

  tempSignBit_18 <= temp_20(29);

  qBit_18 <=  NOT tempSignBit_18;

  rNextTemp_18 <= rMSBNextBits_18 & rLSBits_18 & qBit_18;

  r19 <= signed(rNextTemp_18);

  r_reg_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r19_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r19_p <= r19;
      END IF;
    END IF;
  END PROCESS r_reg_18_process;


  rMSBits_19 <= unsigned(r19_p(59 DOWNTO 29));

  x_19 <= signed(rMSBits_19);

  rMSBit_18 <= r19_p(59);

  rMSBitneg_18 <=  NOT rMSBit_18;

  
  switch_compare_1_21 <= '1' WHEN rMSBitneg_18 > '0' ELSE
      '0';

  d_reg_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d19_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d19_p <= d18_p;
      END IF;
    END IF;
  END PROCESS d_reg_18_process;


  d_neg_in0_20 <=  - (resize(d19_p, 32));
  d_neg_41 <= d_neg_in0_20(30 DOWNTO 0);

  
  y_37 <= d19_p WHEN switch_compare_1_21 = '0' ELSE
      d_neg_41;

  temp_21 <= x_19 + y_37;

  rMSBNextBits_19 <= unsigned(temp_21(29 DOWNTO 0));

  rLSBits_19 <= unsigned(r19_p(28 DOWNTO 0));

  tempSignBit_19 <= temp_21(29);

  qBit_19 <=  NOT tempSignBit_19;

  rNextTemp_19 <= rMSBNextBits_19 & rLSBits_19 & qBit_19;

  r20 <= signed(rNextTemp_19);

  r_reg_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r20_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r20_p <= r20;
      END IF;
    END IF;
  END PROCESS r_reg_19_process;


  rMSBits_20 <= unsigned(r20_p(59 DOWNTO 29));

  x_20 <= signed(rMSBits_20);

  rMSBit_19 <= r20_p(59);

  rMSBitneg_19 <=  NOT rMSBit_19;

  
  switch_compare_1_22 <= '1' WHEN rMSBitneg_19 > '0' ELSE
      '0';

  d_reg_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d20_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d20_p <= d19_p;
      END IF;
    END IF;
  END PROCESS d_reg_19_process;


  d_neg_in0_21 <=  - (resize(d20_p, 32));
  d_neg_43 <= d_neg_in0_21(30 DOWNTO 0);

  
  y_39 <= d20_p WHEN switch_compare_1_22 = '0' ELSE
      d_neg_43;

  temp_22 <= x_20 + y_39;

  rMSBNextBits_20 <= unsigned(temp_22(29 DOWNTO 0));

  rLSBits_20 <= unsigned(r20_p(28 DOWNTO 0));

  tempSignBit_20 <= temp_22(29);

  qBit_20 <=  NOT tempSignBit_20;

  rNextTemp_20 <= rMSBNextBits_20 & rLSBits_20 & qBit_20;

  r21 <= signed(rNextTemp_20);

  r_reg_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r21_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r21_p <= r21;
      END IF;
    END IF;
  END PROCESS r_reg_20_process;


  rMSBits_21 <= unsigned(r21_p(59 DOWNTO 29));

  x_21 <= signed(rMSBits_21);

  rMSBit_20 <= r21_p(59);

  rMSBitneg_20 <=  NOT rMSBit_20;

  
  switch_compare_1_23 <= '1' WHEN rMSBitneg_20 > '0' ELSE
      '0';

  d_reg_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d21_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d21_p <= d20_p;
      END IF;
    END IF;
  END PROCESS d_reg_20_process;


  d_neg_in0_22 <=  - (resize(d21_p, 32));
  d_neg_45 <= d_neg_in0_22(30 DOWNTO 0);

  
  y_41 <= d21_p WHEN switch_compare_1_23 = '0' ELSE
      d_neg_45;

  temp_23 <= x_21 + y_41;

  rMSBNextBits_21 <= unsigned(temp_23(29 DOWNTO 0));

  rLSBits_21 <= unsigned(r21_p(28 DOWNTO 0));

  tempSignBit_21 <= temp_23(29);

  qBit_21 <=  NOT tempSignBit_21;

  rNextTemp_21 <= rMSBNextBits_21 & rLSBits_21 & qBit_21;

  r22 <= signed(rNextTemp_21);

  r_reg_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r22_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r22_p <= r22;
      END IF;
    END IF;
  END PROCESS r_reg_21_process;


  rMSBits_22 <= unsigned(r22_p(59 DOWNTO 29));

  x_22 <= signed(rMSBits_22);

  rMSBit_21 <= r22_p(59);

  rMSBitneg_21 <=  NOT rMSBit_21;

  
  switch_compare_1_24 <= '1' WHEN rMSBitneg_21 > '0' ELSE
      '0';

  d_reg_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d22_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d22_p <= d21_p;
      END IF;
    END IF;
  END PROCESS d_reg_21_process;


  d_neg_in0_23 <=  - (resize(d22_p, 32));
  d_neg_47 <= d_neg_in0_23(30 DOWNTO 0);

  
  y_43 <= d22_p WHEN switch_compare_1_24 = '0' ELSE
      d_neg_47;

  temp_24 <= x_22 + y_43;

  rMSBNextBits_22 <= unsigned(temp_24(29 DOWNTO 0));

  rLSBits_22 <= unsigned(r22_p(28 DOWNTO 0));

  tempSignBit_22 <= temp_24(29);

  qBit_22 <=  NOT tempSignBit_22;

  rNextTemp_22 <= rMSBNextBits_22 & rLSBits_22 & qBit_22;

  r23 <= signed(rNextTemp_22);

  r_reg_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r23_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r23_p <= r23;
      END IF;
    END IF;
  END PROCESS r_reg_22_process;


  rMSBits_23 <= unsigned(r23_p(59 DOWNTO 29));

  x_23 <= signed(rMSBits_23);

  rMSBit_22 <= r23_p(59);

  rMSBitneg_22 <=  NOT rMSBit_22;

  
  switch_compare_1_25 <= '1' WHEN rMSBitneg_22 > '0' ELSE
      '0';

  d_reg_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d23_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d23_p <= d22_p;
      END IF;
    END IF;
  END PROCESS d_reg_22_process;


  d_neg_in0_24 <=  - (resize(d23_p, 32));
  d_neg_49 <= d_neg_in0_24(30 DOWNTO 0);

  
  y_45 <= d23_p WHEN switch_compare_1_25 = '0' ELSE
      d_neg_49;

  temp_25 <= x_23 + y_45;

  rMSBNextBits_23 <= unsigned(temp_25(29 DOWNTO 0));

  rLSBits_23 <= unsigned(r23_p(28 DOWNTO 0));

  tempSignBit_23 <= temp_25(29);

  qBit_23 <=  NOT tempSignBit_23;

  rNextTemp_23 <= rMSBNextBits_23 & rLSBits_23 & qBit_23;

  r24 <= signed(rNextTemp_23);

  r_reg_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r24_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r24_p <= r24;
      END IF;
    END IF;
  END PROCESS r_reg_23_process;


  rMSBits_24 <= unsigned(r24_p(59 DOWNTO 29));

  x_24 <= signed(rMSBits_24);

  rMSBit_23 <= r24_p(59);

  rMSBitneg_23 <=  NOT rMSBit_23;

  
  switch_compare_1_26 <= '1' WHEN rMSBitneg_23 > '0' ELSE
      '0';

  d_reg_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d24_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d24_p <= d23_p;
      END IF;
    END IF;
  END PROCESS d_reg_23_process;


  d_neg_in0_25 <=  - (resize(d24_p, 32));
  d_neg_51 <= d_neg_in0_25(30 DOWNTO 0);

  
  y_47 <= d24_p WHEN switch_compare_1_26 = '0' ELSE
      d_neg_51;

  temp_26 <= x_24 + y_47;

  rMSBNextBits_24 <= unsigned(temp_26(29 DOWNTO 0));

  rLSBits_24 <= unsigned(r24_p(28 DOWNTO 0));

  tempSignBit_24 <= temp_26(29);

  qBit_24 <=  NOT tempSignBit_24;

  rNextTemp_24 <= rMSBNextBits_24 & rLSBits_24 & qBit_24;

  r25 <= signed(rNextTemp_24);

  r_reg_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r25_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r25_p <= r25;
      END IF;
    END IF;
  END PROCESS r_reg_24_process;


  rMSBits_25 <= unsigned(r25_p(59 DOWNTO 29));

  x_25 <= signed(rMSBits_25);

  rMSBit_24 <= r25_p(59);

  rMSBitneg_24 <=  NOT rMSBit_24;

  
  switch_compare_1_27 <= '1' WHEN rMSBitneg_24 > '0' ELSE
      '0';

  d_reg_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d25_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d25_p <= d24_p;
      END IF;
    END IF;
  END PROCESS d_reg_24_process;


  d_neg_in0_26 <=  - (resize(d25_p, 32));
  d_neg_53 <= d_neg_in0_26(30 DOWNTO 0);

  
  y_49 <= d25_p WHEN switch_compare_1_27 = '0' ELSE
      d_neg_53;

  temp_27 <= x_25 + y_49;

  rMSBNextBits_25 <= unsigned(temp_27(29 DOWNTO 0));

  rLSBits_25 <= unsigned(r25_p(28 DOWNTO 0));

  tempSignBit_25 <= temp_27(29);

  qBit_25 <=  NOT tempSignBit_25;

  rNextTemp_25 <= rMSBNextBits_25 & rLSBits_25 & qBit_25;

  r26 <= signed(rNextTemp_25);

  r_reg_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r26_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r26_p <= r26;
      END IF;
    END IF;
  END PROCESS r_reg_25_process;


  rMSBits_26 <= unsigned(r26_p(59 DOWNTO 29));

  x_26 <= signed(rMSBits_26);

  rMSBit_25 <= r26_p(59);

  rMSBitneg_25 <=  NOT rMSBit_25;

  
  switch_compare_1_28 <= '1' WHEN rMSBitneg_25 > '0' ELSE
      '0';

  d_reg_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d26_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d26_p <= d25_p;
      END IF;
    END IF;
  END PROCESS d_reg_25_process;


  d_neg_in0_27 <=  - (resize(d26_p, 32));
  d_neg_55 <= d_neg_in0_27(30 DOWNTO 0);

  
  y_51 <= d26_p WHEN switch_compare_1_28 = '0' ELSE
      d_neg_55;

  temp_28 <= x_26 + y_51;

  rMSBNextBits_26 <= unsigned(temp_28(29 DOWNTO 0));

  rLSBits_26 <= unsigned(r26_p(28 DOWNTO 0));

  tempSignBit_26 <= temp_28(29);

  qBit_26 <=  NOT tempSignBit_26;

  rNextTemp_26 <= rMSBNextBits_26 & rLSBits_26 & qBit_26;

  r27 <= signed(rNextTemp_26);

  r_reg_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r27_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r27_p <= r27;
      END IF;
    END IF;
  END PROCESS r_reg_26_process;


  rMSBits_27 <= unsigned(r27_p(59 DOWNTO 29));

  x_27 <= signed(rMSBits_27);

  rMSBit_26 <= r27_p(59);

  rMSBitneg_26 <=  NOT rMSBit_26;

  
  switch_compare_1_29 <= '1' WHEN rMSBitneg_26 > '0' ELSE
      '0';

  d_reg_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d27_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d27_p <= d26_p;
      END IF;
    END IF;
  END PROCESS d_reg_26_process;


  d_neg_in0_28 <=  - (resize(d27_p, 32));
  d_neg_57 <= d_neg_in0_28(30 DOWNTO 0);

  
  y_53 <= d27_p WHEN switch_compare_1_29 = '0' ELSE
      d_neg_57;

  temp_29 <= x_27 + y_53;

  rMSBNextBits_27 <= unsigned(temp_29(29 DOWNTO 0));

  rLSBits_27 <= unsigned(r27_p(28 DOWNTO 0));

  tempSignBit_27 <= temp_29(29);

  qBit_27 <=  NOT tempSignBit_27;

  rNextTemp_27 <= rMSBNextBits_27 & rLSBits_27 & qBit_27;

  r28 <= signed(rNextTemp_27);

  r_reg_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r28_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r28_p <= r28;
      END IF;
    END IF;
  END PROCESS r_reg_27_process;


  rMSBits_28 <= unsigned(r28_p(59 DOWNTO 29));

  x_28 <= signed(rMSBits_28);

  rMSBit_27 <= r28_p(59);

  rMSBitneg_27 <=  NOT rMSBit_27;

  
  switch_compare_1_30 <= '1' WHEN rMSBitneg_27 > '0' ELSE
      '0';

  d_reg_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d28_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d28_p <= d27_p;
      END IF;
    END IF;
  END PROCESS d_reg_27_process;


  d_neg_in0_29 <=  - (resize(d28_p, 32));
  d_neg_59 <= d_neg_in0_29(30 DOWNTO 0);

  
  y_55 <= d28_p WHEN switch_compare_1_30 = '0' ELSE
      d_neg_59;

  temp_30 <= x_28 + y_55;

  rMSBNextBits_28 <= unsigned(temp_30(29 DOWNTO 0));

  rLSBits_28 <= unsigned(r28_p(28 DOWNTO 0));

  tempSignBit_28 <= temp_30(29);

  qBit_28 <=  NOT tempSignBit_28;

  rNextTemp_28 <= rMSBNextBits_28 & rLSBits_28 & qBit_28;

  r29 <= signed(rNextTemp_28);

  r_reg_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r29_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r29_p <= r29;
      END IF;
    END IF;
  END PROCESS r_reg_28_process;


  rMSBits_29 <= unsigned(r29_p(59 DOWNTO 29));

  x_29 <= signed(rMSBits_29);

  rMSBit_28 <= r29_p(59);

  rMSBitneg_28 <=  NOT rMSBit_28;

  
  switch_compare_1_31 <= '1' WHEN rMSBitneg_28 > '0' ELSE
      '0';

  d_reg_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d29_p <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d29_p <= d28_p;
      END IF;
    END IF;
  END PROCESS d_reg_28_process;


  d_neg_in0_30 <=  - (resize(d29_p, 32));
  d_neg_61 <= d_neg_in0_30(30 DOWNTO 0);

  
  y_57 <= d29_p WHEN switch_compare_1_31 = '0' ELSE
      d_neg_61;

  temp_31 <= x_29 + y_57;

  rMSBNextBits_29 <= unsigned(temp_31(29 DOWNTO 0));

  rLSBits_29 <= unsigned(r29_p(28 DOWNTO 0));

  tempSignBit_29 <= temp_31(29);

  qBit_29 <=  NOT tempSignBit_29;

  rNextTemp_29 <= rMSBNextBits_29 & rLSBits_29 & qBit_29;

  r30 <= signed(rNextTemp_29);

  r_reg_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r30_p <= to_signed(0, 60);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r30_p <= r30;
      END IF;
    END IF;
  END PROCESS r_reg_29_process;


  qTemp <= unsigned(r30_p(29 DOWNTO 0));

  qtempExt <= signed(resize(qTemp, 31));

  qtempExt_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qtempExt_p_1 <= to_signed(16#00000000#, 31);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        qtempExt_p_1 <= qtempExt;
      END IF;
    END IF;
  END PROCESS qtempExt_p_process;


  qin_neg_post_in0 <=  - (resize(qtempExt_p_1, 32));
  qin_neg_post_1 <= qin_neg_post_in0(30 DOWNTO 0);

  
  qtemp_post <= qtempExt_p_1 WHEN switch_compare_1 = '0' ELSE
      qin_neg_post_1;

  sel1 <= qtemp_post(30);

  sel0 <= qtemp_post(29);

  sel <= unsigned'(sel1 & sel0);

  ConstantSignalMax_1 <= to_signed(16#3FFFFFFF#, 31);

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_1 <= (OTHERS => to_signed(16#00000000#, 31));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_1(0) <= ConstantSignalMax_1;
        delayMatch_reg_1(1 TO 32) <= delayMatch_reg_1(0 TO 31);
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;

  ConstantSignalMax_2 <= delayMatch_reg_1(32);

  ConstantSignalMin_1 <= to_signed(-16#40000000#, 31);

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_2 <= (OTHERS => to_signed(16#00000000#, 31));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_2(0) <= ConstantSignalMin_1;
        delayMatch_reg_2(1 TO 32) <= delayMatch_reg_2(0 TO 31);
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;

  ConstantSignalMin_2 <= delayMatch_reg_2(32);

  post_q_Multiport_Switch_output : PROCESS (ConstantSignalMax_2, ConstantSignalMin_2, qtemp_post, sel)
  BEGIN
    CASE sel IS
      WHEN "00" =>
        qtempPost <= qtemp_post;
      WHEN "01" =>
        qtempPost <= ConstantSignalMax_2;
      WHEN "10" =>
        qtempPost <= ConstantSignalMin_2;
      WHEN OTHERS => 
        qtempPost <= qtemp_post;
    END CASE;
  END PROCESS post_q_Multiport_Switch_output;


  
  qtempPost_1 <= ConstantSignal_2 WHEN initFlagenable = '0' ELSE
      qtempPost;

  qtempPost_2 <= qtempPost_1;

  
  qoutDTC <= X"7FFF" WHEN (qtempPost_2(30) = '0') AND (qtempPost_2(29 DOWNTO 15) /= "000000000000000") ELSE
      X"8000" WHEN (qtempPost_2(30) = '1') AND (qtempPost_2(29 DOWNTO 15) /= "111111111111111") ELSE
      qtempPost_2(15 DOWNTO 0);

  q_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      quotient_tmp <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        quotient_tmp <= qoutDTC;
      END IF;
    END IF;
  END PROCESS q_process;


  quotient <= std_logic_vector(quotient_tmp);

END rtl;

