-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\MaxCtrl.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: MaxCtrl
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Track/MaxCorrelation/MaxCtrl
-- Hierarchy Level: 3
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY MaxCtrl IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        pixelIn                           :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En16
        reset_1                           :   IN    std_logic;
        newMaxCtrl                        :   OUT   std_logic;
        sameMaxCtrl                       :   OUT   std_logic
        );
END MaxCtrl;


ARCHITECTURE rtl OF MaxCtrl IS

  -- Signals
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL Delay8_out1                      : std_logic;
  SIGNAL Constant3_out1                   : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL pixelIn_signed                   : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Switch7_out1                     : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Delay_out1                       : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Switch8_out1                     : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Max_stage1_val                   : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL Delay4_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay4_out1                      : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL Relational_Operator1_out1        : std_logic;
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL AND2_out1                        : std_logic;
  SIGNAL Delay5_reg                       : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay5_out1                      : std_logic;
  SIGNAL AND1_out1                        : std_logic;

BEGIN
  NOT_out1 <=  NOT reset_1;

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_out1 <= NOT_out1;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  Constant3_out1 <= to_signed(16#000000#, 24);

  pixelIn_signed <= signed(pixelIn);

  
  Switch7_out1 <= Constant3_out1 WHEN Delay8_out1 = '0' ELSE
      pixelIn_signed;

  
  Switch8_out1 <= Constant3_out1 WHEN Delay8_out1 = '0' ELSE
      Delay_out1;

  ---- Tree max implementation ----
  
  Max_stage1_val <= Switch7_out1 WHEN Switch7_out1 >= Switch8_out1 ELSE
      Switch8_out1;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Max_stage1_val;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Relational_Operator_out1 <= '1' WHEN Delay_out1 /= Max_stage1_val ELSE
      '0';

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg(0) <= Relational_Operator_out1;
        Delay4_reg(1) <= Delay4_reg(0);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(1);

  AND_out1 <=  NOT Delay4_out1;

  
  Relational_Operator1_out1 <= '1' WHEN pixelIn_signed = Max_stage1_val ELSE
      '0';

  
  Compare_To_Zero_out1 <= '1' WHEN Max_stage1_val /= to_signed(16#000000#, 24) ELSE
      '0';

  AND2_out1 <= Relational_Operator1_out1 AND Compare_To_Zero_out1;

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg(0) <= AND2_out1;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  AND1_out1 <= AND_out1 AND Delay5_out1;

  newMaxCtrl <= Delay4_out1;

  sameMaxCtrl <= AND1_out1;

END rtl;

