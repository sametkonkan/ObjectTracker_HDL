-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\HV_Counter.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: HV_Counter
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Track/MaxCorrelation/HV Counter
-- Hierarchy Level: 3
-- Model version: 3.7
-- 
-- HV Counter
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY HV_Counter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        in0_hStart                        :   IN    std_logic;
        in0_hEnd                          :   IN    std_logic;
        in0_vStart                        :   IN    std_logic;
        in0_vEnd                          :   IN    std_logic;
        in0_valid                         :   IN    std_logic;
        out0                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        out1                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END HV_Counter;


ARCHITECTURE rtl OF HV_Counter IS

  -- Signals
  SIGNAL ValidInReg                       : std_logic;  -- ufix1
  SIGNAL muxCtrl                          : std_logic;  -- ufix1
  SIGNAL hZero                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL VEndInReg                        : std_logic;  -- ufix1
  SIGNAL hvvEndInv                        : std_logic;  -- ufix1
  SIGNAL VStartInReg                      : std_logic;  -- ufix1
  SIGNAL hvinFrame2Term                   : std_logic;  -- ufix1
  SIGNAL hvValidInv                       : std_logic;  -- ufix1
  SIGNAL hvinFrame                        : std_logic;  -- ufix1
  SIGNAL hvinFrame3Term                   : std_logic;  -- ufix1
  SIGNAL hvinFrameNext                    : std_logic;  -- ufix1
  SIGNAL hvinFrame1Term                   : std_logic;  -- ufix1
  SIGNAL HStartInReg                      : std_logic;  -- ufix1
  SIGNAL hvnewLine                        : std_logic;  -- ufix1
  SIGNAL HCountFrame                      : std_logic;  -- ufix1
  SIGNAL HEndInReg                        : std_logic;  -- ufix1
  SIGNAL hvhEndInv                        : std_logic;  -- ufix1
  SIGNAL hvinLine2Term                    : std_logic;  -- ufix1
  SIGNAL hvinFrameInv                     : std_logic;  -- ufix1
  SIGNAL hvinLine                         : std_logic;  -- ufix1
  SIGNAL hvinLineInv                      : std_logic;  -- ufix1
  SIGNAL hvinLine6Term                    : std_logic;  -- ufix1
  SIGNAL hvinLine5Term                    : std_logic;  -- ufix1
  SIGNAL hvinLine4Term                    : std_logic;  -- ufix1
  SIGNAL hvinLine3Term                    : std_logic;  -- ufix1
  SIGNAL hvinLineNext                     : std_logic;  -- ufix1
  SIGNAL hvinLine1Term                    : std_logic;  -- ufix1
  SIGNAL HCountLine                       : std_logic;  -- ufix1
  SIGNAL hCountCounter                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL HCountNotMax                     : std_logic;  -- ufix1
  SIGNAL HCountEn                         : std_logic;  -- ufix1
  SIGNAL hCount                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL vZero                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL hvnewFrame                       : std_logic;  -- ufix1
  SIGNAL notVEndOutReg                    : std_logic;  -- ufix1
  SIGNAL vCountCounter                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL VCountNotMax                     : std_logic;  -- ufix1
  SIGNAL VCountPre                        : std_logic;  -- ufix1
  SIGNAL VCountEn                         : std_logic;  -- ufix1
  SIGNAL vCount                           : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  valIReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ValidInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ValidInReg <= in0_valid;
      END IF;
    END IF;
  END PROCESS valIReg_process;


  muxReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      muxCtrl <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        muxCtrl <= ValidInReg;
      END IF;
    END IF;
  END PROCESS muxReg_process;


  hZero <= to_unsigned(16#00#, 8);

  vEIReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      VEndInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        VEndInReg <= in0_vEnd;
      END IF;
    END IF;
  END PROCESS vEIReg_process;


  hvvEndInv <=  NOT VEndInReg;

  vSIReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      VStartInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        VStartInReg <= in0_vStart;
      END IF;
    END IF;
  END PROCESS vSIReg_process;


  hvinFrame2Term <= ValidInReg AND VStartInReg;

  hvValidInv <=  NOT ValidInReg;

  hvinFrame3Term <= hvValidInv AND hvinFrame;

  inFReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hvinFrame <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        hvinFrame <= hvinFrameNext;
      END IF;
    END IF;
  END PROCESS inFReg_process;


  hvinFrame1Term <= hvvEndInv AND hvinFrame;

  hvinFrameNext <= hvinFrame3Term OR (hvinFrame1Term OR hvinFrame2Term);

  hSIReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HStartInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HStartInReg <= in0_hStart;
      END IF;
    END IF;
  END PROCESS hSIReg_process;


  hvnewLine <= HStartInReg AND (hvinFrameNext AND ValidInReg);

  HCountFrame <= hvinFrameNext OR hvinFrame;

  hEIReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HEndInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HEndInReg <= in0_hEnd;
      END IF;
    END IF;
  END PROCESS hEIReg_process;


  hvhEndInv <=  NOT HEndInReg;

  hvinLine2Term <= VStartInReg AND (ValidInReg AND HStartInReg);

  hvinFrameInv <=  NOT hvinFrame;

  hvinLineInv <=  NOT hvinLine;

  hvinLine6Term <= hvinLineInv AND (hvinFrame AND (hvvEndInv AND (ValidInReg AND HStartInReg)));

  hvinLine5Term <= hvValidInv AND hvinLine;

  hvinLine4Term <= hvinFrameInv AND hvinLine;

  hvinLine3Term <= VStartInReg AND hvinLine;

  inLReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hvinLine <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        hvinLine <= hvinLineNext;
      END IF;
    END IF;
  END PROCESS inLReg_process;


  hvinLine1Term <= hvhEndInv AND hvinLine;

  hvinLineNext <= hvinLine6Term OR (hvinLine5Term OR (hvinLine4Term OR (hvinLine3Term OR (hvinLine1Term OR hvinLine2Term))));

  HCountLine <= hvinLineNext OR hvinLine;

  
  HCountNotMax <= '1' WHEN hCountCounter /= to_unsigned(16#FF#, 8) ELSE
      '0';

  HCountEn <= HCountNotMax AND (HCountLine AND (ValidInReg AND HCountFrame));

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 255
  horizcounter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hCountCounter <= to_unsigned(16#01#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF hvnewLine = '1' THEN 
          hCountCounter <= to_unsigned(16#01#, 8);
        ELSIF HCountEn = '1' THEN 
          IF hCountCounter = to_unsigned(16#FF#, 8) THEN 
            hCountCounter <= to_unsigned(16#01#, 8);
          ELSE 
            hCountCounter <= hCountCounter + to_unsigned(16#01#, 8);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS horizcounter_process;


  
  hCount <= hZero WHEN muxCtrl = '0' ELSE
      hCountCounter;

  out0 <= std_logic_vector(hCount);

  vZero <= to_unsigned(16#00#, 8);

  hvnewFrame <= VStartInReg AND (hvinFrameNext AND ValidInReg);

  notVEndOutReg <=  NOT VEndInReg;

  
  VCountNotMax <= '1' WHEN vCountCounter /= to_unsigned(16#FF#, 8) ELSE
      '0';

  VCountPre <= ValidInReg AND (VCountNotMax AND (HCountLine AND (HEndInReg AND notVEndOutReg)));

  vCountEnReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      VCountEn <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        VCountEn <= VCountPre;
      END IF;
    END IF;
  END PROCESS vCountEnReg_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 255
  vertcounter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vCountCounter <= to_unsigned(16#01#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF hvnewFrame = '1' THEN 
          vCountCounter <= to_unsigned(16#01#, 8);
        ELSIF VCountEn = '1' THEN 
          IF vCountCounter = to_unsigned(16#FF#, 8) THEN 
            vCountCounter <= to_unsigned(16#01#, 8);
          ELSE 
            vCountCounter <= vCountCounter + to_unsigned(16#01#, 8);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS vertcounter_process;


  
  vCount <= vZero WHEN muxCtrl = '0' ELSE
      vCountCounter;

  out1 <= std_logic_vector(vCount);

END rtl;

