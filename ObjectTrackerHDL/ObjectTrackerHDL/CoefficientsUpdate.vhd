-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\CoefficientsUpdate.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CoefficientsUpdate
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Track/2-DCorrelation/CoefficientsUpdate/CoefficientsUpdate
-- Hierarchy Level: 4
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ObjectTrackerHDL_pkg.ALL;

ENTITY CoefficientsUpdate IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        pixelIn_re                        :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        pixelIn_im                        :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        GIn                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En11
        AiIn_re                           :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28_En8
        AiIn_im                           :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28_En8
        BiIn                              :   IN    std_logic_vector(35 DOWNTO 0);  -- sfix36_En8
        HiOut                             :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        AiOut                             :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        BiOut                             :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
        );
END CoefficientsUpdate;


ARCHITECTURE rtl OF CoefficientsUpdate IS

  -- Component Declarations
  COMPONENT ComplexDivide
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Dividend_re                     :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28_En8
          Dividend_im                     :   IN    std_logic_vector(27 DOWNTO 0);  -- sfix28_En8
          Divisor                         :   IN    std_logic_vector(35 DOWNTO 0);  -- sfix36_En8
          Quotient_re                     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          Quotient_im                     :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ComplexDivide
    USE ENTITY work.ComplexDivide(rtl);

  -- Signals
  SIGNAL pixelIn_re_signed                : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL pixelIn_im_signed                : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL conj_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL conj_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL Conjugate1_out1_re               : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Conjugate1_out1_im               : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay17_out1_re                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay17_out1_im                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL GIn_signed                       : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Delay7_out1                      : signed(15 DOWNTO 0);  -- sfix16_En11
  SIGNAL Product9_mul_temp                : signed(39 DOWNTO 0);  -- sfix40_En23
  SIGNAL Product9_mul_temp_1              : signed(39 DOWNTO 0);  -- sfix40_En23
  SIGNAL Product9_out1_re                 : signed(23 DOWNTO 0);  -- sfix24_En8
  SIGNAL Product9_out1_im                 : signed(23 DOWNTO 0);  -- sfix24_En8
  SIGNAL Delay3_out1_re                   : signed(23 DOWNTO 0);  -- sfix24_En8
  SIGNAL Delay3_out1_im                   : signed(23 DOWNTO 0);  -- sfix24_En8
  SIGNAL eta_out1                         : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Product10_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product10_mul_temp               : signed(40 DOWNTO 0);  -- sfix41_En24
  SIGNAL Product10_cast_1                 : signed(39 DOWNTO 0);  -- sfix40_En24
  SIGNAL Product10_cast_2                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product10_mul_temp_1             : signed(40 DOWNTO 0);  -- sfix41_En24
  SIGNAL Product10_cast_3                 : signed(39 DOWNTO 0);  -- sfix40_En24
  SIGNAL Product10_out1_re                : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Product10_out1_im                : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay11_out1_re                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay11_out1_im                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL AiIn_re_signed                   : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL AiIn_im_signed                   : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Delay8_out1_re                   : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Delay8_out1_im                   : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL alpha1_eta_out1                  : unsigned(15 DOWNTO 0);  -- ufix16_En16
  SIGNAL Product11_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product11_mul_temp               : signed(44 DOWNTO 0);  -- sfix45_En24
  SIGNAL Product11_cast_1                 : signed(43 DOWNTO 0);  -- sfix44_En24
  SIGNAL Product11_cast_2                 : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product11_mul_temp_1             : signed(44 DOWNTO 0);  -- sfix45_En24
  SIGNAL Product11_cast_3                 : signed(43 DOWNTO 0);  -- sfix44_En24
  SIGNAL Product11_out1_re                : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Product11_out1_im                : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Delay2_reg_re                    : vector_of_signed28(0 TO 1);  -- sfix28_En8 [2]
  SIGNAL Delay2_reg_im                    : vector_of_signed28(0 TO 1);  -- sfix28_En8 [2]
  SIGNAL Delay2_out1_re                   : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Delay2_out1_im                   : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Add6_add_cast                    : signed(32 DOWNTO 0);  -- sfix33_En12
  SIGNAL Add6_add_cast_1                  : signed(32 DOWNTO 0);  -- sfix33_En12
  SIGNAL Add6_add_temp                    : signed(32 DOWNTO 0);  -- sfix33_En12
  SIGNAL Add6_add_cast_2                  : signed(32 DOWNTO 0);  -- sfix33_En12
  SIGNAL Add6_add_cast_3                  : signed(32 DOWNTO 0);  -- sfix33_En12
  SIGNAL Add6_add_temp_1                  : signed(32 DOWNTO 0);  -- sfix33_En12
  SIGNAL Add6_out1_re                     : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Add6_out1_im                     : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Delay20_out1_re                  : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Delay20_out1_im                  : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Delay16_out1_re                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay16_out1_im                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Product6_mul_temp                : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL Product6_sub_cast                : signed(31 DOWNTO 0);  -- sfix32_En8
  SIGNAL Product6_mul_temp_1              : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL Product6_sub_cast_1              : signed(31 DOWNTO 0);  -- sfix32_En8
  SIGNAL Product6_mul_temp_2              : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL Product6_add_cast                : signed(31 DOWNTO 0);  -- sfix32_En8
  SIGNAL Product6_mul_temp_3              : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL Product6_add_cast_1              : signed(31 DOWNTO 0);  -- sfix32_En8
  SIGNAL Product6_out1_re                 : signed(31 DOWNTO 0);  -- sfix32_En8
  SIGNAL Product6_out1_im                 : signed(31 DOWNTO 0);  -- sfix32_En8
  SIGNAL Delay9_out1_re                   : signed(31 DOWNTO 0);  -- sfix32_En8
  SIGNAL Delay9_out1_im                   : signed(31 DOWNTO 0);  -- sfix32_En8
  SIGNAL Product13_cast                   : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product13_mul_temp               : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL Product13_cast_1                 : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL Product13_out1                   : signed(31 DOWNTO 0);  -- sfix32_En12
  SIGNAL Delay10_out1                     : signed(31 DOWNTO 0);  -- sfix32_En12
  SIGNAL BiIn_signed                      : signed(35 DOWNTO 0);  -- sfix36_En8
  SIGNAL Delay12_out1                     : signed(35 DOWNTO 0);  -- sfix36_En8
  SIGNAL Product5_cast                    : signed(16 DOWNTO 0);  -- sfix17_En16
  SIGNAL Product5_mul_temp                : signed(52 DOWNTO 0);  -- sfix53_En24
  SIGNAL Product5_cast_1                  : signed(51 DOWNTO 0);  -- sfix52_En24
  SIGNAL Product5_out1                    : signed(35 DOWNTO 0);  -- sfix36_En8
  SIGNAL Delay1_reg                       : vector_of_signed36(0 TO 1);  -- sfix36 [2]
  SIGNAL Delay1_out1                      : signed(35 DOWNTO 0);  -- sfix36_En8
  SIGNAL Add7_add_cast                    : signed(40 DOWNTO 0);  -- sfix41_En12
  SIGNAL Add7_add_cast_1                  : signed(40 DOWNTO 0);  -- sfix41_En12
  SIGNAL Add7_add_temp                    : signed(40 DOWNTO 0);  -- sfix41_En12
  SIGNAL Add7_out1                        : signed(35 DOWNTO 0);  -- sfix36_En8
  SIGNAL Delay19_out1                     : signed(35 DOWNTO 0);  -- sfix36_En8
  SIGNAL ComplexDivide_out1_re            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL ComplexDivide_out1_im            : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL ComplexDivide_out1_re_signed     : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL ComplexDivide_out1_im_signed     : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay6_out1_re                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay6_out1_im                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Data_Type_Conversion13_out1_re   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion13_out1_im   : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Concat2_out1                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay4_reg_re                    : vector_of_signed28(0 TO 53);  -- sfix28_En8 [54]
  SIGNAL Delay4_reg_im                    : vector_of_signed28(0 TO 53);  -- sfix28_En8 [54]
  SIGNAL Delay4_out1_re                   : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Delay4_out1_im                   : signed(27 DOWNTO 0);  -- sfix28_En8
  SIGNAL Data_Type_Conversion9_out1_re    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Data_Type_Conversion9_out1_im    : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Concat1_out1                 : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL Delay5_reg                       : vector_of_signed36(0 TO 53);  -- sfix36 [54]
  SIGNAL Delay5_out1                      : signed(35 DOWNTO 0);  -- sfix36_En8
  SIGNAL Data_Type_Conversion11_out1      : unsigned(63 DOWNTO 0);  -- ufix64

BEGIN
  u_ComplexDivide : ComplexDivide
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Dividend_re => std_logic_vector(Delay20_out1_re),  -- sfix28_En8
              Dividend_im => std_logic_vector(Delay20_out1_im),  -- sfix28_En8
              Divisor => std_logic_vector(Delay19_out1),  -- sfix36_En8
              Quotient_re => ComplexDivide_out1_re,  -- sfix24_En12
              Quotient_im => ComplexDivide_out1_im  -- sfix24_En12
              );

  pixelIn_re_signed <= signed(pixelIn_re);

  pixelIn_im_signed <= signed(pixelIn_im);

  Conjugate1_out1_re <= pixelIn_re_signed;
  conj_cast <= resize(pixelIn_im_signed, 25);
  conj_cast_1 <=  - (conj_cast);
  
  Conjugate1_out1_im <= X"7FFFFF" WHEN (conj_cast_1(24) = '0') AND (conj_cast_1(23) /= '0') ELSE
      X"800000" WHEN (conj_cast_1(24) = '1') AND (conj_cast_1(23) /= '1') ELSE
      conj_cast_1(23 DOWNTO 0);

  Delay17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay17_out1_re <= to_signed(16#000000#, 24);
      Delay17_out1_im <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay17_out1_re <= Conjugate1_out1_re;
        Delay17_out1_im <= Conjugate1_out1_im;
      END IF;
    END IF;
  END PROCESS Delay17_process;


  GIn_signed <= signed(GIn);

  Delay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay7_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay7_out1 <= GIn_signed;
      END IF;
    END IF;
  END PROCESS Delay7_process;


  Product9_mul_temp <= Delay17_out1_re * Delay7_out1;
  Product9_out1_re <= Product9_mul_temp(38 DOWNTO 15);
  Product9_mul_temp_1 <= Delay17_out1_im * Delay7_out1;
  Product9_out1_im <= Product9_mul_temp_1(38 DOWNTO 15);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_re <= to_signed(16#000000#, 24);
      Delay3_out1_im <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1_re <= Product9_out1_re;
        Delay3_out1_im <= Product9_out1_im;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  eta_out1 <= to_unsigned(16#1333#, 16);

  Product10_cast <= signed(resize(eta_out1, 17));
  Product10_mul_temp <= Delay3_out1_re * Product10_cast;
  Product10_cast_1 <= Product10_mul_temp(39 DOWNTO 0);
  Product10_out1_re <= Product10_cast_1(35 DOWNTO 12);
  Product10_cast_2 <= signed(resize(eta_out1, 17));
  Product10_mul_temp_1 <= Delay3_out1_im * Product10_cast_2;
  Product10_cast_3 <= Product10_mul_temp_1(39 DOWNTO 0);
  Product10_out1_im <= Product10_cast_3(35 DOWNTO 12);

  Delay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1_re <= to_signed(16#000000#, 24);
      Delay11_out1_im <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1_re <= Product10_out1_re;
        Delay11_out1_im <= Product10_out1_im;
      END IF;
    END IF;
  END PROCESS Delay11_process;


  AiIn_re_signed <= signed(AiIn_re);

  AiIn_im_signed <= signed(AiIn_im);

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1_re <= to_signed(16#0000000#, 28);
      Delay8_out1_im <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_out1_re <= AiIn_re_signed;
        Delay8_out1_im <= AiIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  alpha1_eta_out1 <= to_unsigned(16#ECCD#, 16);

  Product11_cast <= signed(resize(alpha1_eta_out1, 17));
  Product11_mul_temp <= Delay8_out1_re * Product11_cast;
  Product11_cast_1 <= Product11_mul_temp(43 DOWNTO 0);
  Product11_out1_re <= Product11_cast_1(43 DOWNTO 16);
  Product11_cast_2 <= signed(resize(alpha1_eta_out1, 17));
  Product11_mul_temp_1 <= Delay8_out1_im * Product11_cast_2;
  Product11_cast_3 <= Product11_mul_temp_1(43 DOWNTO 0);
  Product11_out1_im <= Product11_cast_3(43 DOWNTO 16);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg_re <= (OTHERS => to_signed(16#0000000#, 28));
      Delay2_reg_im <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_reg_im(0) <= Product11_out1_im;
        Delay2_reg_im(1) <= Delay2_reg_im(0);
        Delay2_reg_re(0) <= Product11_out1_re;
        Delay2_reg_re(1) <= Delay2_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1_re <= Delay2_reg_re(1);
  Delay2_out1_im <= Delay2_reg_im(1);

  Add6_add_cast <= resize(Delay11_out1_re, 33);
  Add6_add_cast_1 <= resize(Delay2_out1_re & '0' & '0' & '0' & '0', 33);
  Add6_add_temp <= Add6_add_cast + Add6_add_cast_1;
  Add6_out1_re <= Add6_add_temp(31 DOWNTO 4);
  Add6_add_cast_2 <= resize(Delay11_out1_im, 33);
  Add6_add_cast_3 <= resize(Delay2_out1_im & '0' & '0' & '0' & '0', 33);
  Add6_add_temp_1 <= Add6_add_cast_2 + Add6_add_cast_3;
  Add6_out1_im <= Add6_add_temp_1(31 DOWNTO 4);

  Delay20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay20_out1_re <= to_signed(16#0000000#, 28);
      Delay20_out1_im <= to_signed(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay20_out1_re <= Add6_out1_re;
        Delay20_out1_im <= Add6_out1_im;
      END IF;
    END IF;
  END PROCESS Delay20_process;


  Delay16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay16_out1_re <= to_signed(16#000000#, 24);
      Delay16_out1_im <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay16_out1_re <= pixelIn_re_signed;
        Delay16_out1_im <= pixelIn_im_signed;
      END IF;
    END IF;
  END PROCESS Delay16_process;


  Product6_mul_temp <= Delay16_out1_re * Delay17_out1_re;
  Product6_sub_cast <= Product6_mul_temp(47 DOWNTO 16);
  Product6_mul_temp_1 <= Delay16_out1_im * Delay17_out1_im;
  Product6_sub_cast_1 <= Product6_mul_temp_1(47 DOWNTO 16);
  Product6_out1_re <= Product6_sub_cast - Product6_sub_cast_1;
  Product6_mul_temp_2 <= Delay16_out1_im * Delay17_out1_re;
  Product6_add_cast <= Product6_mul_temp_2(47 DOWNTO 16);
  Product6_mul_temp_3 <= Delay16_out1_re * Delay17_out1_im;
  Product6_add_cast_1 <= Product6_mul_temp_3(47 DOWNTO 16);
  Product6_out1_im <= Product6_add_cast + Product6_add_cast_1;

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_out1_re <= to_signed(0, 32);
      Delay9_out1_im <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_out1_re <= Product6_out1_re;
        Delay9_out1_im <= Product6_out1_im;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  Product13_cast <= signed(resize(eta_out1, 17));
  Product13_mul_temp <= Delay9_out1_re * Product13_cast;
  Product13_cast_1 <= Product13_mul_temp(47 DOWNTO 0);
  Product13_out1 <= Product13_cast_1(43 DOWNTO 12);

  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_out1 <= to_signed(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_out1 <= Product13_out1;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  BiIn_signed <= signed(BiIn);

  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_out1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_out1 <= BiIn_signed;
      END IF;
    END IF;
  END PROCESS Delay12_process;


  Product5_cast <= signed(resize(alpha1_eta_out1, 17));
  Product5_mul_temp <= Product5_cast * Delay12_out1;
  Product5_cast_1 <= Product5_mul_temp(51 DOWNTO 0);
  Product5_out1 <= Product5_cast_1(51 DOWNTO 16);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_reg(0) <= Product5_out1;
        Delay1_reg(1) <= Delay1_reg(0);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(1);

  Add7_add_cast <= resize(Delay10_out1, 41);
  Add7_add_cast_1 <= resize(Delay1_out1 & '0' & '0' & '0' & '0', 41);
  Add7_add_temp <= Add7_add_cast + Add7_add_cast_1;
  Add7_out1 <= Add7_add_temp(39 DOWNTO 4);

  Delay19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay19_out1 <= to_signed(0, 36);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay19_out1 <= Add7_out1;
      END IF;
    END IF;
  END PROCESS Delay19_process;


  ComplexDivide_out1_re_signed <= signed(ComplexDivide_out1_re);

  ComplexDivide_out1_im_signed <= signed(ComplexDivide_out1_im);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1_re <= to_signed(16#000000#, 24);
      Delay6_out1_im <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1_re <= ComplexDivide_out1_re_signed;
        Delay6_out1_im <= ComplexDivide_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Data_Type_Conversion13_out1_re <= unsigned(resize(Delay6_out1_re, 32));
  Data_Type_Conversion13_out1_im <= unsigned(resize(Delay6_out1_im, 32));

  Bit_Concat2_out1 <= Data_Type_Conversion13_out1_re & Data_Type_Conversion13_out1_im;

  HiOut <= std_logic_vector(Bit_Concat2_out1);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg_re <= (OTHERS => to_signed(16#0000000#, 28));
      Delay4_reg_im <= (OTHERS => to_signed(16#0000000#, 28));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_reg_im(0) <= Delay20_out1_im;
        Delay4_reg_im(1 TO 53) <= Delay4_reg_im(0 TO 52);
        Delay4_reg_re(0) <= Delay20_out1_re;
        Delay4_reg_re(1 TO 53) <= Delay4_reg_re(0 TO 52);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1_re <= Delay4_reg_re(53);
  Delay4_out1_im <= Delay4_reg_im(53);

  Data_Type_Conversion9_out1_re <= unsigned(resize(Delay4_out1_re, 32));
  Data_Type_Conversion9_out1_im <= unsigned(resize(Delay4_out1_im, 32));

  Bit_Concat1_out1 <= Data_Type_Conversion9_out1_re & Data_Type_Conversion9_out1_im;

  AiOut <= std_logic_vector(Bit_Concat1_out1);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_reg(0) <= Delay19_out1;
        Delay5_reg(1 TO 53) <= Delay5_reg(0 TO 52);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(53);

  Data_Type_Conversion11_out1 <= unsigned(resize(Delay5_out1, 64));

  BiOut <= std_logic_vector(Data_Type_Conversion11_out1);

END rtl;

