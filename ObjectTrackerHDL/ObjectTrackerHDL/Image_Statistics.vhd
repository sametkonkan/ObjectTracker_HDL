-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\Image_Statistics.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Image_Statistics
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Preprocess/CurrPreprocess/Image Statistics
-- Hierarchy Level: 3
-- Model version: 3.7
-- 
-- Image Statistics
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ObjectTrackerHDL_pkg.ALL;

ENTITY Image_Statistics IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        in0                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        in1_hStart                        :   IN    std_logic;
        in1_hEnd                          :   IN    std_logic;
        in1_vStart                        :   IN    std_logic;
        in1_vEnd                          :   IN    std_logic;
        in1_valid                         :   IN    std_logic;
        out0                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        out1                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Image_Statistics;


ARCHITECTURE rtl OF Image_Statistics IS

  -- Component Declarations
  COMPONENT calcMean
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          dataIn                          :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          hStart                          :   IN    std_logic;
          hEnd                            :   IN    std_logic;
          vStart                          :   IN    std_logic;
          vEnd                            :   IN    std_logic;
          validIn                         :   IN    std_logic;
          mean                            :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32_En24
          meanSq                          :   OUT   std_logic_vector(39 DOWNTO 0);  -- ufix40_En24
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SQRTBitSet
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
          dout                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- ufix8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : calcMean
    USE ENTITY work.calcMean(rtl);

  FOR ALL : SQRTBitSet
    USE ENTITY work.SQRTBitSet(rtl);

  -- Signals
  SIGNAL Mean                             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL MeanInputSquared                 : std_logic_vector(39 DOWNTO 0);  -- ufix40
  SIGNAL validOutS                        : std_logic;
  SIGNAL intdelay_reg                     : std_logic_vector(11 DOWNTO 0);  -- ufix1 [12]
  SIGNAL validOutPre                      : std_logic;
  SIGNAL Mean_unsigned                    : unsigned(31 DOWNTO 0);  -- ufix32_En24
  SIGNAL Mean_1                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL intdelay_reg_1                   : vector_of_unsigned8(0 TO 11);  -- ufix8 [12]
  SIGNAL Mean_2                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL mean_3                           : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL MeanInputSquared_unsigned        : unsigned(39 DOWNTO 0);  -- ufix40_En24
  SIGNAL intdelay_reg_2                   : vector_of_unsigned40(0 TO 3);  -- ufix40 [4]
  SIGNAL MeanInputSquared_1               : unsigned(39 DOWNTO 0);  -- ufix40_En24
  SIGNAL preStagePipeline                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL preStagePipeline_1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL multiplier_mul_temp              : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL MeanInputSquared_2               : unsigned(39 DOWNTO 0);  -- ufix40_En24
  SIGNAL postStagePipeline                : unsigned(39 DOWNTO 0);  -- ufix40_En24
  SIGNAL postStagePipeline_1              : unsigned(39 DOWNTO 0);  -- ufix40_En24
  SIGNAL Variance                         : unsigned(39 DOWNTO 0);  -- ufix40_En24
  SIGNAL Variance_1                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL devTemp                          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL devTemp_unsigned                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL stdDev                           : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  -- Mean Calculation
  u_meanCalc : calcMean
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              dataIn => in0,  -- uint8
              hStart => in1_hStart,
              hEnd => in1_hEnd,
              vStart => in1_vStart,
              vEnd => in1_vEnd,
              validIn => in1_valid,
              mean => Mean,  -- ufix32_En24
              meanSq => MeanInputSquared,  -- ufix40_En24
              validOut => validOutS
              );

  -- Bit-Set Square Root Computation
  u_SQRT : SQRTBitSet
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              din => std_logic_vector(Variance_1),  -- ufix16
              dout => devTemp  -- ufix8
              );

  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        intdelay_reg(0) <= validOutS;
        intdelay_reg(11 DOWNTO 1) <= intdelay_reg(10 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS intdelay_process;

  validOutPre <= intdelay_reg(11);

  Mean_unsigned <= unsigned(Mean);

  Mean_1 <= Mean_unsigned(31 DOWNTO 24) + ('0' & Mean_unsigned(23));

  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_1 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        intdelay_reg_1(0) <= Mean_1;
        intdelay_reg_1(1 TO 11) <= intdelay_reg_1(0 TO 10);
      END IF;
    END IF;
  END PROCESS intdelay_1_process;

  Mean_2 <= intdelay_reg_1(11);

  reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      mean_3 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND validOutPre = '1' THEN
        mean_3 <= Mean_2;
      END IF;
    END IF;
  END PROCESS reg_process;


  out0 <= std_logic_vector(mean_3);

  MeanInputSquared_unsigned <= unsigned(MeanInputSquared);

  intdelay_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_2 <= (OTHERS => to_unsigned(0, 40));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        intdelay_reg_2(0) <= MeanInputSquared_unsigned;
        intdelay_reg_2(1 TO 3) <= intdelay_reg_2(0 TO 2);
      END IF;
    END IF;
  END PROCESS intdelay_2_process;

  MeanInputSquared_1 <= intdelay_reg_2(3);

  reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      preStagePipeline <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        preStagePipeline <= Mean_1;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      preStagePipeline_1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        preStagePipeline_1 <= preStagePipeline;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  -- Square the Mean
  multiplier_mul_temp <= preStagePipeline_1 * preStagePipeline_1;
  MeanInputSquared_2 <= multiplier_mul_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      postStagePipeline <= to_unsigned(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        postStagePipeline <= MeanInputSquared_2;
      END IF;
    END IF;
  END PROCESS reg_3_process;


  reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      postStagePipeline_1 <= to_unsigned(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        postStagePipeline_1 <= postStagePipeline;
      END IF;
    END IF;
  END PROCESS reg_4_process;


  -- Subtract mean squared from the mean of input squared
  Variance <= MeanInputSquared_1 - postStagePipeline_1;

  Variance_1 <= Variance(39 DOWNTO 24) + ('0' & Variance(23));

  devTemp_unsigned <= unsigned(devTemp);

  reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      stdDev <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND validOutPre = '1' THEN
        stdDev <= devTemp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_5_process;


  out1 <= std_logic_vector(stdDev);

END rtl;

