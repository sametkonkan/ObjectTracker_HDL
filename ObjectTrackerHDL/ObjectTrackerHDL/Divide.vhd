-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\Divide.vhd
-- Created: 2024-12-03 00:37:45
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Divide
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Overlay/VideoOverlay/Divide
-- Hierarchy Level: 3
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ObjectTrackerHDL_pkg.ALL;

ENTITY Divide IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dividend_in                       :   IN    vector_of_std_logic_vector18(0 TO 2);  -- sfix18 [3]
        divisor_in                        :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
        quotient                          :   OUT   vector_of_std_logic_vector18(0 TO 2)  -- sfix18 [3]
        );
END Divide;


ARCHITECTURE rtl OF Divide IS

  -- Signals
  SIGNAL trueFlag_1                       : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL initFlagDelay_reg                : std_logic_vector(62 DOWNTO 0);  -- ufix1 [63]
  SIGNAL initFlagenable                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL initFlagenable_0                 : std_logic;  -- ufix1
  SIGNAL ConstantSignal_1                 : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL dividend_in_signed               : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL dividend_in_reg                  : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL z_MSB                            : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL z_MSB_0                          : std_logic;  -- ufix1
  SIGNAL d_in_temp                        : vector_of_signed8(0 TO 2);  -- int8 [3]
  SIGNAL d_in_temp_reg                    : vector_of_signed8(0 TO 2);  -- int8 [3]
  SIGNAL d_MSB                            : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL z_MSB_1                          : std_logic;  -- ufix1
  SIGNAL z_MSB_2                          : std_logic;  -- ufix1
  SIGNAL d_MSB_0                          : std_logic;  -- ufix1
  SIGNAL z_MSB_0_1                        : std_logic;  -- ufix1
  SIGNAL d_MSB_1                          : std_logic;  -- ufix1
  SIGNAL z_MSB_1_1                        : std_logic;  -- ufix1
  SIGNAL d_MSB_2                          : std_logic;  -- ufix1
  SIGNAL z_MSB_2_1                        : std_logic;  -- ufix1
  SIGNAL isSignsDiffer                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL signFlag_p_reg                   : std_logic_vector(59 DOWNTO 0);  -- ufix1 [60]
  SIGNAL signFlag_p_1                     : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL signFlag_p_0                     : std_logic;  -- ufix1
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL z_MSB_0_2                        : std_logic;  -- ufix1
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL preCorrectionIn1_sig_dtc_1       : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL preCorrectionIn1_sig_dtc_dtc     : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL preCorrectionIn1_sig_dtc_dtc_0   : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL z_neg_in0                        : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL z_neg_1                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL z_neg_dtc                        : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL z_MSB_1_2                        : std_logic;  -- ufix1
  SIGNAL switch_compare_2                 : std_logic;
  SIGNAL preCorrectionIn1_sig_dtc_dtc_1   : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL z_MSB_2_2                        : std_logic;  -- ufix1
  SIGNAL switch_compare_3                 : std_logic;
  SIGNAL preCorrectionIn1_sig_dtc_dtc_2   : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL z_neg_dtc_0                      : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL corrected_z_0                    : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL z_neg_dtc_1                      : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL corrected_z_1                    : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL z_neg_dtc_2                      : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL corrected_z_2                    : signed(35 DOWNTO 0);  -- sfix36
  SIGNAL corrected_z                      : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL corrected_z_p_1                  : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBits                          : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x                                : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_MSB_0_1                        : std_logic;  -- ufix1
  SIGNAL switch_compare_1_2               : std_logic;
  SIGNAL preCorrectionIn2_sig_dtc_1       : vector_of_signed9(0 TO 2);  -- sfix9 [3]
  SIGNAL preCorrectionIn2_sig_dtc_dtc     : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL preCorrectionIn2_sig_dtc_dtc_0   : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0                        : vector_of_signed10(0 TO 2);  -- sfix10 [3]
  SIGNAL d_neg_1                          : vector_of_signed9(0 TO 2);  -- sfix9 [3]
  SIGNAL d_neg_dtc                        : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_MSB_1_1                        : std_logic;  -- ufix1
  SIGNAL switch_compare_2_1               : std_logic;
  SIGNAL preCorrectionIn2_sig_dtc_dtc_1   : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_MSB_2_1                        : std_logic;  -- ufix1
  SIGNAL switch_compare_3_1               : std_logic;
  SIGNAL preCorrectionIn2_sig_dtc_dtc_2   : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_dtc_0                      : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL corrected_d_0                    : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_dtc_1                      : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL corrected_d_1                    : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_dtc_2                      : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL corrected_d_2                    : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL corrected_d                      : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL corrected_d_p_1                  : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_in0_1                      : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_3                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits                     : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits                          : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit                      : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0                        : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0                    : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_1                  : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1                        : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1                    : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_1                  : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2                   : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2                        : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2                    : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_1                  : std_logic;  -- ufix1
  SIGNAL rNextTemp                        : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r1                               : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r1_p                             : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit                           : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0                         : std_logic;  -- ufix1
  SIGNAL rMSBit_0_1                       : std_logic;  -- ufix1
  SIGNAL switch_compare_1_3               : std_logic;
  SIGNAL d1_p                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d1_p_0                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_2                      : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_5                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1                         : std_logic;  -- ufix1
  SIGNAL rMSBit_1_1                       : std_logic;  -- ufix1
  SIGNAL switch_compare_2_2               : std_logic;
  SIGNAL d1_p_1                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2                         : std_logic;  -- ufix1
  SIGNAL rMSBit_2_1                       : std_logic;  -- ufix1
  SIGNAL switch_compare_3_2               : std_logic;
  SIGNAL d1_p_2                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_1                        : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_1                              : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0                              : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_1                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_1                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_1                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_1                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_3                              : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_3                           : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_3                   : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_1                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_3                        : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_3                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_1                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_2                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_3                  : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_1                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_1                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_2                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_3                  : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_1                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_1                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_2                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_3                  : std_logic;  -- ufix1
  SIGNAL rNextTemp_1                      : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r2                               : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r2_p                             : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_3                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_2                       : std_logic;  -- ufix1
  SIGNAL rMSBit_0_3                       : std_logic;  -- ufix1
  SIGNAL switch_compare_1_4               : std_logic;
  SIGNAL d2_p                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d2_p_0                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_3                      : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_7                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_2                       : std_logic;  -- ufix1
  SIGNAL rMSBit_1_3                       : std_logic;  -- ufix1
  SIGNAL switch_compare_2_3               : std_logic;
  SIGNAL d2_p_1                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_2                       : std_logic;  -- ufix1
  SIGNAL rMSBit_2_3                       : std_logic;  -- ufix1
  SIGNAL switch_compare_3_3               : std_logic;
  SIGNAL d2_p_2                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_2                        : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_2                              : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_1                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_1                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_2                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_2                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_2                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_2                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_7                              : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_4                           : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_4                   : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_2                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_4                        : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_4                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_2                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_4                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_5                  : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_2                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_2                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_4                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_5                  : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_2                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_2                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_4                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_5                  : std_logic;  -- ufix1
  SIGNAL rNextTemp_2                      : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r3                               : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r3_p                             : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_4                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_4                       : std_logic;  -- ufix1
  SIGNAL rMSBit_0_5                       : std_logic;  -- ufix1
  SIGNAL switch_compare_1_5               : std_logic;
  SIGNAL d3_p                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d3_p_0                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_4                      : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_9                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_4                       : std_logic;  -- ufix1
  SIGNAL rMSBit_1_5                       : std_logic;  -- ufix1
  SIGNAL switch_compare_2_4               : std_logic;
  SIGNAL d3_p_1                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_4                       : std_logic;  -- ufix1
  SIGNAL rMSBit_2_5                       : std_logic;  -- ufix1
  SIGNAL switch_compare_3_4               : std_logic;
  SIGNAL d3_p_2                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_3                        : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_3                              : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_2                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_2                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_3                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_3                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_3                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_3                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_11                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_5                           : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_5                   : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_3                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_5                        : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_5                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_3                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_6                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_7                  : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_3                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_3                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_6                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_7                  : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_3                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_3                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_6                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_7                  : std_logic;  -- ufix1
  SIGNAL rNextTemp_3                      : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r4                               : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r4_p                             : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_5                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_6                       : std_logic;  -- ufix1
  SIGNAL rMSBit_0_7                       : std_logic;  -- ufix1
  SIGNAL switch_compare_1_6               : std_logic;
  SIGNAL d4_p                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d4_p_0                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_5                      : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_11                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_6                       : std_logic;  -- ufix1
  SIGNAL rMSBit_1_7                       : std_logic;  -- ufix1
  SIGNAL switch_compare_2_5               : std_logic;
  SIGNAL d4_p_1                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_6                       : std_logic;  -- ufix1
  SIGNAL rMSBit_2_7                       : std_logic;  -- ufix1
  SIGNAL switch_compare_3_5               : std_logic;
  SIGNAL d4_p_2                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_4                        : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_4                              : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_3                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_3                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_4                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_4                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_4                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_4                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_15                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_6                           : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_6                   : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_4                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_6                        : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_6                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_4                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_8                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_9                  : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_4                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_4                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_8                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_9                  : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_4                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_4                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_8                  : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_9                  : std_logic;  -- ufix1
  SIGNAL rNextTemp_4                      : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r5                               : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r5_p                             : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_6                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_8                       : std_logic;  -- ufix1
  SIGNAL rMSBit_0_9                       : std_logic;  -- ufix1
  SIGNAL switch_compare_1_7               : std_logic;
  SIGNAL d5_p                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d5_p_0                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_6                      : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_13                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_8                       : std_logic;  -- ufix1
  SIGNAL rMSBit_1_9                       : std_logic;  -- ufix1
  SIGNAL switch_compare_2_6               : std_logic;
  SIGNAL d5_p_1                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_8                       : std_logic;  -- ufix1
  SIGNAL rMSBit_2_9                       : std_logic;  -- ufix1
  SIGNAL switch_compare_3_6               : std_logic;
  SIGNAL d5_p_2                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_5                        : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_5                              : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_4                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_4                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_5                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_5                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_5                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_5                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_19                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_7                           : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_7                   : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_5                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_7                        : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_7                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_5                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_10                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_11                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_5                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_5                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_10                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_11                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_5                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_5                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_10                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_11                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_5                      : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r6                               : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r6_p                             : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_7                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_10                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_11                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_8               : std_logic;
  SIGNAL d6_p                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d6_p_0                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_7                      : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_15                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_10                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_11                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_7               : std_logic;
  SIGNAL d6_p_1                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_10                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_11                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_7               : std_logic;
  SIGNAL d6_p_2                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_6                        : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_6                              : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_5                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_5                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_6                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_6                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_6                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_6                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_23                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_8                           : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_8                   : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_6                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_8                        : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_8                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_6                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_12                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_13                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_6                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_6                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_12                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_13                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_6                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_6                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_12                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_13                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_6                      : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r7                               : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r7_p                             : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_8                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_12                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_13                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_9               : std_logic;
  SIGNAL d7_p                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d7_p_0                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_8                      : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_17                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_12                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_13                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_8               : std_logic;
  SIGNAL d7_p_1                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_12                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_13                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_8               : std_logic;
  SIGNAL d7_p_2                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_7                        : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_7                              : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_6                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_6                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_7                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_7                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_7                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_7                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_27                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_9                           : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_9                   : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_7                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_9                        : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_9                    : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_7                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_14                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_15                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_7                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_7                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_14                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_15                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_7                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_7                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_14                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_15                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_7                      : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r8                               : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r8_p                             : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_9                         : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_14                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_15                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_10              : std_logic;
  SIGNAL d8_p                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d8_p_0                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_9                      : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_19                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_14                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_15                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_9               : std_logic;
  SIGNAL d8_p_1                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_14                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_15                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_9               : std_logic;
  SIGNAL d8_p_2                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_8                        : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_8                              : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_7                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_7                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_8                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_8                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_8                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_8                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_31                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_10                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_10                  : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_8                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_10                       : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_10                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_8                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_16                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_17                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_8                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_8                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_16                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_17                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_8                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_8                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_16                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_17                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_8                      : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r9                               : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r9_p                             : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_10                        : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_16                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_17                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_11              : std_logic;
  SIGNAL d9_p                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d9_p_0                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_10                     : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_21                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_16                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_17                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_10              : std_logic;
  SIGNAL d9_p_1                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_16                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_17                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_10              : std_logic;
  SIGNAL d9_p_2                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_9                        : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_9                              : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_8                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_8                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_9                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_9                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_9                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_9                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_35                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_11                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_11                  : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_9                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_11                       : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_11                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_9                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_18                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_19                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_9                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_9                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_18                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_19                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_9                 : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_9                      : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_18                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_19                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_9                      : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r10                              : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r10_p                            : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_11                        : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_18                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_19                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_12              : std_logic;
  SIGNAL d10_p                            : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d10_p_0                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_11                     : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_23                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_18                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_19                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_11              : std_logic;
  SIGNAL d10_p_1                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_18                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_19                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_11              : std_logic;
  SIGNAL d10_p_2                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_10                       : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_10                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_9                        : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_9                            : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_10                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_10                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_10                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_10                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_39                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_12                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_12                  : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_10                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_12                       : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_12                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_10                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_20                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_21                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_10                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_10                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_20                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_21                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_10                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_10                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_20                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_21                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_10                     : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r11                              : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r11_p                            : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_12                        : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_20                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_21                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_13              : std_logic;
  SIGNAL d11_p                            : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d11_p_0                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_12                     : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_25                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_20                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_21                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_12              : std_logic;
  SIGNAL d11_p_1                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_20                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_21                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_12              : std_logic;
  SIGNAL d11_p_2                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_11                       : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_11                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_10                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_10                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_11                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_11                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_11                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_11                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_43                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_13                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_13                  : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_11                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_13                       : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_13                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_11                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_22                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_23                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_11                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_11                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_22                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_23                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_11                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_11                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_22                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_23                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_11                     : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r12                              : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r12_p                            : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_13                        : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_22                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_23                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_14              : std_logic;
  SIGNAL d12_p                            : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d12_p_0                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_13                     : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_27                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_22                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_23                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_13              : std_logic;
  SIGNAL d12_p_1                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_22                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_23                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_13              : std_logic;
  SIGNAL d12_p_2                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_12                       : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_12                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_11                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_11                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_12                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_12                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_12                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_12                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_47                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_14                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_14                  : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_12                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_14                       : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_14                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_12                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_24                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_25                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_12                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_12                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_24                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_25                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_12                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_12                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_24                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_25                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_12                     : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r13                              : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r13_p                            : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_14                        : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_24                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_25                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_15              : std_logic;
  SIGNAL d13_p                            : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d13_p_0                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_14                     : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_29                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_24                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_25                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_14              : std_logic;
  SIGNAL d13_p_1                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_24                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_25                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_14              : std_logic;
  SIGNAL d13_p_2                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_13                       : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_13                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_12                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_12                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_13                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_13                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_13                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_13                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_51                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_15                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_15                  : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_13                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_15                       : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_15                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_13                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_26                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_27                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_13                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_13                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_26                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_27                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_13                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_13                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_26                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_27                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_13                     : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r14                              : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r14_p                            : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_15                        : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_26                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_27                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_16              : std_logic;
  SIGNAL d14_p                            : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d14_p_0                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_15                     : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_31                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_26                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_27                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_15              : std_logic;
  SIGNAL d14_p_1                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_26                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_27                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_15              : std_logic;
  SIGNAL d14_p_2                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_14                       : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_14                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_13                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_13                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_14                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_14                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_14                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_14                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_55                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_16                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_16                  : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_14                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_16                       : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_16                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_14                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_28                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_29                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_14                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_14                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_28                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_29                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_14                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_14                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_28                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_29                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_14                     : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r15                              : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r15_p                            : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_16                        : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_28                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_29                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_17              : std_logic;
  SIGNAL d15_p                            : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d15_p_0                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_16                     : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_33                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_28                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_29                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_16              : std_logic;
  SIGNAL d15_p_1                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_28                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_29                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_16              : std_logic;
  SIGNAL d15_p_2                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_15                       : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_15                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_14                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_14                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_15                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_15                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_15                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_15                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_59                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_17                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_17                  : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_15                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_17                       : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_17                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_15                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_30                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_31                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_15                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_15                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_30                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_31                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_15                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_15                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_30                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_31                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_15                     : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r16                              : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r16_p                            : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_17                        : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_30                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_31                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_18              : std_logic;
  SIGNAL d16_p                            : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d16_p_0                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_17                     : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_35                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_30                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_31                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_17              : std_logic;
  SIGNAL d16_p_1                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_30                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_31                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_17              : std_logic;
  SIGNAL d16_p_2                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_16                       : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_16                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_15                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_15                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_16                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_16                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_16                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_16                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_63                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_18                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_18                  : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_16                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_18                       : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_18                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_16                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_32                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_33                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_16                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_16                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_32                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_33                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_16                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_16                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_32                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_33                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_16                     : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r17                              : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r17_p                            : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL rMSBit_18                        : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rMSBit_0_32                      : std_logic;  -- ufix1
  SIGNAL rMSBit_0_33                      : std_logic;  -- ufix1
  SIGNAL switch_compare_1_19              : std_logic;
  SIGNAL d17_p                            : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d17_p_0                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_in0_18                     : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL d_neg_37                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBit_1_32                      : std_logic;  -- ufix1
  SIGNAL rMSBit_1_33                      : std_logic;  -- ufix1
  SIGNAL switch_compare_2_18              : std_logic;
  SIGNAL d17_p_1                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBit_2_32                      : std_logic;  -- ufix1
  SIGNAL rMSBit_2_33                      : std_logic;  -- ufix1
  SIGNAL switch_compare_3_18              : std_logic;
  SIGNAL d17_p_2                          : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL rMSBits_17                       : vector_of_unsigned19(0 TO 2);  -- ufix19 [3]
  SIGNAL x_17                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL d_neg_0_16                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_0_16                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_1_17                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_1_17                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL d_neg_2_17                       : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_2_17                           : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL y_67                             : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL temp_19                          : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL rMSBNextBits_19                  : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL rMSBNextBits_0_17                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_19                       : vector_of_unsigned17(0 TO 2);  -- ufix17 [3]
  SIGNAL tempSignBit_19                   : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL rLSBits_0_17                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_0_34                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_0_35                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_1_17                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_1_17                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_1_34                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_1_35                 : std_logic;  -- ufix1
  SIGNAL rMSBNextBits_2_17                : unsigned(17 DOWNTO 0);  -- ufix18
  SIGNAL rLSBits_2_17                     : unsigned(16 DOWNTO 0);  -- ufix17
  SIGNAL tempSignBit_2_34                 : std_logic;  -- ufix1
  SIGNAL tempSignBit_2_35                 : std_logic;  -- ufix1
  SIGNAL rNextTemp_17                     : vector_of_unsigned36(0 TO 2);  -- ufix36 [3]
  SIGNAL r18                              : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL r18_p                            : vector_of_signed36(0 TO 2);  -- sfix36 [3]
  SIGNAL qTemp                            : vector_of_unsigned18(0 TO 2);  -- ufix18 [3]
  SIGNAL qtempExt                         : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL qtempExt_p_1                     : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL qtempExt_p_0                     : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL qin_neg_post_in0                 : vector_of_signed20(0 TO 2);  -- sfix20 [3]
  SIGNAL qin_neg_post_1                   : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL signFlag_p_1_1                   : std_logic;  -- ufix1
  SIGNAL switch_compare_2_19              : std_logic;
  SIGNAL qtempExt_p_1_1                   : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL signFlag_p_2                     : std_logic;  -- ufix1
  SIGNAL switch_compare_3_19              : std_logic;
  SIGNAL qtempExt_p_2                     : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL qin_neg_post_0                   : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL qtemp_post_0                     : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL qin_neg_post_1_1                 : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL qtemp_post_1                     : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL qin_neg_post_2                   : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL qtemp_post_2                     : signed(18 DOWNTO 0);  -- sfix19
  SIGNAL qtemp_post                       : vector_of_signed19(0 TO 2);  -- sfix19 [3]
  SIGNAL sel1                             : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL sel0                             : std_logic_vector(2 DOWNTO 0);  -- ufix1 [3]
  SIGNAL sel                              : vector_of_unsigned2(0 TO 2);  -- ufix2 [3]
  SIGNAL sel_shift                        : vector_of_unsigned2(0 TO 2);  -- ufix2 [3]
  SIGNAL sel_shift_0                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL qtemp_dtc_post_1                 : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL qtemp_dtc_post_0                 : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL ConstantSignalMax_1              : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL ConstantSignalMax_0              : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL ConstantSignalMin_1              : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL ConstantSignalMin_0              : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL initFlagenable_1                 : std_logic;  -- ufix1
  SIGNAL sel_shift_1                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL qtemp_dtc_post_1_1               : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL ConstantSignalMax_1_1            : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL ConstantSignalMin_1_1            : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL initFlagenable_2                 : std_logic;  -- ufix1
  SIGNAL sel_shift_2                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL qtemp_dtc_post_2                 : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL ConstantSignalMax_2              : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL ConstantSignalMin_2              : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL ConstantSignal_0                 : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL qtemp_dtc_post_0_1               : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL qtempPost_0                      : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL qtempPost_0_1                    : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL ConstantSignal_1_1               : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL qtemp_dtc_post_1_2               : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL qtempPost_1                      : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL qtempPost_1_1                    : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL ConstantSignal_2                 : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL qtemp_dtc_post_2_1               : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL qtempPost_2                      : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL qtempPost_2_1                    : signed(17 DOWNTO 0);  -- sfix18
  SIGNAL qtempPost                        : vector_of_signed18(0 TO 2);  -- sfix18 [3]
  SIGNAL quotient_tmp                     : vector_of_signed18(0 TO 2);  -- sfix18 [3]

BEGIN
  trueFlag_1 <= (OTHERS => '1');

  initFlagDelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      initFlagDelay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        initFlagDelay_reg(2 DOWNTO 0) <= trueFlag_1(2 DOWNTO 0);
        initFlagDelay_reg(62 DOWNTO 3) <= initFlagDelay_reg(59 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS initFlagDelay_process;

  initFlagenable(2 DOWNTO 0) <= initFlagDelay_reg(62 DOWNTO 60);

  initFlagenable_0 <= initFlagenable(0);

  ConstantSignal_1 <= (OTHERS => to_signed(16#00000#, 18));

  outputgen1: FOR k96 IN 0 TO 2 GENERATE
    dividend_in_signed(k96) <= signed(dividend_in(k96));
  END GENERATE;

  z_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dividend_in_reg <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dividend_in_reg <= dividend_in_signed;
      END IF;
    END IF;
  END PROCESS z_p_process;



  z_MSB_gen: FOR k IN 0 TO 2 GENERATE
    z_MSB(k) <= dividend_in_reg(k)(17);
  END GENERATE z_MSB_gen;


  z_MSB_0 <= z_MSB(0);

  d_in_temp(0) <= signed(divisor_in);
  d_in_temp(1) <= signed(divisor_in);
  d_in_temp(2) <= signed(divisor_in);

  d_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d_in_temp_reg <= (OTHERS => to_signed(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d_in_temp_reg <= d_in_temp;
      END IF;
    END IF;
  END PROCESS d_p_process;



  d_MSB_gen: FOR k1 IN 0 TO 2 GENERATE
    d_MSB(k1) <= d_in_temp_reg(k1)(7);
  END GENERATE d_MSB_gen;


  z_MSB_1 <= z_MSB(1);

  z_MSB_2 <= z_MSB(2);

  d_MSB_0 <= d_MSB(0);

  z_MSB_0_1 <= z_MSB_0 XOR d_MSB_0;

  d_MSB_1 <= d_MSB(1);

  z_MSB_1_1 <= z_MSB_1 XOR d_MSB_1;

  d_MSB_2 <= d_MSB(2);

  z_MSB_2_1 <= z_MSB_2 XOR d_MSB_2;

  isSignsDiffer(0) <= z_MSB_0_1;
  isSignsDiffer(1) <= z_MSB_1_1;
  isSignsDiffer(2) <= z_MSB_2_1;

  signFlag_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      signFlag_p_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        signFlag_p_reg(2 DOWNTO 0) <= isSignsDiffer(2 DOWNTO 0);
        signFlag_p_reg(59 DOWNTO 3) <= signFlag_p_reg(56 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS signFlag_p_process;

  signFlag_p_1(2 DOWNTO 0) <= signFlag_p_reg(59 DOWNTO 57);

  signFlag_p_0 <= signFlag_p_1(0);

  
  switch_compare_1 <= '1' WHEN signFlag_p_0 > '0' ELSE
      '0';

  z_MSB_0_2 <= z_MSB(0);

  
  switch_compare_1_1 <= '1' WHEN z_MSB_0_2 > '0' ELSE
      '0';


  preCorrectionIn1_sig_dtc_1_gen: FOR ii IN 0 TO 2 GENERATE
    preCorrectionIn1_sig_dtc_1(ii) <= resize(dividend_in_reg(ii), 19);
  END GENERATE preCorrectionIn1_sig_dtc_1_gen;



  preCorrectionIn1_sig_dtc_dtc_gen: FOR ii1 IN 0 TO 2 GENERATE
    preCorrectionIn1_sig_dtc_dtc(ii1) <= resize(preCorrectionIn1_sig_dtc_1(ii1), 36);
  END GENERATE preCorrectionIn1_sig_dtc_dtc_gen;


  preCorrectionIn1_sig_dtc_dtc_0 <= preCorrectionIn1_sig_dtc_dtc(0);


  z_neg_1_gen: FOR t_0 IN 0 TO 2 GENERATE
    z_neg_in0(t_0) <=  - (resize(preCorrectionIn1_sig_dtc_1(t_0), 20));
    z_neg_1(t_0) <= z_neg_in0(t_0)(18 DOWNTO 0);
  END GENERATE z_neg_1_gen;



  z_neg_dtc_gen: FOR ii2 IN 0 TO 2 GENERATE
    z_neg_dtc(ii2) <= resize(z_neg_1(ii2), 36);
  END GENERATE z_neg_dtc_gen;


  z_MSB_1_2 <= z_MSB(1);

  
  switch_compare_2 <= '1' WHEN z_MSB_1_2 > '0' ELSE
      '0';

  preCorrectionIn1_sig_dtc_dtc_1 <= preCorrectionIn1_sig_dtc_dtc(1);

  z_MSB_2_2 <= z_MSB(2);

  
  switch_compare_3 <= '1' WHEN z_MSB_2_2 > '0' ELSE
      '0';

  preCorrectionIn1_sig_dtc_dtc_2 <= preCorrectionIn1_sig_dtc_dtc(2);

  z_neg_dtc_0 <= z_neg_dtc(0);

  
  corrected_z_0 <= preCorrectionIn1_sig_dtc_dtc_0 WHEN switch_compare_1_1 = '0' ELSE
      z_neg_dtc_0;

  z_neg_dtc_1 <= z_neg_dtc(1);

  
  corrected_z_1 <= preCorrectionIn1_sig_dtc_dtc_1 WHEN switch_compare_2 = '0' ELSE
      z_neg_dtc_1;

  z_neg_dtc_2 <= z_neg_dtc(2);

  
  corrected_z_2 <= preCorrectionIn1_sig_dtc_dtc_2 WHEN switch_compare_3 = '0' ELSE
      z_neg_dtc_2;

  corrected_z(0) <= corrected_z_0;
  corrected_z(1) <= corrected_z_1;
  corrected_z(2) <= corrected_z_2;

  corrected_z_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      corrected_z_p_1 <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        corrected_z_p_1 <= corrected_z;
      END IF;
    END IF;
  END PROCESS corrected_z_p_process;



  rMSBits_gen: FOR k2 IN 0 TO 2 GENERATE
    rMSBits(k2) <= unsigned(corrected_z_p_1(k2)(35 DOWNTO 17));
  END GENERATE rMSBits_gen;



  x_gen: FOR ii3 IN 0 TO 2 GENERATE
    x(ii3) <= signed(rMSBits(ii3));
  END GENERATE x_gen;


  d_MSB_0_1 <= d_MSB(0);

  
  switch_compare_1_2 <= '1' WHEN d_MSB_0_1 > '0' ELSE
      '0';


  preCorrectionIn2_sig_dtc_1_gen: FOR ii4 IN 0 TO 2 GENERATE
    preCorrectionIn2_sig_dtc_1(ii4) <= resize(d_in_temp_reg(ii4), 9);
  END GENERATE preCorrectionIn2_sig_dtc_1_gen;



  preCorrectionIn2_sig_dtc_dtc_gen: FOR ii5 IN 0 TO 2 GENERATE
    preCorrectionIn2_sig_dtc_dtc(ii5) <= resize(preCorrectionIn2_sig_dtc_1(ii5), 19);
  END GENERATE preCorrectionIn2_sig_dtc_dtc_gen;


  preCorrectionIn2_sig_dtc_dtc_0 <= preCorrectionIn2_sig_dtc_dtc(0);


  d_neg_1_gen: FOR t_01 IN 0 TO 2 GENERATE
    d_neg_in0(t_01) <=  - (resize(preCorrectionIn2_sig_dtc_1(t_01), 10));
    d_neg_1(t_01) <= d_neg_in0(t_01)(8 DOWNTO 0);
  END GENERATE d_neg_1_gen;



  d_neg_dtc_gen: FOR ii6 IN 0 TO 2 GENERATE
    d_neg_dtc(ii6) <= resize(d_neg_1(ii6), 19);
  END GENERATE d_neg_dtc_gen;


  d_MSB_1_1 <= d_MSB(1);

  
  switch_compare_2_1 <= '1' WHEN d_MSB_1_1 > '0' ELSE
      '0';

  preCorrectionIn2_sig_dtc_dtc_1 <= preCorrectionIn2_sig_dtc_dtc(1);

  d_MSB_2_1 <= d_MSB(2);

  
  switch_compare_3_1 <= '1' WHEN d_MSB_2_1 > '0' ELSE
      '0';

  preCorrectionIn2_sig_dtc_dtc_2 <= preCorrectionIn2_sig_dtc_dtc(2);

  d_neg_dtc_0 <= d_neg_dtc(0);

  
  corrected_d_0 <= preCorrectionIn2_sig_dtc_dtc_0 WHEN switch_compare_1_2 = '0' ELSE
      d_neg_dtc_0;

  d_neg_dtc_1 <= d_neg_dtc(1);

  
  corrected_d_1 <= preCorrectionIn2_sig_dtc_dtc_1 WHEN switch_compare_2_1 = '0' ELSE
      d_neg_dtc_1;

  d_neg_dtc_2 <= d_neg_dtc(2);

  
  corrected_d_2 <= preCorrectionIn2_sig_dtc_dtc_2 WHEN switch_compare_3_1 = '0' ELSE
      d_neg_dtc_2;

  corrected_d(0) <= corrected_d_0;
  corrected_d(1) <= corrected_d_1;
  corrected_d(2) <= corrected_d_2;

  corrected_d_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      corrected_d_p_1 <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        corrected_d_p_1 <= corrected_d;
      END IF;
    END IF;
  END PROCESS corrected_d_p_process;



  d_neg_3_gen: FOR t_02 IN 0 TO 2 GENERATE
    d_neg_in0_1(t_02) <=  - (resize(corrected_d_p_1(t_02), 20));
    d_neg_3(t_02) <= d_neg_in0_1(t_02)(18 DOWNTO 0);
  END GENERATE d_neg_3_gen;



  temp_gen: FOR t_03 IN 0 TO 2 GENERATE
    temp(t_03) <= x(t_03) + d_neg_3(t_03);
  END GENERATE temp_gen;



  rMSBNextBits_gen: FOR k3 IN 0 TO 2 GENERATE
    rMSBNextBits(k3) <= unsigned(temp(k3)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_gen;


  rMSBNextBits_0 <= rMSBNextBits(0);


  rLSBits_gen: FOR k4 IN 0 TO 2 GENERATE
    rLSBits(k4) <= unsigned(corrected_z_p_1(k4)(16 DOWNTO 0));
  END GENERATE rLSBits_gen;



  tempSignBit_gen: FOR k5 IN 0 TO 2 GENERATE
    tempSignBit(k5) <= temp(k5)(17);
  END GENERATE tempSignBit_gen;


  rLSBits_0 <= rLSBits(0);

  tempSignBit_0 <= tempSignBit(0);

  tempSignBit_0_1 <=  NOT tempSignBit_0;

  rMSBNextBits_1 <= rMSBNextBits(1);

  rLSBits_1 <= rLSBits(1);

  tempSignBit_1 <= tempSignBit(1);

  tempSignBit_1_1 <=  NOT tempSignBit_1;

  rMSBNextBits_2 <= rMSBNextBits(2);

  rLSBits_2 <= rLSBits(2);

  tempSignBit_2 <= tempSignBit(2);

  tempSignBit_2_1 <=  NOT tempSignBit_2;

  rNextTemp(0) <= rMSBNextBits_0 & rLSBits_0 & tempSignBit_0_1;
  rNextTemp(1) <= rMSBNextBits_1 & rLSBits_1 & tempSignBit_1_1;
  rNextTemp(2) <= rMSBNextBits_2 & rLSBits_2 & tempSignBit_2_1;


  r1_gen: FOR ii7 IN 0 TO 2 GENERATE
    r1(ii7) <= signed(rNextTemp(ii7));
  END GENERATE r1_gen;


  r_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r1_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r1_p <= r1;
      END IF;
    END IF;
  END PROCESS r_reg_process;



  rMSBit_gen: FOR k6 IN 0 TO 2 GENERATE
    rMSBit(k6) <= r1_p(k6)(35);
  END GENERATE rMSBit_gen;


  rMSBit_0 <= rMSBit(0);

  rMSBit_0_1 <=  NOT rMSBit_0;

  
  switch_compare_1_3 <= '1' WHEN rMSBit_0_1 > '0' ELSE
      '0';

  d_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d1_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d1_p <= corrected_d_p_1;
      END IF;
    END IF;
  END PROCESS d_reg_process;


  d1_p_0 <= d1_p(0);


  d_neg_5_gen: FOR t_04 IN 0 TO 2 GENERATE
    d_neg_in0_2(t_04) <=  - (resize(d1_p(t_04), 20));
    d_neg_5(t_04) <= d_neg_in0_2(t_04)(18 DOWNTO 0);
  END GENERATE d_neg_5_gen;


  rMSBit_1 <= rMSBit(1);

  rMSBit_1_1 <=  NOT rMSBit_1;

  
  switch_compare_2_2 <= '1' WHEN rMSBit_1_1 > '0' ELSE
      '0';

  d1_p_1 <= d1_p(1);

  rMSBit_2 <= rMSBit(2);

  rMSBit_2_1 <=  NOT rMSBit_2;

  
  switch_compare_3_2 <= '1' WHEN rMSBit_2_1 > '0' ELSE
      '0';

  d1_p_2 <= d1_p(2);


  rMSBits_1_gen: FOR k7 IN 0 TO 2 GENERATE
    rMSBits_1(k7) <= unsigned(r1_p(k7)(35 DOWNTO 17));
  END GENERATE rMSBits_1_gen;



  x_1_gen: FOR ii8 IN 0 TO 2 GENERATE
    x_1(ii8) <= signed(rMSBits_1(ii8));
  END GENERATE x_1_gen;


  d_neg_0 <= d_neg_5(0);

  
  y_0 <= d1_p_0 WHEN switch_compare_1_3 = '0' ELSE
      d_neg_0;

  d_neg_1_1 <= d_neg_5(1);

  
  y_1_1 <= d1_p_1 WHEN switch_compare_2_2 = '0' ELSE
      d_neg_1_1;

  d_neg_2_1 <= d_neg_5(2);

  
  y_2_1 <= d1_p_2 WHEN switch_compare_3_2 = '0' ELSE
      d_neg_2_1;

  y_3(0) <= y_0;
  y_3(1) <= y_1_1;
  y_3(2) <= y_2_1;


  temp_3_gen: FOR t_05 IN 0 TO 2 GENERATE
    temp_3(t_05) <= x_1(t_05) + y_3(t_05);
  END GENERATE temp_3_gen;



  rMSBNextBits_3_gen: FOR k8 IN 0 TO 2 GENERATE
    rMSBNextBits_3(k8) <= unsigned(temp_3(k8)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_3_gen;


  rMSBNextBits_0_1 <= rMSBNextBits_3(0);


  rLSBits_3_gen: FOR k9 IN 0 TO 2 GENERATE
    rLSBits_3(k9) <= unsigned(r1_p(k9)(16 DOWNTO 0));
  END GENERATE rLSBits_3_gen;



  tempSignBit_3_gen: FOR k10 IN 0 TO 2 GENERATE
    tempSignBit_3(k10) <= temp_3(k10)(17);
  END GENERATE tempSignBit_3_gen;


  rLSBits_0_1 <= rLSBits_3(0);

  tempSignBit_0_2 <= tempSignBit_3(0);

  tempSignBit_0_3 <=  NOT tempSignBit_0_2;

  rMSBNextBits_1_1 <= rMSBNextBits_3(1);

  rLSBits_1_1 <= rLSBits_3(1);

  tempSignBit_1_2 <= tempSignBit_3(1);

  tempSignBit_1_3 <=  NOT tempSignBit_1_2;

  rMSBNextBits_2_1 <= rMSBNextBits_3(2);

  rLSBits_2_1 <= rLSBits_3(2);

  tempSignBit_2_2 <= tempSignBit_3(2);

  tempSignBit_2_3 <=  NOT tempSignBit_2_2;

  rNextTemp_1(0) <= rMSBNextBits_0_1 & rLSBits_0_1 & tempSignBit_0_3;
  rNextTemp_1(1) <= rMSBNextBits_1_1 & rLSBits_1_1 & tempSignBit_1_3;
  rNextTemp_1(2) <= rMSBNextBits_2_1 & rLSBits_2_1 & tempSignBit_2_3;


  r2_gen: FOR ii9 IN 0 TO 2 GENERATE
    r2(ii9) <= signed(rNextTemp_1(ii9));
  END GENERATE r2_gen;


  r_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r2_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r2_p <= r2;
      END IF;
    END IF;
  END PROCESS r_reg_1_process;



  rMSBit_3_gen: FOR k11 IN 0 TO 2 GENERATE
    rMSBit_3(k11) <= r2_p(k11)(35);
  END GENERATE rMSBit_3_gen;


  rMSBit_0_2 <= rMSBit_3(0);

  rMSBit_0_3 <=  NOT rMSBit_0_2;

  
  switch_compare_1_4 <= '1' WHEN rMSBit_0_3 > '0' ELSE
      '0';

  d_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d2_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d2_p <= d1_p;
      END IF;
    END IF;
  END PROCESS d_reg_1_process;


  d2_p_0 <= d2_p(0);


  d_neg_7_gen: FOR t_06 IN 0 TO 2 GENERATE
    d_neg_in0_3(t_06) <=  - (resize(d2_p(t_06), 20));
    d_neg_7(t_06) <= d_neg_in0_3(t_06)(18 DOWNTO 0);
  END GENERATE d_neg_7_gen;


  rMSBit_1_2 <= rMSBit_3(1);

  rMSBit_1_3 <=  NOT rMSBit_1_2;

  
  switch_compare_2_3 <= '1' WHEN rMSBit_1_3 > '0' ELSE
      '0';

  d2_p_1 <= d2_p(1);

  rMSBit_2_2 <= rMSBit_3(2);

  rMSBit_2_3 <=  NOT rMSBit_2_2;

  
  switch_compare_3_3 <= '1' WHEN rMSBit_2_3 > '0' ELSE
      '0';

  d2_p_2 <= d2_p(2);


  rMSBits_2_gen: FOR k12 IN 0 TO 2 GENERATE
    rMSBits_2(k12) <= unsigned(r2_p(k12)(35 DOWNTO 17));
  END GENERATE rMSBits_2_gen;



  x_2_gen: FOR ii10 IN 0 TO 2 GENERATE
    x_2(ii10) <= signed(rMSBits_2(ii10));
  END GENERATE x_2_gen;


  d_neg_0_1 <= d_neg_7(0);

  
  y_0_1 <= d2_p_0 WHEN switch_compare_1_4 = '0' ELSE
      d_neg_0_1;

  d_neg_1_2 <= d_neg_7(1);

  
  y_1_2 <= d2_p_1 WHEN switch_compare_2_3 = '0' ELSE
      d_neg_1_2;

  d_neg_2_2 <= d_neg_7(2);

  
  y_2_2 <= d2_p_2 WHEN switch_compare_3_3 = '0' ELSE
      d_neg_2_2;

  y_7(0) <= y_0_1;
  y_7(1) <= y_1_2;
  y_7(2) <= y_2_2;


  temp_4_gen: FOR t_07 IN 0 TO 2 GENERATE
    temp_4(t_07) <= x_2(t_07) + y_7(t_07);
  END GENERATE temp_4_gen;



  rMSBNextBits_4_gen: FOR k13 IN 0 TO 2 GENERATE
    rMSBNextBits_4(k13) <= unsigned(temp_4(k13)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_4_gen;


  rMSBNextBits_0_2 <= rMSBNextBits_4(0);


  rLSBits_4_gen: FOR k14 IN 0 TO 2 GENERATE
    rLSBits_4(k14) <= unsigned(r2_p(k14)(16 DOWNTO 0));
  END GENERATE rLSBits_4_gen;



  tempSignBit_4_gen: FOR k15 IN 0 TO 2 GENERATE
    tempSignBit_4(k15) <= temp_4(k15)(17);
  END GENERATE tempSignBit_4_gen;


  rLSBits_0_2 <= rLSBits_4(0);

  tempSignBit_0_4 <= tempSignBit_4(0);

  tempSignBit_0_5 <=  NOT tempSignBit_0_4;

  rMSBNextBits_1_2 <= rMSBNextBits_4(1);

  rLSBits_1_2 <= rLSBits_4(1);

  tempSignBit_1_4 <= tempSignBit_4(1);

  tempSignBit_1_5 <=  NOT tempSignBit_1_4;

  rMSBNextBits_2_2 <= rMSBNextBits_4(2);

  rLSBits_2_2 <= rLSBits_4(2);

  tempSignBit_2_4 <= tempSignBit_4(2);

  tempSignBit_2_5 <=  NOT tempSignBit_2_4;

  rNextTemp_2(0) <= rMSBNextBits_0_2 & rLSBits_0_2 & tempSignBit_0_5;
  rNextTemp_2(1) <= rMSBNextBits_1_2 & rLSBits_1_2 & tempSignBit_1_5;
  rNextTemp_2(2) <= rMSBNextBits_2_2 & rLSBits_2_2 & tempSignBit_2_5;


  r3_gen: FOR ii11 IN 0 TO 2 GENERATE
    r3(ii11) <= signed(rNextTemp_2(ii11));
  END GENERATE r3_gen;


  r_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r3_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r3_p <= r3;
      END IF;
    END IF;
  END PROCESS r_reg_2_process;



  rMSBit_4_gen: FOR k16 IN 0 TO 2 GENERATE
    rMSBit_4(k16) <= r3_p(k16)(35);
  END GENERATE rMSBit_4_gen;


  rMSBit_0_4 <= rMSBit_4(0);

  rMSBit_0_5 <=  NOT rMSBit_0_4;

  
  switch_compare_1_5 <= '1' WHEN rMSBit_0_5 > '0' ELSE
      '0';

  d_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d3_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d3_p <= d2_p;
      END IF;
    END IF;
  END PROCESS d_reg_2_process;


  d3_p_0 <= d3_p(0);


  d_neg_9_gen: FOR t_08 IN 0 TO 2 GENERATE
    d_neg_in0_4(t_08) <=  - (resize(d3_p(t_08), 20));
    d_neg_9(t_08) <= d_neg_in0_4(t_08)(18 DOWNTO 0);
  END GENERATE d_neg_9_gen;


  rMSBit_1_4 <= rMSBit_4(1);

  rMSBit_1_5 <=  NOT rMSBit_1_4;

  
  switch_compare_2_4 <= '1' WHEN rMSBit_1_5 > '0' ELSE
      '0';

  d3_p_1 <= d3_p(1);

  rMSBit_2_4 <= rMSBit_4(2);

  rMSBit_2_5 <=  NOT rMSBit_2_4;

  
  switch_compare_3_4 <= '1' WHEN rMSBit_2_5 > '0' ELSE
      '0';

  d3_p_2 <= d3_p(2);


  rMSBits_3_gen: FOR k17 IN 0 TO 2 GENERATE
    rMSBits_3(k17) <= unsigned(r3_p(k17)(35 DOWNTO 17));
  END GENERATE rMSBits_3_gen;



  x_3_gen: FOR ii12 IN 0 TO 2 GENERATE
    x_3(ii12) <= signed(rMSBits_3(ii12));
  END GENERATE x_3_gen;


  d_neg_0_2 <= d_neg_9(0);

  
  y_0_2 <= d3_p_0 WHEN switch_compare_1_5 = '0' ELSE
      d_neg_0_2;

  d_neg_1_3 <= d_neg_9(1);

  
  y_1_3 <= d3_p_1 WHEN switch_compare_2_4 = '0' ELSE
      d_neg_1_3;

  d_neg_2_3 <= d_neg_9(2);

  
  y_2_3 <= d3_p_2 WHEN switch_compare_3_4 = '0' ELSE
      d_neg_2_3;

  y_11(0) <= y_0_2;
  y_11(1) <= y_1_3;
  y_11(2) <= y_2_3;


  temp_5_gen: FOR t_09 IN 0 TO 2 GENERATE
    temp_5(t_09) <= x_3(t_09) + y_11(t_09);
  END GENERATE temp_5_gen;



  rMSBNextBits_5_gen: FOR k18 IN 0 TO 2 GENERATE
    rMSBNextBits_5(k18) <= unsigned(temp_5(k18)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_5_gen;


  rMSBNextBits_0_3 <= rMSBNextBits_5(0);


  rLSBits_5_gen: FOR k19 IN 0 TO 2 GENERATE
    rLSBits_5(k19) <= unsigned(r3_p(k19)(16 DOWNTO 0));
  END GENERATE rLSBits_5_gen;



  tempSignBit_5_gen: FOR k20 IN 0 TO 2 GENERATE
    tempSignBit_5(k20) <= temp_5(k20)(17);
  END GENERATE tempSignBit_5_gen;


  rLSBits_0_3 <= rLSBits_5(0);

  tempSignBit_0_6 <= tempSignBit_5(0);

  tempSignBit_0_7 <=  NOT tempSignBit_0_6;

  rMSBNextBits_1_3 <= rMSBNextBits_5(1);

  rLSBits_1_3 <= rLSBits_5(1);

  tempSignBit_1_6 <= tempSignBit_5(1);

  tempSignBit_1_7 <=  NOT tempSignBit_1_6;

  rMSBNextBits_2_3 <= rMSBNextBits_5(2);

  rLSBits_2_3 <= rLSBits_5(2);

  tempSignBit_2_6 <= tempSignBit_5(2);

  tempSignBit_2_7 <=  NOT tempSignBit_2_6;

  rNextTemp_3(0) <= rMSBNextBits_0_3 & rLSBits_0_3 & tempSignBit_0_7;
  rNextTemp_3(1) <= rMSBNextBits_1_3 & rLSBits_1_3 & tempSignBit_1_7;
  rNextTemp_3(2) <= rMSBNextBits_2_3 & rLSBits_2_3 & tempSignBit_2_7;


  r4_gen: FOR ii13 IN 0 TO 2 GENERATE
    r4(ii13) <= signed(rNextTemp_3(ii13));
  END GENERATE r4_gen;


  r_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r4_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r4_p <= r4;
      END IF;
    END IF;
  END PROCESS r_reg_3_process;



  rMSBit_5_gen: FOR k21 IN 0 TO 2 GENERATE
    rMSBit_5(k21) <= r4_p(k21)(35);
  END GENERATE rMSBit_5_gen;


  rMSBit_0_6 <= rMSBit_5(0);

  rMSBit_0_7 <=  NOT rMSBit_0_6;

  
  switch_compare_1_6 <= '1' WHEN rMSBit_0_7 > '0' ELSE
      '0';

  d_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d4_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d4_p <= d3_p;
      END IF;
    END IF;
  END PROCESS d_reg_3_process;


  d4_p_0 <= d4_p(0);


  d_neg_11_gen: FOR t_010 IN 0 TO 2 GENERATE
    d_neg_in0_5(t_010) <=  - (resize(d4_p(t_010), 20));
    d_neg_11(t_010) <= d_neg_in0_5(t_010)(18 DOWNTO 0);
  END GENERATE d_neg_11_gen;


  rMSBit_1_6 <= rMSBit_5(1);

  rMSBit_1_7 <=  NOT rMSBit_1_6;

  
  switch_compare_2_5 <= '1' WHEN rMSBit_1_7 > '0' ELSE
      '0';

  d4_p_1 <= d4_p(1);

  rMSBit_2_6 <= rMSBit_5(2);

  rMSBit_2_7 <=  NOT rMSBit_2_6;

  
  switch_compare_3_5 <= '1' WHEN rMSBit_2_7 > '0' ELSE
      '0';

  d4_p_2 <= d4_p(2);


  rMSBits_4_gen: FOR k22 IN 0 TO 2 GENERATE
    rMSBits_4(k22) <= unsigned(r4_p(k22)(35 DOWNTO 17));
  END GENERATE rMSBits_4_gen;



  x_4_gen: FOR ii14 IN 0 TO 2 GENERATE
    x_4(ii14) <= signed(rMSBits_4(ii14));
  END GENERATE x_4_gen;


  d_neg_0_3 <= d_neg_11(0);

  
  y_0_3 <= d4_p_0 WHEN switch_compare_1_6 = '0' ELSE
      d_neg_0_3;

  d_neg_1_4 <= d_neg_11(1);

  
  y_1_4 <= d4_p_1 WHEN switch_compare_2_5 = '0' ELSE
      d_neg_1_4;

  d_neg_2_4 <= d_neg_11(2);

  
  y_2_4 <= d4_p_2 WHEN switch_compare_3_5 = '0' ELSE
      d_neg_2_4;

  y_15(0) <= y_0_3;
  y_15(1) <= y_1_4;
  y_15(2) <= y_2_4;


  temp_6_gen: FOR t_011 IN 0 TO 2 GENERATE
    temp_6(t_011) <= x_4(t_011) + y_15(t_011);
  END GENERATE temp_6_gen;



  rMSBNextBits_6_gen: FOR k23 IN 0 TO 2 GENERATE
    rMSBNextBits_6(k23) <= unsigned(temp_6(k23)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_6_gen;


  rMSBNextBits_0_4 <= rMSBNextBits_6(0);


  rLSBits_6_gen: FOR k24 IN 0 TO 2 GENERATE
    rLSBits_6(k24) <= unsigned(r4_p(k24)(16 DOWNTO 0));
  END GENERATE rLSBits_6_gen;



  tempSignBit_6_gen: FOR k25 IN 0 TO 2 GENERATE
    tempSignBit_6(k25) <= temp_6(k25)(17);
  END GENERATE tempSignBit_6_gen;


  rLSBits_0_4 <= rLSBits_6(0);

  tempSignBit_0_8 <= tempSignBit_6(0);

  tempSignBit_0_9 <=  NOT tempSignBit_0_8;

  rMSBNextBits_1_4 <= rMSBNextBits_6(1);

  rLSBits_1_4 <= rLSBits_6(1);

  tempSignBit_1_8 <= tempSignBit_6(1);

  tempSignBit_1_9 <=  NOT tempSignBit_1_8;

  rMSBNextBits_2_4 <= rMSBNextBits_6(2);

  rLSBits_2_4 <= rLSBits_6(2);

  tempSignBit_2_8 <= tempSignBit_6(2);

  tempSignBit_2_9 <=  NOT tempSignBit_2_8;

  rNextTemp_4(0) <= rMSBNextBits_0_4 & rLSBits_0_4 & tempSignBit_0_9;
  rNextTemp_4(1) <= rMSBNextBits_1_4 & rLSBits_1_4 & tempSignBit_1_9;
  rNextTemp_4(2) <= rMSBNextBits_2_4 & rLSBits_2_4 & tempSignBit_2_9;


  r5_gen: FOR ii15 IN 0 TO 2 GENERATE
    r5(ii15) <= signed(rNextTemp_4(ii15));
  END GENERATE r5_gen;


  r_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r5_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r5_p <= r5;
      END IF;
    END IF;
  END PROCESS r_reg_4_process;



  rMSBit_6_gen: FOR k26 IN 0 TO 2 GENERATE
    rMSBit_6(k26) <= r5_p(k26)(35);
  END GENERATE rMSBit_6_gen;


  rMSBit_0_8 <= rMSBit_6(0);

  rMSBit_0_9 <=  NOT rMSBit_0_8;

  
  switch_compare_1_7 <= '1' WHEN rMSBit_0_9 > '0' ELSE
      '0';

  d_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d5_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d5_p <= d4_p;
      END IF;
    END IF;
  END PROCESS d_reg_4_process;


  d5_p_0 <= d5_p(0);


  d_neg_13_gen: FOR t_012 IN 0 TO 2 GENERATE
    d_neg_in0_6(t_012) <=  - (resize(d5_p(t_012), 20));
    d_neg_13(t_012) <= d_neg_in0_6(t_012)(18 DOWNTO 0);
  END GENERATE d_neg_13_gen;


  rMSBit_1_8 <= rMSBit_6(1);

  rMSBit_1_9 <=  NOT rMSBit_1_8;

  
  switch_compare_2_6 <= '1' WHEN rMSBit_1_9 > '0' ELSE
      '0';

  d5_p_1 <= d5_p(1);

  rMSBit_2_8 <= rMSBit_6(2);

  rMSBit_2_9 <=  NOT rMSBit_2_8;

  
  switch_compare_3_6 <= '1' WHEN rMSBit_2_9 > '0' ELSE
      '0';

  d5_p_2 <= d5_p(2);


  rMSBits_5_gen: FOR k27 IN 0 TO 2 GENERATE
    rMSBits_5(k27) <= unsigned(r5_p(k27)(35 DOWNTO 17));
  END GENERATE rMSBits_5_gen;



  x_5_gen: FOR ii16 IN 0 TO 2 GENERATE
    x_5(ii16) <= signed(rMSBits_5(ii16));
  END GENERATE x_5_gen;


  d_neg_0_4 <= d_neg_13(0);

  
  y_0_4 <= d5_p_0 WHEN switch_compare_1_7 = '0' ELSE
      d_neg_0_4;

  d_neg_1_5 <= d_neg_13(1);

  
  y_1_5 <= d5_p_1 WHEN switch_compare_2_6 = '0' ELSE
      d_neg_1_5;

  d_neg_2_5 <= d_neg_13(2);

  
  y_2_5 <= d5_p_2 WHEN switch_compare_3_6 = '0' ELSE
      d_neg_2_5;

  y_19(0) <= y_0_4;
  y_19(1) <= y_1_5;
  y_19(2) <= y_2_5;


  temp_7_gen: FOR t_013 IN 0 TO 2 GENERATE
    temp_7(t_013) <= x_5(t_013) + y_19(t_013);
  END GENERATE temp_7_gen;



  rMSBNextBits_7_gen: FOR k28 IN 0 TO 2 GENERATE
    rMSBNextBits_7(k28) <= unsigned(temp_7(k28)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_7_gen;


  rMSBNextBits_0_5 <= rMSBNextBits_7(0);


  rLSBits_7_gen: FOR k29 IN 0 TO 2 GENERATE
    rLSBits_7(k29) <= unsigned(r5_p(k29)(16 DOWNTO 0));
  END GENERATE rLSBits_7_gen;



  tempSignBit_7_gen: FOR k30 IN 0 TO 2 GENERATE
    tempSignBit_7(k30) <= temp_7(k30)(17);
  END GENERATE tempSignBit_7_gen;


  rLSBits_0_5 <= rLSBits_7(0);

  tempSignBit_0_10 <= tempSignBit_7(0);

  tempSignBit_0_11 <=  NOT tempSignBit_0_10;

  rMSBNextBits_1_5 <= rMSBNextBits_7(1);

  rLSBits_1_5 <= rLSBits_7(1);

  tempSignBit_1_10 <= tempSignBit_7(1);

  tempSignBit_1_11 <=  NOT tempSignBit_1_10;

  rMSBNextBits_2_5 <= rMSBNextBits_7(2);

  rLSBits_2_5 <= rLSBits_7(2);

  tempSignBit_2_10 <= tempSignBit_7(2);

  tempSignBit_2_11 <=  NOT tempSignBit_2_10;

  rNextTemp_5(0) <= rMSBNextBits_0_5 & rLSBits_0_5 & tempSignBit_0_11;
  rNextTemp_5(1) <= rMSBNextBits_1_5 & rLSBits_1_5 & tempSignBit_1_11;
  rNextTemp_5(2) <= rMSBNextBits_2_5 & rLSBits_2_5 & tempSignBit_2_11;


  r6_gen: FOR ii17 IN 0 TO 2 GENERATE
    r6(ii17) <= signed(rNextTemp_5(ii17));
  END GENERATE r6_gen;


  r_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r6_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r6_p <= r6;
      END IF;
    END IF;
  END PROCESS r_reg_5_process;



  rMSBit_7_gen: FOR k31 IN 0 TO 2 GENERATE
    rMSBit_7(k31) <= r6_p(k31)(35);
  END GENERATE rMSBit_7_gen;


  rMSBit_0_10 <= rMSBit_7(0);

  rMSBit_0_11 <=  NOT rMSBit_0_10;

  
  switch_compare_1_8 <= '1' WHEN rMSBit_0_11 > '0' ELSE
      '0';

  d_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d6_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d6_p <= d5_p;
      END IF;
    END IF;
  END PROCESS d_reg_5_process;


  d6_p_0 <= d6_p(0);


  d_neg_15_gen: FOR t_014 IN 0 TO 2 GENERATE
    d_neg_in0_7(t_014) <=  - (resize(d6_p(t_014), 20));
    d_neg_15(t_014) <= d_neg_in0_7(t_014)(18 DOWNTO 0);
  END GENERATE d_neg_15_gen;


  rMSBit_1_10 <= rMSBit_7(1);

  rMSBit_1_11 <=  NOT rMSBit_1_10;

  
  switch_compare_2_7 <= '1' WHEN rMSBit_1_11 > '0' ELSE
      '0';

  d6_p_1 <= d6_p(1);

  rMSBit_2_10 <= rMSBit_7(2);

  rMSBit_2_11 <=  NOT rMSBit_2_10;

  
  switch_compare_3_7 <= '1' WHEN rMSBit_2_11 > '0' ELSE
      '0';

  d6_p_2 <= d6_p(2);


  rMSBits_6_gen: FOR k32 IN 0 TO 2 GENERATE
    rMSBits_6(k32) <= unsigned(r6_p(k32)(35 DOWNTO 17));
  END GENERATE rMSBits_6_gen;



  x_6_gen: FOR ii18 IN 0 TO 2 GENERATE
    x_6(ii18) <= signed(rMSBits_6(ii18));
  END GENERATE x_6_gen;


  d_neg_0_5 <= d_neg_15(0);

  
  y_0_5 <= d6_p_0 WHEN switch_compare_1_8 = '0' ELSE
      d_neg_0_5;

  d_neg_1_6 <= d_neg_15(1);

  
  y_1_6 <= d6_p_1 WHEN switch_compare_2_7 = '0' ELSE
      d_neg_1_6;

  d_neg_2_6 <= d_neg_15(2);

  
  y_2_6 <= d6_p_2 WHEN switch_compare_3_7 = '0' ELSE
      d_neg_2_6;

  y_23(0) <= y_0_5;
  y_23(1) <= y_1_6;
  y_23(2) <= y_2_6;


  temp_8_gen: FOR t_015 IN 0 TO 2 GENERATE
    temp_8(t_015) <= x_6(t_015) + y_23(t_015);
  END GENERATE temp_8_gen;



  rMSBNextBits_8_gen: FOR k33 IN 0 TO 2 GENERATE
    rMSBNextBits_8(k33) <= unsigned(temp_8(k33)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_8_gen;


  rMSBNextBits_0_6 <= rMSBNextBits_8(0);


  rLSBits_8_gen: FOR k34 IN 0 TO 2 GENERATE
    rLSBits_8(k34) <= unsigned(r6_p(k34)(16 DOWNTO 0));
  END GENERATE rLSBits_8_gen;



  tempSignBit_8_gen: FOR k35 IN 0 TO 2 GENERATE
    tempSignBit_8(k35) <= temp_8(k35)(17);
  END GENERATE tempSignBit_8_gen;


  rLSBits_0_6 <= rLSBits_8(0);

  tempSignBit_0_12 <= tempSignBit_8(0);

  tempSignBit_0_13 <=  NOT tempSignBit_0_12;

  rMSBNextBits_1_6 <= rMSBNextBits_8(1);

  rLSBits_1_6 <= rLSBits_8(1);

  tempSignBit_1_12 <= tempSignBit_8(1);

  tempSignBit_1_13 <=  NOT tempSignBit_1_12;

  rMSBNextBits_2_6 <= rMSBNextBits_8(2);

  rLSBits_2_6 <= rLSBits_8(2);

  tempSignBit_2_12 <= tempSignBit_8(2);

  tempSignBit_2_13 <=  NOT tempSignBit_2_12;

  rNextTemp_6(0) <= rMSBNextBits_0_6 & rLSBits_0_6 & tempSignBit_0_13;
  rNextTemp_6(1) <= rMSBNextBits_1_6 & rLSBits_1_6 & tempSignBit_1_13;
  rNextTemp_6(2) <= rMSBNextBits_2_6 & rLSBits_2_6 & tempSignBit_2_13;


  r7_gen: FOR ii19 IN 0 TO 2 GENERATE
    r7(ii19) <= signed(rNextTemp_6(ii19));
  END GENERATE r7_gen;


  r_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r7_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r7_p <= r7;
      END IF;
    END IF;
  END PROCESS r_reg_6_process;



  rMSBit_8_gen: FOR k36 IN 0 TO 2 GENERATE
    rMSBit_8(k36) <= r7_p(k36)(35);
  END GENERATE rMSBit_8_gen;


  rMSBit_0_12 <= rMSBit_8(0);

  rMSBit_0_13 <=  NOT rMSBit_0_12;

  
  switch_compare_1_9 <= '1' WHEN rMSBit_0_13 > '0' ELSE
      '0';

  d_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d7_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d7_p <= d6_p;
      END IF;
    END IF;
  END PROCESS d_reg_6_process;


  d7_p_0 <= d7_p(0);


  d_neg_17_gen: FOR t_016 IN 0 TO 2 GENERATE
    d_neg_in0_8(t_016) <=  - (resize(d7_p(t_016), 20));
    d_neg_17(t_016) <= d_neg_in0_8(t_016)(18 DOWNTO 0);
  END GENERATE d_neg_17_gen;


  rMSBit_1_12 <= rMSBit_8(1);

  rMSBit_1_13 <=  NOT rMSBit_1_12;

  
  switch_compare_2_8 <= '1' WHEN rMSBit_1_13 > '0' ELSE
      '0';

  d7_p_1 <= d7_p(1);

  rMSBit_2_12 <= rMSBit_8(2);

  rMSBit_2_13 <=  NOT rMSBit_2_12;

  
  switch_compare_3_8 <= '1' WHEN rMSBit_2_13 > '0' ELSE
      '0';

  d7_p_2 <= d7_p(2);


  rMSBits_7_gen: FOR k37 IN 0 TO 2 GENERATE
    rMSBits_7(k37) <= unsigned(r7_p(k37)(35 DOWNTO 17));
  END GENERATE rMSBits_7_gen;



  x_7_gen: FOR ii20 IN 0 TO 2 GENERATE
    x_7(ii20) <= signed(rMSBits_7(ii20));
  END GENERATE x_7_gen;


  d_neg_0_6 <= d_neg_17(0);

  
  y_0_6 <= d7_p_0 WHEN switch_compare_1_9 = '0' ELSE
      d_neg_0_6;

  d_neg_1_7 <= d_neg_17(1);

  
  y_1_7 <= d7_p_1 WHEN switch_compare_2_8 = '0' ELSE
      d_neg_1_7;

  d_neg_2_7 <= d_neg_17(2);

  
  y_2_7 <= d7_p_2 WHEN switch_compare_3_8 = '0' ELSE
      d_neg_2_7;

  y_27(0) <= y_0_6;
  y_27(1) <= y_1_7;
  y_27(2) <= y_2_7;


  temp_9_gen: FOR t_017 IN 0 TO 2 GENERATE
    temp_9(t_017) <= x_7(t_017) + y_27(t_017);
  END GENERATE temp_9_gen;



  rMSBNextBits_9_gen: FOR k38 IN 0 TO 2 GENERATE
    rMSBNextBits_9(k38) <= unsigned(temp_9(k38)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_9_gen;


  rMSBNextBits_0_7 <= rMSBNextBits_9(0);


  rLSBits_9_gen: FOR k39 IN 0 TO 2 GENERATE
    rLSBits_9(k39) <= unsigned(r7_p(k39)(16 DOWNTO 0));
  END GENERATE rLSBits_9_gen;



  tempSignBit_9_gen: FOR k40 IN 0 TO 2 GENERATE
    tempSignBit_9(k40) <= temp_9(k40)(17);
  END GENERATE tempSignBit_9_gen;


  rLSBits_0_7 <= rLSBits_9(0);

  tempSignBit_0_14 <= tempSignBit_9(0);

  tempSignBit_0_15 <=  NOT tempSignBit_0_14;

  rMSBNextBits_1_7 <= rMSBNextBits_9(1);

  rLSBits_1_7 <= rLSBits_9(1);

  tempSignBit_1_14 <= tempSignBit_9(1);

  tempSignBit_1_15 <=  NOT tempSignBit_1_14;

  rMSBNextBits_2_7 <= rMSBNextBits_9(2);

  rLSBits_2_7 <= rLSBits_9(2);

  tempSignBit_2_14 <= tempSignBit_9(2);

  tempSignBit_2_15 <=  NOT tempSignBit_2_14;

  rNextTemp_7(0) <= rMSBNextBits_0_7 & rLSBits_0_7 & tempSignBit_0_15;
  rNextTemp_7(1) <= rMSBNextBits_1_7 & rLSBits_1_7 & tempSignBit_1_15;
  rNextTemp_7(2) <= rMSBNextBits_2_7 & rLSBits_2_7 & tempSignBit_2_15;


  r8_gen: FOR ii21 IN 0 TO 2 GENERATE
    r8(ii21) <= signed(rNextTemp_7(ii21));
  END GENERATE r8_gen;


  r_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r8_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r8_p <= r8;
      END IF;
    END IF;
  END PROCESS r_reg_7_process;



  rMSBit_9_gen: FOR k41 IN 0 TO 2 GENERATE
    rMSBit_9(k41) <= r8_p(k41)(35);
  END GENERATE rMSBit_9_gen;


  rMSBit_0_14 <= rMSBit_9(0);

  rMSBit_0_15 <=  NOT rMSBit_0_14;

  
  switch_compare_1_10 <= '1' WHEN rMSBit_0_15 > '0' ELSE
      '0';

  d_reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d8_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d8_p <= d7_p;
      END IF;
    END IF;
  END PROCESS d_reg_7_process;


  d8_p_0 <= d8_p(0);


  d_neg_19_gen: FOR t_018 IN 0 TO 2 GENERATE
    d_neg_in0_9(t_018) <=  - (resize(d8_p(t_018), 20));
    d_neg_19(t_018) <= d_neg_in0_9(t_018)(18 DOWNTO 0);
  END GENERATE d_neg_19_gen;


  rMSBit_1_14 <= rMSBit_9(1);

  rMSBit_1_15 <=  NOT rMSBit_1_14;

  
  switch_compare_2_9 <= '1' WHEN rMSBit_1_15 > '0' ELSE
      '0';

  d8_p_1 <= d8_p(1);

  rMSBit_2_14 <= rMSBit_9(2);

  rMSBit_2_15 <=  NOT rMSBit_2_14;

  
  switch_compare_3_9 <= '1' WHEN rMSBit_2_15 > '0' ELSE
      '0';

  d8_p_2 <= d8_p(2);


  rMSBits_8_gen: FOR k42 IN 0 TO 2 GENERATE
    rMSBits_8(k42) <= unsigned(r8_p(k42)(35 DOWNTO 17));
  END GENERATE rMSBits_8_gen;



  x_8_gen: FOR ii22 IN 0 TO 2 GENERATE
    x_8(ii22) <= signed(rMSBits_8(ii22));
  END GENERATE x_8_gen;


  d_neg_0_7 <= d_neg_19(0);

  
  y_0_7 <= d8_p_0 WHEN switch_compare_1_10 = '0' ELSE
      d_neg_0_7;

  d_neg_1_8 <= d_neg_19(1);

  
  y_1_8 <= d8_p_1 WHEN switch_compare_2_9 = '0' ELSE
      d_neg_1_8;

  d_neg_2_8 <= d_neg_19(2);

  
  y_2_8 <= d8_p_2 WHEN switch_compare_3_9 = '0' ELSE
      d_neg_2_8;

  y_31(0) <= y_0_7;
  y_31(1) <= y_1_8;
  y_31(2) <= y_2_8;


  temp_10_gen: FOR t_019 IN 0 TO 2 GENERATE
    temp_10(t_019) <= x_8(t_019) + y_31(t_019);
  END GENERATE temp_10_gen;



  rMSBNextBits_10_gen: FOR k43 IN 0 TO 2 GENERATE
    rMSBNextBits_10(k43) <= unsigned(temp_10(k43)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_10_gen;


  rMSBNextBits_0_8 <= rMSBNextBits_10(0);


  rLSBits_10_gen: FOR k44 IN 0 TO 2 GENERATE
    rLSBits_10(k44) <= unsigned(r8_p(k44)(16 DOWNTO 0));
  END GENERATE rLSBits_10_gen;



  tempSignBit_10_gen: FOR k45 IN 0 TO 2 GENERATE
    tempSignBit_10(k45) <= temp_10(k45)(17);
  END GENERATE tempSignBit_10_gen;


  rLSBits_0_8 <= rLSBits_10(0);

  tempSignBit_0_16 <= tempSignBit_10(0);

  tempSignBit_0_17 <=  NOT tempSignBit_0_16;

  rMSBNextBits_1_8 <= rMSBNextBits_10(1);

  rLSBits_1_8 <= rLSBits_10(1);

  tempSignBit_1_16 <= tempSignBit_10(1);

  tempSignBit_1_17 <=  NOT tempSignBit_1_16;

  rMSBNextBits_2_8 <= rMSBNextBits_10(2);

  rLSBits_2_8 <= rLSBits_10(2);

  tempSignBit_2_16 <= tempSignBit_10(2);

  tempSignBit_2_17 <=  NOT tempSignBit_2_16;

  rNextTemp_8(0) <= rMSBNextBits_0_8 & rLSBits_0_8 & tempSignBit_0_17;
  rNextTemp_8(1) <= rMSBNextBits_1_8 & rLSBits_1_8 & tempSignBit_1_17;
  rNextTemp_8(2) <= rMSBNextBits_2_8 & rLSBits_2_8 & tempSignBit_2_17;


  r9_gen: FOR ii23 IN 0 TO 2 GENERATE
    r9(ii23) <= signed(rNextTemp_8(ii23));
  END GENERATE r9_gen;


  r_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r9_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r9_p <= r9;
      END IF;
    END IF;
  END PROCESS r_reg_8_process;



  rMSBit_10_gen: FOR k46 IN 0 TO 2 GENERATE
    rMSBit_10(k46) <= r9_p(k46)(35);
  END GENERATE rMSBit_10_gen;


  rMSBit_0_16 <= rMSBit_10(0);

  rMSBit_0_17 <=  NOT rMSBit_0_16;

  
  switch_compare_1_11 <= '1' WHEN rMSBit_0_17 > '0' ELSE
      '0';

  d_reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d9_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d9_p <= d8_p;
      END IF;
    END IF;
  END PROCESS d_reg_8_process;


  d9_p_0 <= d9_p(0);


  d_neg_21_gen: FOR t_020 IN 0 TO 2 GENERATE
    d_neg_in0_10(t_020) <=  - (resize(d9_p(t_020), 20));
    d_neg_21(t_020) <= d_neg_in0_10(t_020)(18 DOWNTO 0);
  END GENERATE d_neg_21_gen;


  rMSBit_1_16 <= rMSBit_10(1);

  rMSBit_1_17 <=  NOT rMSBit_1_16;

  
  switch_compare_2_10 <= '1' WHEN rMSBit_1_17 > '0' ELSE
      '0';

  d9_p_1 <= d9_p(1);

  rMSBit_2_16 <= rMSBit_10(2);

  rMSBit_2_17 <=  NOT rMSBit_2_16;

  
  switch_compare_3_10 <= '1' WHEN rMSBit_2_17 > '0' ELSE
      '0';

  d9_p_2 <= d9_p(2);


  rMSBits_9_gen: FOR k47 IN 0 TO 2 GENERATE
    rMSBits_9(k47) <= unsigned(r9_p(k47)(35 DOWNTO 17));
  END GENERATE rMSBits_9_gen;



  x_9_gen: FOR ii24 IN 0 TO 2 GENERATE
    x_9(ii24) <= signed(rMSBits_9(ii24));
  END GENERATE x_9_gen;


  d_neg_0_8 <= d_neg_21(0);

  
  y_0_8 <= d9_p_0 WHEN switch_compare_1_11 = '0' ELSE
      d_neg_0_8;

  d_neg_1_9 <= d_neg_21(1);

  
  y_1_9 <= d9_p_1 WHEN switch_compare_2_10 = '0' ELSE
      d_neg_1_9;

  d_neg_2_9 <= d_neg_21(2);

  
  y_2_9 <= d9_p_2 WHEN switch_compare_3_10 = '0' ELSE
      d_neg_2_9;

  y_35(0) <= y_0_8;
  y_35(1) <= y_1_9;
  y_35(2) <= y_2_9;


  temp_11_gen: FOR t_021 IN 0 TO 2 GENERATE
    temp_11(t_021) <= x_9(t_021) + y_35(t_021);
  END GENERATE temp_11_gen;



  rMSBNextBits_11_gen: FOR k48 IN 0 TO 2 GENERATE
    rMSBNextBits_11(k48) <= unsigned(temp_11(k48)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_11_gen;


  rMSBNextBits_0_9 <= rMSBNextBits_11(0);


  rLSBits_11_gen: FOR k49 IN 0 TO 2 GENERATE
    rLSBits_11(k49) <= unsigned(r9_p(k49)(16 DOWNTO 0));
  END GENERATE rLSBits_11_gen;



  tempSignBit_11_gen: FOR k50 IN 0 TO 2 GENERATE
    tempSignBit_11(k50) <= temp_11(k50)(17);
  END GENERATE tempSignBit_11_gen;


  rLSBits_0_9 <= rLSBits_11(0);

  tempSignBit_0_18 <= tempSignBit_11(0);

  tempSignBit_0_19 <=  NOT tempSignBit_0_18;

  rMSBNextBits_1_9 <= rMSBNextBits_11(1);

  rLSBits_1_9 <= rLSBits_11(1);

  tempSignBit_1_18 <= tempSignBit_11(1);

  tempSignBit_1_19 <=  NOT tempSignBit_1_18;

  rMSBNextBits_2_9 <= rMSBNextBits_11(2);

  rLSBits_2_9 <= rLSBits_11(2);

  tempSignBit_2_18 <= tempSignBit_11(2);

  tempSignBit_2_19 <=  NOT tempSignBit_2_18;

  rNextTemp_9(0) <= rMSBNextBits_0_9 & rLSBits_0_9 & tempSignBit_0_19;
  rNextTemp_9(1) <= rMSBNextBits_1_9 & rLSBits_1_9 & tempSignBit_1_19;
  rNextTemp_9(2) <= rMSBNextBits_2_9 & rLSBits_2_9 & tempSignBit_2_19;


  r10_gen: FOR ii25 IN 0 TO 2 GENERATE
    r10(ii25) <= signed(rNextTemp_9(ii25));
  END GENERATE r10_gen;


  r_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r10_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r10_p <= r10;
      END IF;
    END IF;
  END PROCESS r_reg_9_process;



  rMSBit_11_gen: FOR k51 IN 0 TO 2 GENERATE
    rMSBit_11(k51) <= r10_p(k51)(35);
  END GENERATE rMSBit_11_gen;


  rMSBit_0_18 <= rMSBit_11(0);

  rMSBit_0_19 <=  NOT rMSBit_0_18;

  
  switch_compare_1_12 <= '1' WHEN rMSBit_0_19 > '0' ELSE
      '0';

  d_reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d10_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d10_p <= d9_p;
      END IF;
    END IF;
  END PROCESS d_reg_9_process;


  d10_p_0 <= d10_p(0);


  d_neg_23_gen: FOR t_022 IN 0 TO 2 GENERATE
    d_neg_in0_11(t_022) <=  - (resize(d10_p(t_022), 20));
    d_neg_23(t_022) <= d_neg_in0_11(t_022)(18 DOWNTO 0);
  END GENERATE d_neg_23_gen;


  rMSBit_1_18 <= rMSBit_11(1);

  rMSBit_1_19 <=  NOT rMSBit_1_18;

  
  switch_compare_2_11 <= '1' WHEN rMSBit_1_19 > '0' ELSE
      '0';

  d10_p_1 <= d10_p(1);

  rMSBit_2_18 <= rMSBit_11(2);

  rMSBit_2_19 <=  NOT rMSBit_2_18;

  
  switch_compare_3_11 <= '1' WHEN rMSBit_2_19 > '0' ELSE
      '0';

  d10_p_2 <= d10_p(2);


  rMSBits_10_gen: FOR k52 IN 0 TO 2 GENERATE
    rMSBits_10(k52) <= unsigned(r10_p(k52)(35 DOWNTO 17));
  END GENERATE rMSBits_10_gen;



  x_10_gen: FOR ii26 IN 0 TO 2 GENERATE
    x_10(ii26) <= signed(rMSBits_10(ii26));
  END GENERATE x_10_gen;


  d_neg_0_9 <= d_neg_23(0);

  
  y_0_9 <= d10_p_0 WHEN switch_compare_1_12 = '0' ELSE
      d_neg_0_9;

  d_neg_1_10 <= d_neg_23(1);

  
  y_1_10 <= d10_p_1 WHEN switch_compare_2_11 = '0' ELSE
      d_neg_1_10;

  d_neg_2_10 <= d_neg_23(2);

  
  y_2_10 <= d10_p_2 WHEN switch_compare_3_11 = '0' ELSE
      d_neg_2_10;

  y_39(0) <= y_0_9;
  y_39(1) <= y_1_10;
  y_39(2) <= y_2_10;


  temp_12_gen: FOR t_023 IN 0 TO 2 GENERATE
    temp_12(t_023) <= x_10(t_023) + y_39(t_023);
  END GENERATE temp_12_gen;



  rMSBNextBits_12_gen: FOR k53 IN 0 TO 2 GENERATE
    rMSBNextBits_12(k53) <= unsigned(temp_12(k53)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_12_gen;


  rMSBNextBits_0_10 <= rMSBNextBits_12(0);


  rLSBits_12_gen: FOR k54 IN 0 TO 2 GENERATE
    rLSBits_12(k54) <= unsigned(r10_p(k54)(16 DOWNTO 0));
  END GENERATE rLSBits_12_gen;



  tempSignBit_12_gen: FOR k55 IN 0 TO 2 GENERATE
    tempSignBit_12(k55) <= temp_12(k55)(17);
  END GENERATE tempSignBit_12_gen;


  rLSBits_0_10 <= rLSBits_12(0);

  tempSignBit_0_20 <= tempSignBit_12(0);

  tempSignBit_0_21 <=  NOT tempSignBit_0_20;

  rMSBNextBits_1_10 <= rMSBNextBits_12(1);

  rLSBits_1_10 <= rLSBits_12(1);

  tempSignBit_1_20 <= tempSignBit_12(1);

  tempSignBit_1_21 <=  NOT tempSignBit_1_20;

  rMSBNextBits_2_10 <= rMSBNextBits_12(2);

  rLSBits_2_10 <= rLSBits_12(2);

  tempSignBit_2_20 <= tempSignBit_12(2);

  tempSignBit_2_21 <=  NOT tempSignBit_2_20;

  rNextTemp_10(0) <= rMSBNextBits_0_10 & rLSBits_0_10 & tempSignBit_0_21;
  rNextTemp_10(1) <= rMSBNextBits_1_10 & rLSBits_1_10 & tempSignBit_1_21;
  rNextTemp_10(2) <= rMSBNextBits_2_10 & rLSBits_2_10 & tempSignBit_2_21;


  r11_gen: FOR ii27 IN 0 TO 2 GENERATE
    r11(ii27) <= signed(rNextTemp_10(ii27));
  END GENERATE r11_gen;


  r_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r11_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r11_p <= r11;
      END IF;
    END IF;
  END PROCESS r_reg_10_process;



  rMSBit_12_gen: FOR k56 IN 0 TO 2 GENERATE
    rMSBit_12(k56) <= r11_p(k56)(35);
  END GENERATE rMSBit_12_gen;


  rMSBit_0_20 <= rMSBit_12(0);

  rMSBit_0_21 <=  NOT rMSBit_0_20;

  
  switch_compare_1_13 <= '1' WHEN rMSBit_0_21 > '0' ELSE
      '0';

  d_reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d11_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d11_p <= d10_p;
      END IF;
    END IF;
  END PROCESS d_reg_10_process;


  d11_p_0 <= d11_p(0);


  d_neg_25_gen: FOR t_024 IN 0 TO 2 GENERATE
    d_neg_in0_12(t_024) <=  - (resize(d11_p(t_024), 20));
    d_neg_25(t_024) <= d_neg_in0_12(t_024)(18 DOWNTO 0);
  END GENERATE d_neg_25_gen;


  rMSBit_1_20 <= rMSBit_12(1);

  rMSBit_1_21 <=  NOT rMSBit_1_20;

  
  switch_compare_2_12 <= '1' WHEN rMSBit_1_21 > '0' ELSE
      '0';

  d11_p_1 <= d11_p(1);

  rMSBit_2_20 <= rMSBit_12(2);

  rMSBit_2_21 <=  NOT rMSBit_2_20;

  
  switch_compare_3_12 <= '1' WHEN rMSBit_2_21 > '0' ELSE
      '0';

  d11_p_2 <= d11_p(2);


  rMSBits_11_gen: FOR k57 IN 0 TO 2 GENERATE
    rMSBits_11(k57) <= unsigned(r11_p(k57)(35 DOWNTO 17));
  END GENERATE rMSBits_11_gen;



  x_11_gen: FOR ii28 IN 0 TO 2 GENERATE
    x_11(ii28) <= signed(rMSBits_11(ii28));
  END GENERATE x_11_gen;


  d_neg_0_10 <= d_neg_25(0);

  
  y_0_10 <= d11_p_0 WHEN switch_compare_1_13 = '0' ELSE
      d_neg_0_10;

  d_neg_1_11 <= d_neg_25(1);

  
  y_1_11 <= d11_p_1 WHEN switch_compare_2_12 = '0' ELSE
      d_neg_1_11;

  d_neg_2_11 <= d_neg_25(2);

  
  y_2_11 <= d11_p_2 WHEN switch_compare_3_12 = '0' ELSE
      d_neg_2_11;

  y_43(0) <= y_0_10;
  y_43(1) <= y_1_11;
  y_43(2) <= y_2_11;


  temp_13_gen: FOR t_025 IN 0 TO 2 GENERATE
    temp_13(t_025) <= x_11(t_025) + y_43(t_025);
  END GENERATE temp_13_gen;



  rMSBNextBits_13_gen: FOR k58 IN 0 TO 2 GENERATE
    rMSBNextBits_13(k58) <= unsigned(temp_13(k58)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_13_gen;


  rMSBNextBits_0_11 <= rMSBNextBits_13(0);


  rLSBits_13_gen: FOR k59 IN 0 TO 2 GENERATE
    rLSBits_13(k59) <= unsigned(r11_p(k59)(16 DOWNTO 0));
  END GENERATE rLSBits_13_gen;



  tempSignBit_13_gen: FOR k60 IN 0 TO 2 GENERATE
    tempSignBit_13(k60) <= temp_13(k60)(17);
  END GENERATE tempSignBit_13_gen;


  rLSBits_0_11 <= rLSBits_13(0);

  tempSignBit_0_22 <= tempSignBit_13(0);

  tempSignBit_0_23 <=  NOT tempSignBit_0_22;

  rMSBNextBits_1_11 <= rMSBNextBits_13(1);

  rLSBits_1_11 <= rLSBits_13(1);

  tempSignBit_1_22 <= tempSignBit_13(1);

  tempSignBit_1_23 <=  NOT tempSignBit_1_22;

  rMSBNextBits_2_11 <= rMSBNextBits_13(2);

  rLSBits_2_11 <= rLSBits_13(2);

  tempSignBit_2_22 <= tempSignBit_13(2);

  tempSignBit_2_23 <=  NOT tempSignBit_2_22;

  rNextTemp_11(0) <= rMSBNextBits_0_11 & rLSBits_0_11 & tempSignBit_0_23;
  rNextTemp_11(1) <= rMSBNextBits_1_11 & rLSBits_1_11 & tempSignBit_1_23;
  rNextTemp_11(2) <= rMSBNextBits_2_11 & rLSBits_2_11 & tempSignBit_2_23;


  r12_gen: FOR ii29 IN 0 TO 2 GENERATE
    r12(ii29) <= signed(rNextTemp_11(ii29));
  END GENERATE r12_gen;


  r_reg_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r12_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r12_p <= r12;
      END IF;
    END IF;
  END PROCESS r_reg_11_process;



  rMSBit_13_gen: FOR k61 IN 0 TO 2 GENERATE
    rMSBit_13(k61) <= r12_p(k61)(35);
  END GENERATE rMSBit_13_gen;


  rMSBit_0_22 <= rMSBit_13(0);

  rMSBit_0_23 <=  NOT rMSBit_0_22;

  
  switch_compare_1_14 <= '1' WHEN rMSBit_0_23 > '0' ELSE
      '0';

  d_reg_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d12_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d12_p <= d11_p;
      END IF;
    END IF;
  END PROCESS d_reg_11_process;


  d12_p_0 <= d12_p(0);


  d_neg_27_gen: FOR t_026 IN 0 TO 2 GENERATE
    d_neg_in0_13(t_026) <=  - (resize(d12_p(t_026), 20));
    d_neg_27(t_026) <= d_neg_in0_13(t_026)(18 DOWNTO 0);
  END GENERATE d_neg_27_gen;


  rMSBit_1_22 <= rMSBit_13(1);

  rMSBit_1_23 <=  NOT rMSBit_1_22;

  
  switch_compare_2_13 <= '1' WHEN rMSBit_1_23 > '0' ELSE
      '0';

  d12_p_1 <= d12_p(1);

  rMSBit_2_22 <= rMSBit_13(2);

  rMSBit_2_23 <=  NOT rMSBit_2_22;

  
  switch_compare_3_13 <= '1' WHEN rMSBit_2_23 > '0' ELSE
      '0';

  d12_p_2 <= d12_p(2);


  rMSBits_12_gen: FOR k62 IN 0 TO 2 GENERATE
    rMSBits_12(k62) <= unsigned(r12_p(k62)(35 DOWNTO 17));
  END GENERATE rMSBits_12_gen;



  x_12_gen: FOR ii30 IN 0 TO 2 GENERATE
    x_12(ii30) <= signed(rMSBits_12(ii30));
  END GENERATE x_12_gen;


  d_neg_0_11 <= d_neg_27(0);

  
  y_0_11 <= d12_p_0 WHEN switch_compare_1_14 = '0' ELSE
      d_neg_0_11;

  d_neg_1_12 <= d_neg_27(1);

  
  y_1_12 <= d12_p_1 WHEN switch_compare_2_13 = '0' ELSE
      d_neg_1_12;

  d_neg_2_12 <= d_neg_27(2);

  
  y_2_12 <= d12_p_2 WHEN switch_compare_3_13 = '0' ELSE
      d_neg_2_12;

  y_47(0) <= y_0_11;
  y_47(1) <= y_1_12;
  y_47(2) <= y_2_12;


  temp_14_gen: FOR t_027 IN 0 TO 2 GENERATE
    temp_14(t_027) <= x_12(t_027) + y_47(t_027);
  END GENERATE temp_14_gen;



  rMSBNextBits_14_gen: FOR k63 IN 0 TO 2 GENERATE
    rMSBNextBits_14(k63) <= unsigned(temp_14(k63)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_14_gen;


  rMSBNextBits_0_12 <= rMSBNextBits_14(0);


  rLSBits_14_gen: FOR k64 IN 0 TO 2 GENERATE
    rLSBits_14(k64) <= unsigned(r12_p(k64)(16 DOWNTO 0));
  END GENERATE rLSBits_14_gen;



  tempSignBit_14_gen: FOR k65 IN 0 TO 2 GENERATE
    tempSignBit_14(k65) <= temp_14(k65)(17);
  END GENERATE tempSignBit_14_gen;


  rLSBits_0_12 <= rLSBits_14(0);

  tempSignBit_0_24 <= tempSignBit_14(0);

  tempSignBit_0_25 <=  NOT tempSignBit_0_24;

  rMSBNextBits_1_12 <= rMSBNextBits_14(1);

  rLSBits_1_12 <= rLSBits_14(1);

  tempSignBit_1_24 <= tempSignBit_14(1);

  tempSignBit_1_25 <=  NOT tempSignBit_1_24;

  rMSBNextBits_2_12 <= rMSBNextBits_14(2);

  rLSBits_2_12 <= rLSBits_14(2);

  tempSignBit_2_24 <= tempSignBit_14(2);

  tempSignBit_2_25 <=  NOT tempSignBit_2_24;

  rNextTemp_12(0) <= rMSBNextBits_0_12 & rLSBits_0_12 & tempSignBit_0_25;
  rNextTemp_12(1) <= rMSBNextBits_1_12 & rLSBits_1_12 & tempSignBit_1_25;
  rNextTemp_12(2) <= rMSBNextBits_2_12 & rLSBits_2_12 & tempSignBit_2_25;


  r13_gen: FOR ii31 IN 0 TO 2 GENERATE
    r13(ii31) <= signed(rNextTemp_12(ii31));
  END GENERATE r13_gen;


  r_reg_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r13_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r13_p <= r13;
      END IF;
    END IF;
  END PROCESS r_reg_12_process;



  rMSBit_14_gen: FOR k66 IN 0 TO 2 GENERATE
    rMSBit_14(k66) <= r13_p(k66)(35);
  END GENERATE rMSBit_14_gen;


  rMSBit_0_24 <= rMSBit_14(0);

  rMSBit_0_25 <=  NOT rMSBit_0_24;

  
  switch_compare_1_15 <= '1' WHEN rMSBit_0_25 > '0' ELSE
      '0';

  d_reg_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d13_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d13_p <= d12_p;
      END IF;
    END IF;
  END PROCESS d_reg_12_process;


  d13_p_0 <= d13_p(0);


  d_neg_29_gen: FOR t_028 IN 0 TO 2 GENERATE
    d_neg_in0_14(t_028) <=  - (resize(d13_p(t_028), 20));
    d_neg_29(t_028) <= d_neg_in0_14(t_028)(18 DOWNTO 0);
  END GENERATE d_neg_29_gen;


  rMSBit_1_24 <= rMSBit_14(1);

  rMSBit_1_25 <=  NOT rMSBit_1_24;

  
  switch_compare_2_14 <= '1' WHEN rMSBit_1_25 > '0' ELSE
      '0';

  d13_p_1 <= d13_p(1);

  rMSBit_2_24 <= rMSBit_14(2);

  rMSBit_2_25 <=  NOT rMSBit_2_24;

  
  switch_compare_3_14 <= '1' WHEN rMSBit_2_25 > '0' ELSE
      '0';

  d13_p_2 <= d13_p(2);


  rMSBits_13_gen: FOR k67 IN 0 TO 2 GENERATE
    rMSBits_13(k67) <= unsigned(r13_p(k67)(35 DOWNTO 17));
  END GENERATE rMSBits_13_gen;



  x_13_gen: FOR ii32 IN 0 TO 2 GENERATE
    x_13(ii32) <= signed(rMSBits_13(ii32));
  END GENERATE x_13_gen;


  d_neg_0_12 <= d_neg_29(0);

  
  y_0_12 <= d13_p_0 WHEN switch_compare_1_15 = '0' ELSE
      d_neg_0_12;

  d_neg_1_13 <= d_neg_29(1);

  
  y_1_13 <= d13_p_1 WHEN switch_compare_2_14 = '0' ELSE
      d_neg_1_13;

  d_neg_2_13 <= d_neg_29(2);

  
  y_2_13 <= d13_p_2 WHEN switch_compare_3_14 = '0' ELSE
      d_neg_2_13;

  y_51(0) <= y_0_12;
  y_51(1) <= y_1_13;
  y_51(2) <= y_2_13;


  temp_15_gen: FOR t_029 IN 0 TO 2 GENERATE
    temp_15(t_029) <= x_13(t_029) + y_51(t_029);
  END GENERATE temp_15_gen;



  rMSBNextBits_15_gen: FOR k68 IN 0 TO 2 GENERATE
    rMSBNextBits_15(k68) <= unsigned(temp_15(k68)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_15_gen;


  rMSBNextBits_0_13 <= rMSBNextBits_15(0);


  rLSBits_15_gen: FOR k69 IN 0 TO 2 GENERATE
    rLSBits_15(k69) <= unsigned(r13_p(k69)(16 DOWNTO 0));
  END GENERATE rLSBits_15_gen;



  tempSignBit_15_gen: FOR k70 IN 0 TO 2 GENERATE
    tempSignBit_15(k70) <= temp_15(k70)(17);
  END GENERATE tempSignBit_15_gen;


  rLSBits_0_13 <= rLSBits_15(0);

  tempSignBit_0_26 <= tempSignBit_15(0);

  tempSignBit_0_27 <=  NOT tempSignBit_0_26;

  rMSBNextBits_1_13 <= rMSBNextBits_15(1);

  rLSBits_1_13 <= rLSBits_15(1);

  tempSignBit_1_26 <= tempSignBit_15(1);

  tempSignBit_1_27 <=  NOT tempSignBit_1_26;

  rMSBNextBits_2_13 <= rMSBNextBits_15(2);

  rLSBits_2_13 <= rLSBits_15(2);

  tempSignBit_2_26 <= tempSignBit_15(2);

  tempSignBit_2_27 <=  NOT tempSignBit_2_26;

  rNextTemp_13(0) <= rMSBNextBits_0_13 & rLSBits_0_13 & tempSignBit_0_27;
  rNextTemp_13(1) <= rMSBNextBits_1_13 & rLSBits_1_13 & tempSignBit_1_27;
  rNextTemp_13(2) <= rMSBNextBits_2_13 & rLSBits_2_13 & tempSignBit_2_27;


  r14_gen: FOR ii33 IN 0 TO 2 GENERATE
    r14(ii33) <= signed(rNextTemp_13(ii33));
  END GENERATE r14_gen;


  r_reg_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r14_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r14_p <= r14;
      END IF;
    END IF;
  END PROCESS r_reg_13_process;



  rMSBit_15_gen: FOR k71 IN 0 TO 2 GENERATE
    rMSBit_15(k71) <= r14_p(k71)(35);
  END GENERATE rMSBit_15_gen;


  rMSBit_0_26 <= rMSBit_15(0);

  rMSBit_0_27 <=  NOT rMSBit_0_26;

  
  switch_compare_1_16 <= '1' WHEN rMSBit_0_27 > '0' ELSE
      '0';

  d_reg_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d14_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d14_p <= d13_p;
      END IF;
    END IF;
  END PROCESS d_reg_13_process;


  d14_p_0 <= d14_p(0);


  d_neg_31_gen: FOR t_030 IN 0 TO 2 GENERATE
    d_neg_in0_15(t_030) <=  - (resize(d14_p(t_030), 20));
    d_neg_31(t_030) <= d_neg_in0_15(t_030)(18 DOWNTO 0);
  END GENERATE d_neg_31_gen;


  rMSBit_1_26 <= rMSBit_15(1);

  rMSBit_1_27 <=  NOT rMSBit_1_26;

  
  switch_compare_2_15 <= '1' WHEN rMSBit_1_27 > '0' ELSE
      '0';

  d14_p_1 <= d14_p(1);

  rMSBit_2_26 <= rMSBit_15(2);

  rMSBit_2_27 <=  NOT rMSBit_2_26;

  
  switch_compare_3_15 <= '1' WHEN rMSBit_2_27 > '0' ELSE
      '0';

  d14_p_2 <= d14_p(2);


  rMSBits_14_gen: FOR k72 IN 0 TO 2 GENERATE
    rMSBits_14(k72) <= unsigned(r14_p(k72)(35 DOWNTO 17));
  END GENERATE rMSBits_14_gen;



  x_14_gen: FOR ii34 IN 0 TO 2 GENERATE
    x_14(ii34) <= signed(rMSBits_14(ii34));
  END GENERATE x_14_gen;


  d_neg_0_13 <= d_neg_31(0);

  
  y_0_13 <= d14_p_0 WHEN switch_compare_1_16 = '0' ELSE
      d_neg_0_13;

  d_neg_1_14 <= d_neg_31(1);

  
  y_1_14 <= d14_p_1 WHEN switch_compare_2_15 = '0' ELSE
      d_neg_1_14;

  d_neg_2_14 <= d_neg_31(2);

  
  y_2_14 <= d14_p_2 WHEN switch_compare_3_15 = '0' ELSE
      d_neg_2_14;

  y_55(0) <= y_0_13;
  y_55(1) <= y_1_14;
  y_55(2) <= y_2_14;


  temp_16_gen: FOR t_031 IN 0 TO 2 GENERATE
    temp_16(t_031) <= x_14(t_031) + y_55(t_031);
  END GENERATE temp_16_gen;



  rMSBNextBits_16_gen: FOR k73 IN 0 TO 2 GENERATE
    rMSBNextBits_16(k73) <= unsigned(temp_16(k73)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_16_gen;


  rMSBNextBits_0_14 <= rMSBNextBits_16(0);


  rLSBits_16_gen: FOR k74 IN 0 TO 2 GENERATE
    rLSBits_16(k74) <= unsigned(r14_p(k74)(16 DOWNTO 0));
  END GENERATE rLSBits_16_gen;



  tempSignBit_16_gen: FOR k75 IN 0 TO 2 GENERATE
    tempSignBit_16(k75) <= temp_16(k75)(17);
  END GENERATE tempSignBit_16_gen;


  rLSBits_0_14 <= rLSBits_16(0);

  tempSignBit_0_28 <= tempSignBit_16(0);

  tempSignBit_0_29 <=  NOT tempSignBit_0_28;

  rMSBNextBits_1_14 <= rMSBNextBits_16(1);

  rLSBits_1_14 <= rLSBits_16(1);

  tempSignBit_1_28 <= tempSignBit_16(1);

  tempSignBit_1_29 <=  NOT tempSignBit_1_28;

  rMSBNextBits_2_14 <= rMSBNextBits_16(2);

  rLSBits_2_14 <= rLSBits_16(2);

  tempSignBit_2_28 <= tempSignBit_16(2);

  tempSignBit_2_29 <=  NOT tempSignBit_2_28;

  rNextTemp_14(0) <= rMSBNextBits_0_14 & rLSBits_0_14 & tempSignBit_0_29;
  rNextTemp_14(1) <= rMSBNextBits_1_14 & rLSBits_1_14 & tempSignBit_1_29;
  rNextTemp_14(2) <= rMSBNextBits_2_14 & rLSBits_2_14 & tempSignBit_2_29;


  r15_gen: FOR ii35 IN 0 TO 2 GENERATE
    r15(ii35) <= signed(rNextTemp_14(ii35));
  END GENERATE r15_gen;


  r_reg_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r15_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r15_p <= r15;
      END IF;
    END IF;
  END PROCESS r_reg_14_process;



  rMSBit_16_gen: FOR k76 IN 0 TO 2 GENERATE
    rMSBit_16(k76) <= r15_p(k76)(35);
  END GENERATE rMSBit_16_gen;


  rMSBit_0_28 <= rMSBit_16(0);

  rMSBit_0_29 <=  NOT rMSBit_0_28;

  
  switch_compare_1_17 <= '1' WHEN rMSBit_0_29 > '0' ELSE
      '0';

  d_reg_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d15_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d15_p <= d14_p;
      END IF;
    END IF;
  END PROCESS d_reg_14_process;


  d15_p_0 <= d15_p(0);


  d_neg_33_gen: FOR t_032 IN 0 TO 2 GENERATE
    d_neg_in0_16(t_032) <=  - (resize(d15_p(t_032), 20));
    d_neg_33(t_032) <= d_neg_in0_16(t_032)(18 DOWNTO 0);
  END GENERATE d_neg_33_gen;


  rMSBit_1_28 <= rMSBit_16(1);

  rMSBit_1_29 <=  NOT rMSBit_1_28;

  
  switch_compare_2_16 <= '1' WHEN rMSBit_1_29 > '0' ELSE
      '0';

  d15_p_1 <= d15_p(1);

  rMSBit_2_28 <= rMSBit_16(2);

  rMSBit_2_29 <=  NOT rMSBit_2_28;

  
  switch_compare_3_16 <= '1' WHEN rMSBit_2_29 > '0' ELSE
      '0';

  d15_p_2 <= d15_p(2);


  rMSBits_15_gen: FOR k77 IN 0 TO 2 GENERATE
    rMSBits_15(k77) <= unsigned(r15_p(k77)(35 DOWNTO 17));
  END GENERATE rMSBits_15_gen;



  x_15_gen: FOR ii36 IN 0 TO 2 GENERATE
    x_15(ii36) <= signed(rMSBits_15(ii36));
  END GENERATE x_15_gen;


  d_neg_0_14 <= d_neg_33(0);

  
  y_0_14 <= d15_p_0 WHEN switch_compare_1_17 = '0' ELSE
      d_neg_0_14;

  d_neg_1_15 <= d_neg_33(1);

  
  y_1_15 <= d15_p_1 WHEN switch_compare_2_16 = '0' ELSE
      d_neg_1_15;

  d_neg_2_15 <= d_neg_33(2);

  
  y_2_15 <= d15_p_2 WHEN switch_compare_3_16 = '0' ELSE
      d_neg_2_15;

  y_59(0) <= y_0_14;
  y_59(1) <= y_1_15;
  y_59(2) <= y_2_15;


  temp_17_gen: FOR t_033 IN 0 TO 2 GENERATE
    temp_17(t_033) <= x_15(t_033) + y_59(t_033);
  END GENERATE temp_17_gen;



  rMSBNextBits_17_gen: FOR k78 IN 0 TO 2 GENERATE
    rMSBNextBits_17(k78) <= unsigned(temp_17(k78)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_17_gen;


  rMSBNextBits_0_15 <= rMSBNextBits_17(0);


  rLSBits_17_gen: FOR k79 IN 0 TO 2 GENERATE
    rLSBits_17(k79) <= unsigned(r15_p(k79)(16 DOWNTO 0));
  END GENERATE rLSBits_17_gen;



  tempSignBit_17_gen: FOR k80 IN 0 TO 2 GENERATE
    tempSignBit_17(k80) <= temp_17(k80)(17);
  END GENERATE tempSignBit_17_gen;


  rLSBits_0_15 <= rLSBits_17(0);

  tempSignBit_0_30 <= tempSignBit_17(0);

  tempSignBit_0_31 <=  NOT tempSignBit_0_30;

  rMSBNextBits_1_15 <= rMSBNextBits_17(1);

  rLSBits_1_15 <= rLSBits_17(1);

  tempSignBit_1_30 <= tempSignBit_17(1);

  tempSignBit_1_31 <=  NOT tempSignBit_1_30;

  rMSBNextBits_2_15 <= rMSBNextBits_17(2);

  rLSBits_2_15 <= rLSBits_17(2);

  tempSignBit_2_30 <= tempSignBit_17(2);

  tempSignBit_2_31 <=  NOT tempSignBit_2_30;

  rNextTemp_15(0) <= rMSBNextBits_0_15 & rLSBits_0_15 & tempSignBit_0_31;
  rNextTemp_15(1) <= rMSBNextBits_1_15 & rLSBits_1_15 & tempSignBit_1_31;
  rNextTemp_15(2) <= rMSBNextBits_2_15 & rLSBits_2_15 & tempSignBit_2_31;


  r16_gen: FOR ii37 IN 0 TO 2 GENERATE
    r16(ii37) <= signed(rNextTemp_15(ii37));
  END GENERATE r16_gen;


  r_reg_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r16_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r16_p <= r16;
      END IF;
    END IF;
  END PROCESS r_reg_15_process;



  rMSBit_17_gen: FOR k81 IN 0 TO 2 GENERATE
    rMSBit_17(k81) <= r16_p(k81)(35);
  END GENERATE rMSBit_17_gen;


  rMSBit_0_30 <= rMSBit_17(0);

  rMSBit_0_31 <=  NOT rMSBit_0_30;

  
  switch_compare_1_18 <= '1' WHEN rMSBit_0_31 > '0' ELSE
      '0';

  d_reg_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d16_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d16_p <= d15_p;
      END IF;
    END IF;
  END PROCESS d_reg_15_process;


  d16_p_0 <= d16_p(0);


  d_neg_35_gen: FOR t_034 IN 0 TO 2 GENERATE
    d_neg_in0_17(t_034) <=  - (resize(d16_p(t_034), 20));
    d_neg_35(t_034) <= d_neg_in0_17(t_034)(18 DOWNTO 0);
  END GENERATE d_neg_35_gen;


  rMSBit_1_30 <= rMSBit_17(1);

  rMSBit_1_31 <=  NOT rMSBit_1_30;

  
  switch_compare_2_17 <= '1' WHEN rMSBit_1_31 > '0' ELSE
      '0';

  d16_p_1 <= d16_p(1);

  rMSBit_2_30 <= rMSBit_17(2);

  rMSBit_2_31 <=  NOT rMSBit_2_30;

  
  switch_compare_3_17 <= '1' WHEN rMSBit_2_31 > '0' ELSE
      '0';

  d16_p_2 <= d16_p(2);


  rMSBits_16_gen: FOR k82 IN 0 TO 2 GENERATE
    rMSBits_16(k82) <= unsigned(r16_p(k82)(35 DOWNTO 17));
  END GENERATE rMSBits_16_gen;



  x_16_gen: FOR ii38 IN 0 TO 2 GENERATE
    x_16(ii38) <= signed(rMSBits_16(ii38));
  END GENERATE x_16_gen;


  d_neg_0_15 <= d_neg_35(0);

  
  y_0_15 <= d16_p_0 WHEN switch_compare_1_18 = '0' ELSE
      d_neg_0_15;

  d_neg_1_16 <= d_neg_35(1);

  
  y_1_16 <= d16_p_1 WHEN switch_compare_2_17 = '0' ELSE
      d_neg_1_16;

  d_neg_2_16 <= d_neg_35(2);

  
  y_2_16 <= d16_p_2 WHEN switch_compare_3_17 = '0' ELSE
      d_neg_2_16;

  y_63(0) <= y_0_15;
  y_63(1) <= y_1_16;
  y_63(2) <= y_2_16;


  temp_18_gen: FOR t_035 IN 0 TO 2 GENERATE
    temp_18(t_035) <= x_16(t_035) + y_63(t_035);
  END GENERATE temp_18_gen;



  rMSBNextBits_18_gen: FOR k83 IN 0 TO 2 GENERATE
    rMSBNextBits_18(k83) <= unsigned(temp_18(k83)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_18_gen;


  rMSBNextBits_0_16 <= rMSBNextBits_18(0);


  rLSBits_18_gen: FOR k84 IN 0 TO 2 GENERATE
    rLSBits_18(k84) <= unsigned(r16_p(k84)(16 DOWNTO 0));
  END GENERATE rLSBits_18_gen;



  tempSignBit_18_gen: FOR k85 IN 0 TO 2 GENERATE
    tempSignBit_18(k85) <= temp_18(k85)(17);
  END GENERATE tempSignBit_18_gen;


  rLSBits_0_16 <= rLSBits_18(0);

  tempSignBit_0_32 <= tempSignBit_18(0);

  tempSignBit_0_33 <=  NOT tempSignBit_0_32;

  rMSBNextBits_1_16 <= rMSBNextBits_18(1);

  rLSBits_1_16 <= rLSBits_18(1);

  tempSignBit_1_32 <= tempSignBit_18(1);

  tempSignBit_1_33 <=  NOT tempSignBit_1_32;

  rMSBNextBits_2_16 <= rMSBNextBits_18(2);

  rLSBits_2_16 <= rLSBits_18(2);

  tempSignBit_2_32 <= tempSignBit_18(2);

  tempSignBit_2_33 <=  NOT tempSignBit_2_32;

  rNextTemp_16(0) <= rMSBNextBits_0_16 & rLSBits_0_16 & tempSignBit_0_33;
  rNextTemp_16(1) <= rMSBNextBits_1_16 & rLSBits_1_16 & tempSignBit_1_33;
  rNextTemp_16(2) <= rMSBNextBits_2_16 & rLSBits_2_16 & tempSignBit_2_33;


  r17_gen: FOR ii39 IN 0 TO 2 GENERATE
    r17(ii39) <= signed(rNextTemp_16(ii39));
  END GENERATE r17_gen;


  r_reg_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r17_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r17_p <= r17;
      END IF;
    END IF;
  END PROCESS r_reg_16_process;



  rMSBit_18_gen: FOR k86 IN 0 TO 2 GENERATE
    rMSBit_18(k86) <= r17_p(k86)(35);
  END GENERATE rMSBit_18_gen;


  rMSBit_0_32 <= rMSBit_18(0);

  rMSBit_0_33 <=  NOT rMSBit_0_32;

  
  switch_compare_1_19 <= '1' WHEN rMSBit_0_33 > '0' ELSE
      '0';

  d_reg_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d17_p <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d17_p <= d16_p;
      END IF;
    END IF;
  END PROCESS d_reg_16_process;


  d17_p_0 <= d17_p(0);


  d_neg_37_gen: FOR t_036 IN 0 TO 2 GENERATE
    d_neg_in0_18(t_036) <=  - (resize(d17_p(t_036), 20));
    d_neg_37(t_036) <= d_neg_in0_18(t_036)(18 DOWNTO 0);
  END GENERATE d_neg_37_gen;


  rMSBit_1_32 <= rMSBit_18(1);

  rMSBit_1_33 <=  NOT rMSBit_1_32;

  
  switch_compare_2_18 <= '1' WHEN rMSBit_1_33 > '0' ELSE
      '0';

  d17_p_1 <= d17_p(1);

  rMSBit_2_32 <= rMSBit_18(2);

  rMSBit_2_33 <=  NOT rMSBit_2_32;

  
  switch_compare_3_18 <= '1' WHEN rMSBit_2_33 > '0' ELSE
      '0';

  d17_p_2 <= d17_p(2);


  rMSBits_17_gen: FOR k87 IN 0 TO 2 GENERATE
    rMSBits_17(k87) <= unsigned(r17_p(k87)(35 DOWNTO 17));
  END GENERATE rMSBits_17_gen;



  x_17_gen: FOR ii40 IN 0 TO 2 GENERATE
    x_17(ii40) <= signed(rMSBits_17(ii40));
  END GENERATE x_17_gen;


  d_neg_0_16 <= d_neg_37(0);

  
  y_0_16 <= d17_p_0 WHEN switch_compare_1_19 = '0' ELSE
      d_neg_0_16;

  d_neg_1_17 <= d_neg_37(1);

  
  y_1_17 <= d17_p_1 WHEN switch_compare_2_18 = '0' ELSE
      d_neg_1_17;

  d_neg_2_17 <= d_neg_37(2);

  
  y_2_17 <= d17_p_2 WHEN switch_compare_3_18 = '0' ELSE
      d_neg_2_17;

  y_67(0) <= y_0_16;
  y_67(1) <= y_1_17;
  y_67(2) <= y_2_17;


  temp_19_gen: FOR t_037 IN 0 TO 2 GENERATE
    temp_19(t_037) <= x_17(t_037) + y_67(t_037);
  END GENERATE temp_19_gen;



  rMSBNextBits_19_gen: FOR k88 IN 0 TO 2 GENERATE
    rMSBNextBits_19(k88) <= unsigned(temp_19(k88)(17 DOWNTO 0));
  END GENERATE rMSBNextBits_19_gen;


  rMSBNextBits_0_17 <= rMSBNextBits_19(0);


  rLSBits_19_gen: FOR k89 IN 0 TO 2 GENERATE
    rLSBits_19(k89) <= unsigned(r17_p(k89)(16 DOWNTO 0));
  END GENERATE rLSBits_19_gen;



  tempSignBit_19_gen: FOR k90 IN 0 TO 2 GENERATE
    tempSignBit_19(k90) <= temp_19(k90)(17);
  END GENERATE tempSignBit_19_gen;


  rLSBits_0_17 <= rLSBits_19(0);

  tempSignBit_0_34 <= tempSignBit_19(0);

  tempSignBit_0_35 <=  NOT tempSignBit_0_34;

  rMSBNextBits_1_17 <= rMSBNextBits_19(1);

  rLSBits_1_17 <= rLSBits_19(1);

  tempSignBit_1_34 <= tempSignBit_19(1);

  tempSignBit_1_35 <=  NOT tempSignBit_1_34;

  rMSBNextBits_2_17 <= rMSBNextBits_19(2);

  rLSBits_2_17 <= rLSBits_19(2);

  tempSignBit_2_34 <= tempSignBit_19(2);

  tempSignBit_2_35 <=  NOT tempSignBit_2_34;

  rNextTemp_17(0) <= rMSBNextBits_0_17 & rLSBits_0_17 & tempSignBit_0_35;
  rNextTemp_17(1) <= rMSBNextBits_1_17 & rLSBits_1_17 & tempSignBit_1_35;
  rNextTemp_17(2) <= rMSBNextBits_2_17 & rLSBits_2_17 & tempSignBit_2_35;


  r18_gen: FOR ii41 IN 0 TO 2 GENERATE
    r18(ii41) <= signed(rNextTemp_17(ii41));
  END GENERATE r18_gen;


  r_reg_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      r18_p <= (OTHERS => to_signed(0, 36));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        r18_p <= r18;
      END IF;
    END IF;
  END PROCESS r_reg_17_process;



  qTemp_gen: FOR k91 IN 0 TO 2 GENERATE
    qTemp(k91) <= unsigned(r18_p(k91)(17 DOWNTO 0));
  END GENERATE qTemp_gen;



  qtempExt_gen: FOR ii42 IN 0 TO 2 GENERATE
    qtempExt(ii42) <= signed(resize(qTemp(ii42), 19));
  END GENERATE qtempExt_gen;


  qtempExt_p_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      qtempExt_p_1 <= (OTHERS => to_signed(16#00000#, 19));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        qtempExt_p_1 <= qtempExt;
      END IF;
    END IF;
  END PROCESS qtempExt_p_process;


  qtempExt_p_0 <= qtempExt_p_1(0);


  qin_neg_post_1_gen: FOR t_038 IN 0 TO 2 GENERATE
    qin_neg_post_in0(t_038) <=  - (resize(qtempExt_p_1(t_038), 20));
    qin_neg_post_1(t_038) <= qin_neg_post_in0(t_038)(18 DOWNTO 0);
  END GENERATE qin_neg_post_1_gen;


  signFlag_p_1_1 <= signFlag_p_1(1);

  
  switch_compare_2_19 <= '1' WHEN signFlag_p_1_1 > '0' ELSE
      '0';

  qtempExt_p_1_1 <= qtempExt_p_1(1);

  signFlag_p_2 <= signFlag_p_1(2);

  
  switch_compare_3_19 <= '1' WHEN signFlag_p_2 > '0' ELSE
      '0';

  qtempExt_p_2 <= qtempExt_p_1(2);

  qin_neg_post_0 <= qin_neg_post_1(0);

  
  qtemp_post_0 <= qtempExt_p_0 WHEN switch_compare_1 = '0' ELSE
      qin_neg_post_0;

  qin_neg_post_1_1 <= qin_neg_post_1(1);

  
  qtemp_post_1 <= qtempExt_p_1_1 WHEN switch_compare_2_19 = '0' ELSE
      qin_neg_post_1_1;

  qin_neg_post_2 <= qin_neg_post_1(2);

  
  qtemp_post_2 <= qtempExt_p_2 WHEN switch_compare_3_19 = '0' ELSE
      qin_neg_post_2;

  qtemp_post(0) <= qtemp_post_0;
  qtemp_post(1) <= qtemp_post_1;
  qtemp_post(2) <= qtemp_post_2;


  sel1_gen: FOR k92 IN 0 TO 2 GENERATE
    sel1(k92) <= qtemp_post(k92)(18);
  END GENERATE sel1_gen;



  sel0_gen: FOR k93 IN 0 TO 2 GENERATE
    sel0(k93) <= qtemp_post(k93)(17);
  END GENERATE sel0_gen;



  sel_gen: FOR k94 IN 0 TO 2 GENERATE
    sel(k94) <= unsigned'(sel1(k94) & sel0(k94));
  END GENERATE sel_gen;


  sel_shift <= sel;

  sel_shift_0 <= sel_shift(0);


  qtemp_dtc_post_1_gen: FOR ii43 IN 0 TO 2 GENERATE
    qtemp_dtc_post_1(ii43) <= qtemp_post(ii43)(17 DOWNTO 0);
  END GENERATE qtemp_dtc_post_1_gen;


  qtemp_dtc_post_0 <= qtemp_dtc_post_1(0);

  ConstantSignalMax_1 <= (OTHERS => to_signed(16#1FFFF#, 18));

  ConstantSignalMax_0 <= ConstantSignalMax_1(0);

  ConstantSignalMin_1 <= (OTHERS => to_signed(-16#20000#, 18));

  ConstantSignalMin_0 <= ConstantSignalMin_1(0);

  initFlagenable_1 <= initFlagenable(1);

  sel_shift_1 <= sel_shift(1);

  qtemp_dtc_post_1_1 <= qtemp_dtc_post_1(1);

  ConstantSignalMax_1_1 <= ConstantSignalMax_1(1);

  ConstantSignalMin_1_1 <= ConstantSignalMin_1(1);

  initFlagenable_2 <= initFlagenable(2);

  sel_shift_2 <= sel_shift(2);

  qtemp_dtc_post_2 <= qtemp_dtc_post_1(2);

  ConstantSignalMax_2 <= ConstantSignalMax_1(2);

  ConstantSignalMin_2 <= ConstantSignalMin_1(2);

  ConstantSignal_0 <= ConstantSignal_1(0);

  qtemp_dtc_post_0_1 <= qtemp_dtc_post_1(0);

  post_q_Multiport_Switch_output : PROCESS (ConstantSignalMax_0, ConstantSignalMin_0, qtemp_dtc_post_0, qtemp_dtc_post_0_1,
       sel_shift_0)
  BEGIN
    CASE sel_shift_0 IS
      WHEN "00" =>
        qtempPost_0 <= qtemp_dtc_post_0;
      WHEN "01" =>
        qtempPost_0 <= ConstantSignalMax_0;
      WHEN "10" =>
        qtempPost_0 <= ConstantSignalMin_0;
      WHEN OTHERS => 
        qtempPost_0 <= qtemp_dtc_post_0_1;
    END CASE;
  END PROCESS post_q_Multiport_Switch_output;


  
  qtempPost_0_1 <= ConstantSignal_0 WHEN initFlagenable_0 = '0' ELSE
      qtempPost_0;

  ConstantSignal_1_1 <= ConstantSignal_1(1);

  qtemp_dtc_post_1_2 <= qtemp_dtc_post_1(1);

  post_q_Multiport_Switch_1_output : PROCESS (ConstantSignalMax_1_1, ConstantSignalMin_1_1, qtemp_dtc_post_1_1,
       qtemp_dtc_post_1_2, sel_shift_1)
  BEGIN
    CASE sel_shift_1 IS
      WHEN "00" =>
        qtempPost_1 <= qtemp_dtc_post_1_1;
      WHEN "01" =>
        qtempPost_1 <= ConstantSignalMax_1_1;
      WHEN "10" =>
        qtempPost_1 <= ConstantSignalMin_1_1;
      WHEN OTHERS => 
        qtempPost_1 <= qtemp_dtc_post_1_2;
    END CASE;
  END PROCESS post_q_Multiport_Switch_1_output;


  
  qtempPost_1_1 <= ConstantSignal_1_1 WHEN initFlagenable_1 = '0' ELSE
      qtempPost_1;

  ConstantSignal_2 <= ConstantSignal_1(2);

  qtemp_dtc_post_2_1 <= qtemp_dtc_post_1(2);

  post_q_Multiport_Switch_2_output : PROCESS (ConstantSignalMax_2, ConstantSignalMin_2, qtemp_dtc_post_2, qtemp_dtc_post_2_1,
       sel_shift_2)
  BEGIN
    CASE sel_shift_2 IS
      WHEN "00" =>
        qtempPost_2 <= qtemp_dtc_post_2;
      WHEN "01" =>
        qtempPost_2 <= ConstantSignalMax_2;
      WHEN "10" =>
        qtempPost_2 <= ConstantSignalMin_2;
      WHEN OTHERS => 
        qtempPost_2 <= qtemp_dtc_post_2_1;
    END CASE;
  END PROCESS post_q_Multiport_Switch_2_output;


  
  qtempPost_2_1 <= ConstantSignal_2 WHEN initFlagenable_2 = '0' ELSE
      qtempPost_2;

  qtempPost(0) <= qtempPost_0_1;
  qtempPost(1) <= qtempPost_1_1;
  qtempPost(2) <= qtempPost_2_1;

  q_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      quotient_tmp <= (OTHERS => to_signed(16#00000#, 18));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        quotient_tmp <= qtempPost;
      END IF;
    END IF;
  END PROCESS q_process;


  outputgen: FOR k95 IN 0 TO 2 GENERATE
    quotient(k95) <= std_logic_vector(quotient_tmp(k95));
  END GENERATE;

END rtl;

