-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\Horizontal_Padder.vhd
-- Created: 2024-12-03 00:37:47
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Horizontal_Padder
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Preprocess/Edge Detector/LineBuffer/Horizontal Padder
-- Hierarchy Level: 4
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ObjectTrackerHDL_pkg.ALL;

ENTITY Horizontal_Padder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataVectorIn                      :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
        horPadCount                       :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
        padShift                          :   IN    std_logic;
        dataVector                        :   OUT   vector_of_std_logic_vector8(0 TO 2)  -- uint8 [3]
        );
END Horizontal_Padder;


ARCHITECTURE rtl OF Horizontal_Padder IS

  -- Signals
  SIGNAL horPadCount_unsigned             : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL dataVectorIn_unsigned            : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL DataMuxIn1                       : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL DataMuxIn1_1                     : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL DataMuxIn2                       : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL intdelay_reg                     : vector_of_unsigned8(0 TO 5);  -- ufix8 [6]
  SIGNAL DataMuxIn3                       : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL intdelay_reg_1                   : vector_of_unsigned8(0 TO 5);  -- ufix8 [6]
  SIGNAL DataMuxIn4                       : vector_of_unsigned8(0 TO 2);  -- uint8 [3]
  SIGNAL dataVector_tmp                   : vector_of_unsigned8(0 TO 2);  -- uint8 [3]

BEGIN
  horPadCount_unsigned <= unsigned(horPadCount);

  outputgen1: FOR k IN 0 TO 2 GENERATE
    dataVectorIn_unsigned(k) <= unsigned(dataVectorIn(k));
  END GENERATE;

  reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      DataMuxIn1 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND padShift = '1' THEN
        DataMuxIn1 <= dataVectorIn_unsigned;
      END IF;
    END IF;
  END PROCESS reg_process;


  reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      DataMuxIn1_1 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND padShift = '1' THEN
        DataMuxIn1_1 <= DataMuxIn1;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      DataMuxIn2 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND padShift = '1' THEN
        DataMuxIn2 <= DataMuxIn1_1;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND padShift = '1' THEN
        intdelay_reg(0 TO 2) <= DataMuxIn2(0 TO 2);
        intdelay_reg(3 TO 5) <= intdelay_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS intdelay_process;

  DataMuxIn3(0 TO 2) <= intdelay_reg(3 TO 5);

  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      intdelay_reg_1 <= (OTHERS => to_unsigned(16#00#, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND padShift = '1' THEN
        intdelay_reg_1(0 TO 2) <= DataMuxIn3(0 TO 2);
        intdelay_reg_1(3 TO 5) <= intdelay_reg_1(0 TO 2);
      END IF;
    END IF;
  END PROCESS intdelay_1_process;

  DataMuxIn4(0 TO 2) <= intdelay_reg_1(3 TO 5);

  mux_output : PROCESS (DataMuxIn1, DataMuxIn1_1, DataMuxIn2, DataMuxIn3, DataMuxIn4,
       horPadCount_unsigned)
  BEGIN
    IF horPadCount_unsigned = to_unsigned(16#000#, 11) THEN 
      dataVector_tmp <= DataMuxIn1;
    ELSIF horPadCount_unsigned = to_unsigned(16#001#, 11) THEN 
      dataVector_tmp <= DataMuxIn1_1;
    ELSIF horPadCount_unsigned = to_unsigned(16#002#, 11) THEN 
      dataVector_tmp <= DataMuxIn2;
    ELSIF horPadCount_unsigned = to_unsigned(16#003#, 11) THEN 
      dataVector_tmp <= DataMuxIn3;
    ELSE 
      dataVector_tmp <= DataMuxIn4;
    END IF;
  END PROCESS mux_output;


  outputgen: FOR k IN 0 TO 2 GENERATE
    dataVector(k) <= std_logic_vector(dataVector_tmp(k));
  END GENERATE;

END rtl;

