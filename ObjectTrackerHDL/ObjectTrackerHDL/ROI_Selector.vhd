-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\ROI_Selector.vhd
-- Created: 2024-12-03 00:37:47
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ROI_Selector
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Preprocess/ROI Selector
-- Hierarchy Level: 2
-- Model version: 3.7
-- 
-- ROI Selector
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ObjectTrackerHDL_pkg.ALL;

ENTITY ROI_Selector IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        in0                               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        in1_hStart                        :   IN    std_logic;
        in1_hEnd                          :   IN    std_logic;
        in1_vStart                        :   IN    std_logic;
        in1_vEnd                          :   IN    std_logic;
        in1_valid                         :   IN    std_logic;
        in2                               :   IN    vector_of_std_logic_vector16(0 TO 3);  -- uint16 [4]
        out0                              :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        out1_hStart                       :   OUT   std_logic;
        out1_hEnd                         :   OUT   std_logic;
        out1_vStart                       :   OUT   std_logic;
        out1_vEnd                         :   OUT   std_logic;
        out1_valid                        :   OUT   std_logic
        );
END ROI_Selector;


ARCHITECTURE rtl OF ROI_Selector IS

  -- Signals
  SIGNAL vEndInReg                        : std_logic;  -- ufix1
  SIGNAL vEndInv                          : std_logic;  -- ufix1
  SIGNAL validInReg                       : std_logic;  -- ufix1
  SIGNAL vStartInReg                      : std_logic;  -- ufix1
  SIGNAL inFrame2Term                     : std_logic;  -- ufix1
  SIGNAL ValidInv                         : std_logic;  -- ufix1
  SIGNAL inFrame                          : std_logic;  -- ufix1
  SIGNAL inFrame3Term                     : std_logic;  -- ufix1
  SIGNAL inFrameNext                      : std_logic;  -- ufix1
  SIGNAL inFrame1Term                     : std_logic;  -- ufix1
  SIGNAL hStartInReg                      : std_logic;  -- ufix1
  SIGNAL hCountInit                       : std_logic;  -- ufix1
  SIGNAL hEndInReg                        : std_logic;  -- ufix1
  SIGNAL hEndInv                          : std_logic;  -- ufix1
  SIGNAL inLine2Term                      : std_logic;  -- ufix1
  SIGNAL inFrameInv                       : std_logic;  -- ufix1
  SIGNAL inLine                           : std_logic;  -- ufix1
  SIGNAL inLineInv                        : std_logic;  -- ufix1
  SIGNAL inLine6Term                      : std_logic;  -- ufix1
  SIGNAL inLine5Term                      : std_logic;  -- ufix1
  SIGNAL inLine4Term                      : std_logic;  -- ufix1
  SIGNAL inLine3Term                      : std_logic;  -- ufix1
  SIGNAL inLineNext                       : std_logic;  -- ufix1
  SIGNAL inLine1Term                      : std_logic;  -- ufix1
  SIGNAL hEn                              : std_logic;  -- ufix1
  SIGNAL hCount                           : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL region1_0                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL conv1XPos                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL hLeft1                           : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL hCompGreaterStart1ROI            : std_logic;  -- ufix1
  SIGNAL region1_2                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL conv1XSize                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL hTemp1Add                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL minusone                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL hRight1Add                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL hRight1                          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL hCompLessThanEnd1ROI             : std_logic;  -- ufix1
  SIGNAL vCountInit                       : std_logic;  -- ufix1
  SIGNAL vEn                              : std_logic;  -- ufix1
  SIGNAL vCount                           : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL region1_1                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL conv1YPos                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL vTop1                            : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL vCompGreaterStart1ROI            : std_logic;  -- ufix1
  SIGNAL region1_3                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL conv1YSize                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL vTemp1Add                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL vBottom1Add                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL vBottom1                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL vCompLessThanEnd1ROI             : std_logic;  -- ufix1
  SIGNAL prevalid1ROI                     : std_logic;  -- ufix1
  SIGNAL vBottomPlus1                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL vCompLessThanEndPlus1ROI         : std_logic;  -- ufix1
  SIGNAL inFramePrev                      : std_logic;  -- ufix1
  SIGNAL inLinePrev                       : std_logic;  -- ufix1
  SIGNAL hEndInRegDelay                   : std_logic;  -- ufix1
  SIGNAL hCompEnd1ROI                     : std_logic;  -- ufix1
  SIGNAL hEOR1ROI                         : std_logic;  -- ufix1
  SIGNAL vEndInRegDelay                   : std_logic;  -- ufix1
  SIGNAL vCompEndPlus1ROI                 : std_logic;  -- ufix1
  SIGNAL vCompEnd1ROI                     : std_logic;  -- ufix1
  SIGNAL vEOR1ROI                         : std_logic;  -- ufix1
  SIGNAL vEORDelay1ROI                    : std_logic;  -- ufix1
  SIGNAL preNormvEnd1ROI                  : std_logic;  -- ufix1
  SIGNAL validDelay1ROI                   : std_logic;  -- ufix1
  SIGNAL prehEnd1ROI                      : std_logic;  -- ufix1
  SIGNAL preEdge3vEnd1ROI                 : std_logic;  -- ufix1
  SIGNAL prevalidedge1ROI                 : std_logic;  -- ufix1
  SIGNAL preEdge2vEnd1ROI                 : std_logic;  -- ufix1
  SIGNAL preEdge1vEnd1ROI                 : std_logic;  -- ufix1
  SIGNAL prevEnd1ROI                      : std_logic;  -- ufix1
  SIGNAL hendDelay1ROI                    : std_logic;  -- ufix1
  SIGNAL hendDelayInv1ROI                 : std_logic;  -- ufix1
  SIGNAL finalpreValid1ROI                : std_logic;  -- ufix1
  SIGNAL prehEndEdge1ROI                  : std_logic;  -- ufix1
  SIGNAL zeroconst_1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL in0_unsigned                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL dataInReg                        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL dataInDlyReg                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL predataMux                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL dataOut                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL hCompStart1ROI                   : std_logic;  -- ufix1
  SIGNAL hSOR1ROI                         : std_logic;  -- ufix1
  SIGNAL prehStart1ROI                    : std_logic;  -- ufix1
  SIGNAL hStartOut                        : std_logic;
  SIGNAL vCompStart1ROI                   : std_logic;  -- ufix1
  SIGNAL vSOR1ROI                         : std_logic;  -- ufix1
  SIGNAL prevStart1ROI                    : std_logic;  -- ufix1
  SIGNAL vStartOut                        : std_logic;
  SIGNAL prelastedge1ROI                  : std_logic;  -- ufix1
  SIGNAL prelastedgeReg1ROI               : std_logic;  -- ufix1
  SIGNAL finalprevEnd1ROI                 : std_logic;  -- ufix1
  SIGNAL finalprevEndReg1ROI              : std_logic;  -- ufix1
  SIGNAL finalprevEndInv1ROI              : std_logic;  -- ufix1
  SIGNAL vStartBuf1ROI                    : std_logic;  -- ufix1
  SIGNAL vStartBufTerm11ROI               : std_logic;  -- ufix1
  SIGNAL vStartBufTerm21ROI               : std_logic;  -- ufix1
  SIGNAL finalprevEnd1ROI_1               : std_logic;  -- ufix1
  SIGNAL vEndOut                          : std_logic;

BEGIN
  vEIReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vEndInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        vEndInReg <= in1_vEnd;
      END IF;
    END IF;
  END PROCESS vEIReg_process;


  vEndInv <=  NOT vEndInReg;

  valIReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      validInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        validInReg <= in1_valid;
      END IF;
    END IF;
  END PROCESS valIReg_process;


  vSIReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vStartInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        vStartInReg <= in1_vStart;
      END IF;
    END IF;
  END PROCESS vSIReg_process;


  inFrame2Term <= validInReg AND vStartInReg;

  ValidInv <=  NOT validInReg;

  inFrame3Term <= ValidInv AND inFrame;

  inFReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      inFrame <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        inFrame <= inFrameNext;
      END IF;
    END IF;
  END PROCESS inFReg_process;


  inFrame1Term <= vEndInv AND inFrame;

  inFrameNext <= inFrame3Term OR (inFrame1Term OR inFrame2Term);

  hSIReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hStartInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        hStartInReg <= in1_hStart;
      END IF;
    END IF;
  END PROCESS hSIReg_process;


  hCountInit <= hStartInReg AND (inFrameNext AND validInReg);

  hEIReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hEndInReg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        hEndInReg <= in1_hEnd;
      END IF;
    END IF;
  END PROCESS hEIReg_process;


  hEndInv <=  NOT hEndInReg;

  inLine2Term <= vStartInReg AND (validInReg AND hStartInReg);

  inFrameInv <=  NOT inFrame;

  inLineInv <=  NOT inLine;

  inLine6Term <= inLineInv AND (inFrame AND (vEndInv AND (validInReg AND hStartInReg)));

  inLine5Term <= ValidInv AND inLine;

  inLine4Term <= inFrameInv AND inLine;

  inLine3Term <= vStartInReg AND inLine;

  inLReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      inLine <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        inLine <= inLineNext;
      END IF;
    END IF;
  END PROCESS inLReg_process;


  inLine1Term <= hEndInv AND inLine;

  inLineNext <= inLine6Term OR (inLine5Term OR (inLine4Term OR (inLine3Term OR (inLine1Term OR inLine2Term))));

  hEn <= validInReg AND (inFrameNext AND inLineNext);

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 65535
  hCounter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hCount <= to_unsigned(16#0001#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF hCountInit = '1' THEN 
          hCount <= to_unsigned(16#0001#, 16);
        ELSIF hEn = '1' THEN 
          IF hCount = to_unsigned(16#FFFF#, 16) THEN 
            hCount <= to_unsigned(16#0001#, 16);
          ELSE 
            hCount <= hCount + to_unsigned(16#0001#, 16);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS hCounter_process;


  region1_0 <= unsigned(in2(0));

  conv1XPos <= region1_0;

  left1reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hLeft1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND in1_vStart = '1' THEN
        hLeft1 <= conv1XPos;
      END IF;
    END IF;
  END PROCESS left1reg_process;


  
  hCompGreaterStart1ROI <= '1' WHEN hCount >= hLeft1 ELSE
      '0';

  region1_2 <= unsigned(in2(2));

  conv1XSize <= region1_2;

  hTemp1Add <= conv1XPos + conv1XSize;

  minusone <= to_unsigned(16#FFFF#, 16);

  hRight1Add <= hTemp1Add + minusone;

  right1reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hRight1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND in1_vStart = '1' THEN
        hRight1 <= hRight1Add;
      END IF;
    END IF;
  END PROCESS right1reg_process;


  
  hCompLessThanEnd1ROI <= '1' WHEN hCount <= hRight1 ELSE
      '0';

  vCountInit <= vStartInReg AND (inFrameNext AND validInReg);

  vEn <= hEndInReg AND (validInReg AND (inFrameNext AND inLine));

  -- Count limited, Unsigned Counter
  --  initial value   = 1
  --  step value      = 1
  --  count to value  = 65535
  vCounter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vCount <= to_unsigned(16#0001#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF vCountInit = '1' THEN 
          vCount <= to_unsigned(16#0001#, 16);
        ELSIF vEn = '1' THEN 
          IF vCount = to_unsigned(16#FFFF#, 16) THEN 
            vCount <= to_unsigned(16#0001#, 16);
          ELSE 
            vCount <= vCount + to_unsigned(16#0001#, 16);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS vCounter_process;


  region1_1 <= unsigned(in2(1));

  conv1YPos <= region1_1;

  top1reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vTop1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND in1_vStart = '1' THEN
        vTop1 <= conv1YPos;
      END IF;
    END IF;
  END PROCESS top1reg_process;


  
  vCompGreaterStart1ROI <= '1' WHEN vCount >= vTop1 ELSE
      '0';

  region1_3 <= unsigned(in2(3));

  conv1YSize <= region1_3;

  vTemp1Add <= conv1YPos + conv1YSize;

  vBottom1Add <= vTemp1Add + minusone;

  bottom1reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vBottom1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND in1_vStart = '1' THEN
        vBottom1 <= vBottom1Add;
      END IF;
    END IF;
  END PROCESS bottom1reg_process;


  
  vCompLessThanEnd1ROI <= '1' WHEN vCount <= vBottom1 ELSE
      '0';

  prevalid1ROI <= validInReg AND (inLine AND (inFrame AND (vCompLessThanEnd1ROI AND (vCompGreaterStart1ROI AND (hCompGreaterStart1ROI AND hCompLessThanEnd1ROI)))));

  bottomplus1reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vBottomPlus1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND in1_vStart = '1' THEN
        vBottomPlus1 <= vTemp1Add;
      END IF;
    END IF;
  END PROCESS bottomplus1reg_process;


  
  vCompLessThanEndPlus1ROI <= '1' WHEN vCount <= vBottomPlus1 ELSE
      '0';

  inFramePrevReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      inFramePrev <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        inFramePrev <= inFrame;
      END IF;
    END IF;
  END PROCESS inFramePrevReg_process;


  inLinePrevReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      inLinePrev <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        inLinePrev <= inLine;
      END IF;
    END IF;
  END PROCESS inLinePrevReg_process;


  hEIDReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hEndInRegDelay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        hEndInRegDelay <= hEndInReg;
      END IF;
    END IF;
  END PROCESS hEIDReg_process;


  
  hCompEnd1ROI <= '1' WHEN hCount = hRight1 ELSE
      '0';

  hEOR1ROI <= prevalid1ROI AND hCompEnd1ROI;

  vEIRegD_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vEndInRegDelay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        vEndInRegDelay <= vEndInReg;
      END IF;
    END IF;
  END PROCESS vEIRegD_process;


  
  vCompEndPlus1ROI <= '1' WHEN vCount = vBottomPlus1 ELSE
      '0';

  
  vCompEnd1ROI <= '1' WHEN vCount = vBottom1 ELSE
      '0';

  vEOR1ROI <= prevalid1ROI AND vCompEnd1ROI;

  vEORPrevReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vEORDelay1ROI <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        vEORDelay1ROI <= vEOR1ROI;
      END IF;
    END IF;
  END PROCESS vEORPrevReg_process;


  preNormvEnd1ROI <= vEOR1ROI AND (prevalid1ROI AND hEOR1ROI);

  preEdge3vEnd1ROI <= vEORDelay1ROI AND (validDelay1ROI AND prehEnd1ROI);

  preEdge2vEnd1ROI <= vCompEndPlus1ROI AND (hEndInReg AND (validDelay1ROI AND prevalidedge1ROI));

  preEdge1vEnd1ROI <= vEndInRegDelay AND (validDelay1ROI AND prevalidedge1ROI);

  prevEnd1ROI <= preNormvEnd1ROI OR (preEdge3vEnd1ROI OR (preEdge1vEnd1ROI OR preEdge2vEnd1ROI));

  hEndPrevReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hendDelay1ROI <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        hendDelay1ROI <= prehEnd1ROI;
      END IF;
    END IF;
  END PROCESS hEndPrevReg_process;


  hendDelayInv1ROI <=  NOT hendDelay1ROI;

  validDelayReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      validDelay1ROI <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        validDelay1ROI <= finalpreValid1ROI;
      END IF;
    END IF;
  END PROCESS validDelayReg_process;


  prevalidedge1ROI <= validDelay1ROI AND (inLinePrev AND (inFramePrev AND (vCompLessThanEndPlus1ROI AND (vCompGreaterStart1ROI AND (hCompGreaterStart1ROI AND hCompLessThanEnd1ROI)))));

  prehEndEdge1ROI <= hendDelayInv1ROI AND (hEndInRegDelay AND (prevalidedge1ROI AND validDelay1ROI));

  prehEnd1ROI <= prehEndEdge1ROI OR hEOR1ROI;

  finalpreValid1ROI <= prevEnd1ROI OR (prevalid1ROI OR prehEnd1ROI);

  zeroconst_1 <= to_unsigned(16#00#, 8);

  in0_unsigned <= unsigned(in0);

  dataIReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataInReg <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dataInReg <= in0_unsigned;
      END IF;
    END IF;
  END PROCESS dataIReg_process;


  dataIDlyReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataInDlyReg <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dataInDlyReg <= dataInReg;
      END IF;
    END IF;
  END PROCESS dataIDlyReg_process;


  
  predataMux <= zeroconst_1 WHEN finalpreValid1ROI = '0' ELSE
      dataInDlyReg;

  outDReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dataOut <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dataOut <= predataMux;
      END IF;
    END IF;
  END PROCESS outDReg_process;


  out0 <= std_logic_vector(dataOut);

  
  hCompStart1ROI <= '1' WHEN hCount = hLeft1 ELSE
      '0';

  hSOR1ROI <= hStartInReg OR hCompStart1ROI;

  prehStart1ROI <= prevalid1ROI AND hSOR1ROI;

  outHSReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      hStartOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        hStartOut <= prehStart1ROI;
      END IF;
    END IF;
  END PROCESS outHSReg_process;


  out1_hStart <= hStartOut;

  out1_hEnd <= hendDelay1ROI;

  
  vCompStart1ROI <= '1' WHEN vCount = vTop1 ELSE
      '0';

  vSOR1ROI <= vStartInReg OR vCompStart1ROI;

  prevStart1ROI <= vSOR1ROI AND (prevalid1ROI AND hSOR1ROI);

  outVSReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vStartOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        vStartOut <= prevStart1ROI;
      END IF;
    END IF;
  END PROCESS outVSReg_process;


  out1_vStart <= vStartOut;

  prelastedge1ROI <= vEndInReg AND (vCompGreaterStart1ROI AND vCompLessThanEndPlus1ROI);

  lastEdgeReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prelastedgeReg1ROI <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        prelastedgeReg1ROI <= prelastedge1ROI;
      END IF;
    END IF;
  END PROCESS lastEdgeReg_process;


  finalvEdgeReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      finalprevEndReg1ROI <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        finalprevEndReg1ROI <= finalprevEnd1ROI;
      END IF;
    END IF;
  END PROCESS finalvEdgeReg_process;


  finalprevEndInv1ROI <=  NOT finalprevEndReg1ROI;

  vStartBufTerm11ROI <= finalprevEndInv1ROI AND vStartBuf1ROI;

  vStartBufTerm21ROI <= prevStart1ROI OR vStartBufTerm11ROI;

  vSBufReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vStartBuf1ROI <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        vStartBuf1ROI <= vStartBufTerm21ROI;
      END IF;
    END IF;
  END PROCESS vSBufReg_process;


  finalprevEnd1ROI_1 <= vStartBuf1ROI AND prelastedgeReg1ROI;

  finalprevEnd1ROI <= finalprevEnd1ROI_1 OR prevEnd1ROI;

  outVEReg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      vEndOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        vEndOut <= finalprevEnd1ROI;
      END IF;
    END IF;
  END PROCESS outVEReg_process;


  out1_vEnd <= vEndOut;

  out1_valid <= validDelay1ROI;

END rtl;

