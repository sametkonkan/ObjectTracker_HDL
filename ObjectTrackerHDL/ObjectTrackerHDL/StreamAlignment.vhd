-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\StreamAlignment.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: StreamAlignment
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Track/2-DCorrelation/StreamAlignment
-- Hierarchy Level: 3
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY StreamAlignment IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        pixelIn1_re                       :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        pixelIn1_im                       :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        ctrlIn1_hStart                    :   IN    std_logic;
        ctrlIn1_hEnd                      :   IN    std_logic;
        ctrlIn1_vStart                    :   IN    std_logic;
        ctrlIn1_vEnd                      :   IN    std_logic;
        ctrlIn1_valid                     :   IN    std_logic;
        pixelIn2_re                       :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        pixelIn2_im                       :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        ctrlIn2_hStart                    :   IN    std_logic;
        ctrlIn2_hEnd                      :   IN    std_logic;
        ctrlIn2_vStart                    :   IN    std_logic;
        ctrlIn2_vEnd                      :   IN    std_logic;
        ctrlIn2_valid                     :   IN    std_logic;
        streamCtrl                        :   IN    std_logic;
        pixelOut1_re                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        pixelOut1_im                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        pixelOut2_re                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        pixelOut2_im                      :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
        ctrlOut_valid                     :   OUT   std_logic
        );
END StreamAlignment;


ARCHITECTURE rtl OF StreamAlignment IS

  -- Component Declarations
  COMPONENT Pixel_Stream_Aligner
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          in1_hStart                      :   IN    std_logic;
          in1_hEnd                        :   IN    std_logic;
          in1_vStart                      :   IN    std_logic;
          in1_vEnd                        :   IN    std_logic;
          in1_valid                       :   IN    std_logic;
          in2                             :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          in3_hStart                      :   IN    std_logic;
          in3_hEnd                        :   IN    std_logic;
          in3_vStart                      :   IN    std_logic;
          in3_vEnd                        :   IN    std_logic;
          in3_valid                       :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          out1                            :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          out2_valid                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Pixel_Stream_Aligner1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          in0                             :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          in1_hStart                      :   IN    std_logic;
          in1_hEnd                        :   IN    std_logic;
          in1_vStart                      :   IN    std_logic;
          in1_vEnd                        :   IN    std_logic;
          in1_valid                       :   IN    std_logic;
          in2                             :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          in3_hStart                      :   IN    std_logic;
          in3_hEnd                        :   IN    std_logic;
          in3_vStart                      :   IN    std_logic;
          in3_vEnd                        :   IN    std_logic;
          in3_valid                       :   IN    std_logic;
          out0                            :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          out1                            :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Pixel_Stream_Aligner
    USE ENTITY work.Pixel_Stream_Aligner(rtl);

  FOR ALL : Pixel_Stream_Aligner1
    USE ENTITY work.Pixel_Stream_Aligner1(rtl);

  -- Signals
  SIGNAL pixelIn2_re_signed               : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL pixelIn2_im_signed               : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL pixelIn1_re_signed               : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL pixelIn1_im_signed               : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Switch2_out1_re                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Switch2_out1_im                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Switch3_out1_hStart              : std_logic;
  SIGNAL Switch3_out1_hEnd                : std_logic;
  SIGNAL Switch3_out1_vStart              : std_logic;
  SIGNAL Switch3_out1_vEnd                : std_logic;
  SIGNAL Switch3_out1_valid               : std_logic;
  SIGNAL Switch4_out1_re                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Switch4_out1_im                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Switch5_out1_hStart              : std_logic;
  SIGNAL Switch5_out1_hEnd                : std_logic;
  SIGNAL Switch5_out1_vStart              : std_logic;
  SIGNAL Switch5_out1_vEnd                : std_logic;
  SIGNAL Switch5_out1_valid               : std_logic;
  SIGNAL Pixel_Stream_Aligner_out1        : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Pixel_Stream_Aligner_out2        : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Pixel_Stream_Aligner_out3_valid  : std_logic;
  SIGNAL Pixel_Stream_Aligner1_out1       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Pixel_Stream_Aligner1_out2       : std_logic_vector(23 DOWNTO 0);  -- ufix24

BEGIN
  u_Pixel_Stream_Aligner : Pixel_Stream_Aligner
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Switch2_out1_re),  -- sfix24_En12
              in1_hStart => Switch3_out1_hStart,
              in1_hEnd => Switch3_out1_hEnd,
              in1_vStart => Switch3_out1_vStart,
              in1_vEnd => Switch3_out1_vEnd,
              in1_valid => Switch3_out1_valid,
              in2 => std_logic_vector(Switch4_out1_re),  -- sfix24_En12
              in3_hStart => Switch5_out1_hStart,
              in3_hEnd => Switch5_out1_hEnd,
              in3_vStart => Switch5_out1_vStart,
              in3_vEnd => Switch5_out1_vEnd,
              in3_valid => Switch5_out1_valid,
              out0 => Pixel_Stream_Aligner_out1,  -- sfix24_En12
              out1 => Pixel_Stream_Aligner_out2,  -- sfix24_En12
              out2_valid => Pixel_Stream_Aligner_out3_valid
              );

  u_Pixel_Stream_Aligner1 : Pixel_Stream_Aligner1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              in0 => std_logic_vector(Switch2_out1_im),  -- sfix24_En12
              in1_hStart => Switch3_out1_hStart,
              in1_hEnd => Switch3_out1_hEnd,
              in1_vStart => Switch3_out1_vStart,
              in1_vEnd => Switch3_out1_vEnd,
              in1_valid => Switch3_out1_valid,
              in2 => std_logic_vector(Switch4_out1_im),  -- sfix24_En12
              in3_hStart => Switch5_out1_hStart,
              in3_hEnd => Switch5_out1_hEnd,
              in3_vStart => Switch5_out1_vStart,
              in3_vEnd => Switch5_out1_vEnd,
              in3_valid => Switch5_out1_valid,
              out0 => Pixel_Stream_Aligner1_out1,  -- sfix24_En12
              out1 => Pixel_Stream_Aligner1_out2  -- sfix24_En12
              );

  pixelIn2_re_signed <= signed(pixelIn2_re);

  pixelIn2_im_signed <= signed(pixelIn2_im);

  pixelIn1_re_signed <= signed(pixelIn1_re);

  pixelIn1_im_signed <= signed(pixelIn1_im);

  
  Switch2_out1_re <= pixelIn2_re_signed WHEN streamCtrl = '0' ELSE
      pixelIn1_re_signed;
  
  Switch2_out1_im <= pixelIn2_im_signed WHEN streamCtrl = '0' ELSE
      pixelIn1_im_signed;

  
  Switch3_out1_hStart <= ctrlIn2_hStart WHEN streamCtrl = '0' ELSE
      ctrlIn1_hStart;

  
  Switch3_out1_hEnd <= ctrlIn2_hEnd WHEN streamCtrl = '0' ELSE
      ctrlIn1_hEnd;

  
  Switch3_out1_vStart <= ctrlIn2_vStart WHEN streamCtrl = '0' ELSE
      ctrlIn1_vStart;

  
  Switch3_out1_vEnd <= ctrlIn2_vEnd WHEN streamCtrl = '0' ELSE
      ctrlIn1_vEnd;

  
  Switch3_out1_valid <= ctrlIn2_valid WHEN streamCtrl = '0' ELSE
      ctrlIn1_valid;

  
  Switch4_out1_re <= pixelIn1_re_signed WHEN streamCtrl = '0' ELSE
      pixelIn2_re_signed;
  
  Switch4_out1_im <= pixelIn1_im_signed WHEN streamCtrl = '0' ELSE
      pixelIn2_im_signed;

  
  Switch5_out1_hStart <= ctrlIn1_hStart WHEN streamCtrl = '0' ELSE
      ctrlIn2_hStart;

  
  Switch5_out1_hEnd <= ctrlIn1_hEnd WHEN streamCtrl = '0' ELSE
      ctrlIn2_hEnd;

  
  Switch5_out1_vStart <= ctrlIn1_vStart WHEN streamCtrl = '0' ELSE
      ctrlIn2_vStart;

  
  Switch5_out1_vEnd <= ctrlIn1_vEnd WHEN streamCtrl = '0' ELSE
      ctrlIn2_vEnd;

  
  Switch5_out1_valid <= ctrlIn1_valid WHEN streamCtrl = '0' ELSE
      ctrlIn2_valid;

  pixelOut1_re <= Pixel_Stream_Aligner_out1;

  pixelOut1_im <= Pixel_Stream_Aligner1_out1;

  pixelOut2_re <= Pixel_Stream_Aligner_out2;

  pixelOut2_im <= Pixel_Stream_Aligner1_out2;

  ctrlOut_valid <= Pixel_Stream_Aligner_out3_valid;

END rtl;

