-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\pixelBusGenerator_block.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: pixelBusGenerator_block
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Track/2-DCorrelation/Curr2-DFFT/pixelBusGenerator
-- Hierarchy Level: 4
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY pixelBusGenerator_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        validIn                           :   IN    std_logic;
        busOut_hStart                     :   OUT   std_logic;
        busOut_hEnd                       :   OUT   std_logic;
        busOut_vStart                     :   OUT   std_logic;
        busOut_vEnd                       :   OUT   std_logic;
        busOut_valid                      :   OUT   std_logic
        );
END pixelBusGenerator_block;


ARCHITECTURE rtl OF pixelBusGenerator_block IS

  -- Component Declarations
  COMPONENT Pixel_Control_Bus_Creator_block
    PORT( In1                             :   IN    std_logic;
          In2                             :   IN    std_logic;
          In3                             :   IN    std_logic;
          In4                             :   IN    std_logic;
          In5                             :   IN    std_logic;
          Out1_hStart                     :   OUT   std_logic;
          Out1_hEnd                       :   OUT   std_logic;
          Out1_vStart                     :   OUT   std_logic;
          Out1_vEnd                       :   OUT   std_logic;
          Out1_valid                      :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Pixel_Control_Bus_Creator_block
    USE ENTITY work.Pixel_Control_Bus_Creator_block(rtl);

  -- Signals
  SIGNAL count_step                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_from                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Horizontal_out1                  : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count                            : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_1                          : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL hStart_out1                      : std_logic;
  SIGNAL Logical_Operator3_out1           : std_logic;
  SIGNAL hEnd_out1                        : std_logic;
  SIGNAL Logical_Operator4_out1           : std_logic;
  SIGNAL count_step_1                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL count_from_1                     : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Vertical_out1                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL count_2                          : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_1                    : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL count_3                          : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL vStart_out1                      : std_logic;
  SIGNAL Logical_Operator5_out1           : std_logic;
  SIGNAL vEnd_out1                        : std_logic;
  SIGNAL Logical_Operator6_out1           : std_logic;
  SIGNAL Pixel_Control_Bus_Creator_out1_hStart : std_logic;
  SIGNAL Pixel_Control_Bus_Creator_out1_hEnd : std_logic;
  SIGNAL Pixel_Control_Bus_Creator_out1_vStart : std_logic;
  SIGNAL Pixel_Control_Bus_Creator_out1_vEnd : std_logic;
  SIGNAL Pixel_Control_Bus_Creator_out1_valid : std_logic;

BEGIN
  u_Pixel_Control_Bus_Creator : Pixel_Control_Bus_Creator_block
    PORT MAP( In1 => Logical_Operator3_out1,
              In2 => Logical_Operator4_out1,
              In3 => Logical_Operator5_out1,
              In4 => Logical_Operator6_out1,
              In5 => validIn,
              Out1_hStart => Pixel_Control_Bus_Creator_out1_hStart,
              Out1_hEnd => Pixel_Control_Bus_Creator_out1_hEnd,
              Out1_vStart => Pixel_Control_Bus_Creator_out1_vStart,
              Out1_vEnd => Pixel_Control_Bus_Creator_out1_vEnd,
              Out1_valid => Pixel_Control_Bus_Creator_out1_valid
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 127
  count_step <= to_unsigned(16#01#, 7);

  count_from <= to_unsigned(16#00#, 7);

  count <= Horizontal_out1 + count_step;

  
  need_to_wrap <= '1' WHEN Horizontal_out1 = to_unsigned(16#7F#, 7) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= Horizontal_out1 WHEN validIn = '0' ELSE
      count_value;

  Horizontal_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Horizontal_out1 <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Horizontal_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS Horizontal_process;


  
  hStart_out1 <= '1' WHEN Horizontal_out1 = to_unsigned(16#00#, 7) ELSE
      '0';

  Logical_Operator3_out1 <= validIn AND hStart_out1;

  
  hEnd_out1 <= '1' WHEN Horizontal_out1 = to_unsigned(16#7F#, 7) ELSE
      '0';

  Logical_Operator4_out1 <= validIn AND hEnd_out1;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 16383
  count_step_1 <= to_unsigned(16#0001#, 14);

  count_from_1 <= to_unsigned(16#0000#, 14);

  count_2 <= Vertical_out1 + count_step_1;

  
  need_to_wrap_1 <= '1' WHEN Vertical_out1 = to_unsigned(16#3FFF#, 14) ELSE
      '0';

  
  count_value_1 <= count_2 WHEN need_to_wrap_1 = '0' ELSE
      count_from_1;

  
  count_3 <= Vertical_out1 WHEN validIn = '0' ELSE
      count_value_1;

  Vertical_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Vertical_out1 <= to_unsigned(16#0000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Vertical_out1 <= count_3;
      END IF;
    END IF;
  END PROCESS Vertical_process;


  
  vStart_out1 <= '1' WHEN Vertical_out1 = to_unsigned(16#0000#, 14) ELSE
      '0';

  Logical_Operator5_out1 <= validIn AND vStart_out1;

  
  vEnd_out1 <= '1' WHEN Vertical_out1 = to_unsigned(16#3FFF#, 14) ELSE
      '0';

  Logical_Operator6_out1 <= validIn AND vEnd_out1;

  busOut_hStart <= Pixel_Control_Bus_Creator_out1_hStart;

  busOut_hEnd <= Pixel_Control_Bus_Creator_out1_hEnd;

  busOut_vStart <= Pixel_Control_Bus_Creator_out1_vStart;

  busOut_vEnd <= Pixel_Control_Bus_Creator_out1_vEnd;

  busOut_valid <= Pixel_Control_Bus_Creator_out1_valid;

END rtl;

