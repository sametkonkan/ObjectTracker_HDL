-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\ObjectTrackerHDL.vhd
-- Created: 2024-12-03 00:37:47
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 7.94444e-08
-- Target subsystem base rate: 7.94444e-08
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        7.94444e-08
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- pixelOut                      ce_out        7.94444e-08
-- ctrlOut_hStart                ce_out        7.94444e-08
-- ctrlOut_hEnd                  ce_out        7.94444e-08
-- ctrlOut_vStart                ce_out        7.94444e-08
-- ctrlOut_vEnd                  ce_out        7.94444e-08
-- ctrlOut_valid                 ce_out        7.94444e-08
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ObjectTrackerHDL
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL
-- Hierarchy Level: 0
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ObjectTrackerHDL_pkg.ALL;

ENTITY ObjectTrackerHDL IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        pixelIn                           :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        ctrlIn_hStart                     :   IN    std_logic;
        ctrlIn_hEnd                       :   IN    std_logic;
        ctrlIn_vStart                     :   IN    std_logic;
        ctrlIn_vEnd                       :   IN    std_logic;
        ctrlIn_valid                      :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        pixelOut                          :   OUT   vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
        ctrlOut_hStart                    :   OUT   std_logic;
        ctrlOut_hEnd                      :   OUT   std_logic;
        ctrlOut_vStart                    :   OUT   std_logic;
        ctrlOut_vEnd                      :   OUT   std_logic;
        ctrlOut_valid                     :   OUT   std_logic
        );
END ObjectTrackerHDL;


ARCHITECTURE rtl OF ObjectTrackerHDL IS

  -- Component Declarations
  COMPONENT Track
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          prevPixelIn                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          prevCtrlIn_valid                :   IN    std_logic;
          currPixelIn                     :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          currCtrlIn_valid                :   IN    std_logic;
          frameCtrl_vEnd                  :   IN    std_logic;
          prevROIOut                      :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- uint16 [4]
          currROIOut                      :   OUT   vector_of_std_logic_vector16(0 TO 3)  -- uint16 [4]
          );
  END COMPONENT;

  COMPONENT Preprocess
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          pixelIn                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrlIn_hStart                   :   IN    std_logic;
          ctrlIn_hEnd                     :   IN    std_logic;
          ctrlIn_vStart                   :   IN    std_logic;
          ctrlIn_vEnd                     :   IN    std_logic;
          ctrlIn_valid                    :   IN    std_logic;
          prevROI                         :   IN    vector_of_std_logic_vector16(0 TO 3);  -- uint16 [4]
          currROI                         :   IN    vector_of_std_logic_vector16(0 TO 3);  -- uint16 [4]
          prevPixelOut                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          prevCtrlOut_valid               :   OUT   std_logic;
          currPixelOut                    :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          currCtrlOut_valid               :   OUT   std_logic;
          OutputROI                       :   OUT   vector_of_std_logic_vector16(0 TO 3)  -- uint16 [4]
          );
  END COMPONENT;

  COMPONENT Overlay
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          pixelIn                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          ctrlIn_hStart                   :   IN    std_logic;
          ctrlIn_hEnd                     :   IN    std_logic;
          ctrlIn_vStart                   :   IN    std_logic;
          ctrlIn_vEnd                     :   IN    std_logic;
          ctrlIn_valid                    :   IN    std_logic;
          ROIIn                           :   IN    vector_of_std_logic_vector16(0 TO 3);  -- uint16 [4]
          pixelOut                        :   OUT   vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
          ctrlOut_hStart                  :   OUT   std_logic;
          ctrlOut_hEnd                    :   OUT   std_logic;
          ctrlOut_vStart                  :   OUT   std_logic;
          ctrlOut_vEnd                    :   OUT   std_logic;
          ctrlOut_valid                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Track
    USE ENTITY work.Track(rtl);

  FOR ALL : Preprocess
    USE ENTITY work.Preprocess(rtl);

  FOR ALL : Overlay
    USE ENTITY work.Overlay(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Preprocess_out1                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Preprocess_out2_valid            : std_logic;
  SIGNAL Preprocess_out3                  : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Preprocess_out4_valid            : std_logic;
  SIGNAL Track_out1                       : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Track_out2                       : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Preprocess_out5                  : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Overlay_out2                     : vector_of_std_logic_vector8(0 TO 2);  -- ufix8 [3]
  SIGNAL Overlay_out3_hStart              : std_logic;
  SIGNAL Overlay_out3_hEnd                : std_logic;
  SIGNAL Overlay_out3_vStart              : std_logic;
  SIGNAL Overlay_out3_vEnd                : std_logic;
  SIGNAL Overlay_out3_valid               : std_logic;
  SIGNAL alpha_reg                        : std_logic_vector(24 DOWNTO 0);  -- ufix1 [25]
  SIGNAL Overlay_out3_hStart_1            : std_logic;
  SIGNAL alpha_reg_1                      : std_logic_vector(24 DOWNTO 0);  -- ufix1 [25]
  SIGNAL Overlay_out3_hEnd_1              : std_logic;
  SIGNAL alpha_reg_2                      : std_logic_vector(24 DOWNTO 0);  -- ufix1 [25]
  SIGNAL Overlay_out3_vStart_1            : std_logic;
  SIGNAL alpha_reg_3                      : std_logic_vector(24 DOWNTO 0);  -- ufix1 [25]
  SIGNAL Overlay_out3_vEnd_1              : std_logic;
  SIGNAL alpha_reg_4                      : std_logic_vector(24 DOWNTO 0);  -- ufix1 [25]
  SIGNAL Overlay_out3_valid_1             : std_logic;

BEGIN
  -- 2-D Correlation filter tracking HDL Subsystem

  u_Track : Track
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              prevPixelIn => Preprocess_out1,  -- sfix32_En28
              prevCtrlIn_valid => Preprocess_out2_valid,
              currPixelIn => Preprocess_out3,  -- sfix32_En28
              currCtrlIn_valid => Preprocess_out4_valid,
              frameCtrl_vEnd => ctrlIn_vEnd,
              prevROIOut => Track_out1,  -- uint16 [4]
              currROIOut => Track_out2  -- uint16 [4]
              );

  u_Preprocess : Preprocess
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              pixelIn => pixelIn,  -- uint8
              ctrlIn_hStart => ctrlIn_hStart,
              ctrlIn_hEnd => ctrlIn_hEnd,
              ctrlIn_vStart => ctrlIn_vStart,
              ctrlIn_vEnd => ctrlIn_vEnd,
              ctrlIn_valid => ctrlIn_valid,
              prevROI => Track_out1,  -- uint16 [4]
              currROI => Track_out2,  -- uint16 [4]
              prevPixelOut => Preprocess_out1,  -- sfix32_En28
              prevCtrlOut_valid => Preprocess_out2_valid,
              currPixelOut => Preprocess_out3,  -- sfix32_En28
              currCtrlOut_valid => Preprocess_out4_valid,
              OutputROI => Preprocess_out5  -- uint16 [4]
              );

  u_Overlay : Overlay
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              pixelIn => pixelIn,  -- uint8
              ctrlIn_hStart => ctrlIn_hStart,
              ctrlIn_hEnd => ctrlIn_hEnd,
              ctrlIn_vStart => ctrlIn_vStart,
              ctrlIn_vEnd => ctrlIn_vEnd,
              ctrlIn_valid => ctrlIn_valid,
              ROIIn => Preprocess_out5,  -- uint16 [4]
              pixelOut => Overlay_out2,  -- uint8 [3]
              ctrlOut_hStart => Overlay_out3_hStart,
              ctrlOut_hEnd => Overlay_out3_hEnd,
              ctrlOut_vStart => Overlay_out3_vStart,
              ctrlOut_vEnd => Overlay_out3_vEnd,
              ctrlOut_valid => Overlay_out3_valid
              );

  enb <= clk_enable;

  c_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg(0) <= Overlay_out3_hStart;
        alpha_reg(24 DOWNTO 1) <= alpha_reg(23 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_process;

  Overlay_out3_hStart_1 <= alpha_reg(24);

  c_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_1(0) <= Overlay_out3_hEnd;
        alpha_reg_1(24 DOWNTO 1) <= alpha_reg_1(23 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_1_process;

  Overlay_out3_hEnd_1 <= alpha_reg_1(24);

  c_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_2 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_2(0) <= Overlay_out3_vStart;
        alpha_reg_2(24 DOWNTO 1) <= alpha_reg_2(23 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_2_process;

  Overlay_out3_vStart_1 <= alpha_reg_2(24);

  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_3 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_3(0) <= Overlay_out3_vEnd;
        alpha_reg_3(24 DOWNTO 1) <= alpha_reg_3(23 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_3_process;

  Overlay_out3_vEnd_1 <= alpha_reg_3(24);

  c_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_4 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_4(0) <= Overlay_out3_valid;
        alpha_reg_4(24 DOWNTO 1) <= alpha_reg_4(23 DOWNTO 0);
      END IF;
    END IF;
  END PROCESS c_4_process;

  Overlay_out3_valid_1 <= alpha_reg_4(24);

  ce_out <= clk_enable;

  pixelOut <= Overlay_out2;

  ctrlOut_hStart <= Overlay_out3_hStart_1;

  ctrlOut_hEnd <= Overlay_out3_hEnd_1;

  ctrlOut_vStart <= Overlay_out3_vStart_1;

  ctrlOut_vEnd <= Overlay_out3_vEnd_1;

  ctrlOut_valid <= Overlay_out3_valid_1;

END rtl;

