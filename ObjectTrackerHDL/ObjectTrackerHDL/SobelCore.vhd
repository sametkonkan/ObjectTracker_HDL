-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\SobelCore.vhd
-- Created: 2024-12-03 00:37:47
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SobelCore
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Preprocess/Edge Detector/SobelCore
-- Hierarchy Level: 3
-- Model version: 3.7
-- 
-- Sobel Core
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ObjectTrackerHDL_pkg.ALL;

ENTITY SobelCore IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        pixelInVec                        :   IN    vector_of_std_logic_vector8(0 TO 2);  -- uint8 [3]
        ShiftEnb                          :   IN    std_logic;
        Gv                                :   OUT   std_logic_vector(10 DOWNTO 0);  -- sfix11_En3
        Gh                                :   OUT   std_logic_vector(10 DOWNTO 0)  -- sfix11_En3
        );
END SobelCore;


ARCHITECTURE rtl OF SobelCore IS

  -- Signals
  SIGNAL pixelInVec_0                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel1Shift                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel1Shift2                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel1Shift3                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixelInVec_2                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel3Shift                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel3Shift2                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel3Shift3                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL GvAdder1                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL GvAdder1Delay                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL pixelInVec_1                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel2Shift                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel2Shift2                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL pixel2Shift3                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p2S3x2                           : unsigned(7 DOWNTO 0);  -- ufix8_E1
  SIGNAL p2S3x2Delay                      : unsigned(7 DOWNTO 0);  -- ufix8_E1
  SIGNAL adder_add_cast                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL GvAdder2                         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL GvAdder2Delay                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p2Sx2                            : unsigned(7 DOWNTO 0);  -- ufix8_E1
  SIGNAL p2Sx2Delay                       : unsigned(7 DOWNTO 0);  -- ufix8_E1
  SIGNAL GvAdder3                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL GvAdder3Delay                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL adder_add_cast_1                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL GvAdder4                         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL GvAdder4Delay                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL subtractor_sub_temp              : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL GvAdder5                         : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL gvdtc1                           : signed(10 DOWNTO 0);  -- sfix11_En3
  SIGNAL gvdtc1Delay                      : signed(10 DOWNTO 0);  -- sfix11_En3
  SIGNAL p3S2x2                           : unsigned(7 DOWNTO 0);  -- ufix8_E1
  SIGNAL p3S2x2Delay                      : unsigned(7 DOWNTO 0);  -- ufix8_E1
  SIGNAL GhAdder3                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL GhAdder3Delay                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL adder_add_cast_2                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL GhAdder4                         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL GhAdder4Delay                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p1S2x2                           : unsigned(7 DOWNTO 0);  -- ufix8_E1
  SIGNAL p1S2x2Delay                      : unsigned(7 DOWNTO 0);  -- ufix8_E1
  SIGNAL GhAdder1                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL GhAdder1Delay                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL adder_add_cast_3                 : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL GhAdder2                         : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL GhAdder2Delay                    : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL subtractor_sub_temp_1            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL GhAdder5                         : signed(10 DOWNTO 0);  -- sfix11
  SIGNAL ghdtc1                           : signed(10 DOWNTO 0);  -- sfix11_En3
  SIGNAL ghdtc1Delay                      : signed(10 DOWNTO 0);  -- sfix11_En3

BEGIN
  pixelInVec_0 <= unsigned(pixelInVec(0));

  p1Shift_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pixel1Shift <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND ShiftEnb = '1' THEN
        pixel1Shift <= pixelInVec_0;
      END IF;
    END IF;
  END PROCESS p1Shift_process;


  p1Shift2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pixel1Shift2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND ShiftEnb = '1' THEN
        pixel1Shift2 <= pixel1Shift;
      END IF;
    END IF;
  END PROCESS p1Shift2_process;


  p1Shift3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pixel1Shift3 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND ShiftEnb = '1' THEN
        pixel1Shift3 <= pixel1Shift2;
      END IF;
    END IF;
  END PROCESS p1Shift3_process;


  pixelInVec_2 <= unsigned(pixelInVec(2));

  p3Shift_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pixel3Shift <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND ShiftEnb = '1' THEN
        pixel3Shift <= pixelInVec_2;
      END IF;
    END IF;
  END PROCESS p3Shift_process;


  p3Shift2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pixel3Shift2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND ShiftEnb = '1' THEN
        pixel3Shift2 <= pixel3Shift;
      END IF;
    END IF;
  END PROCESS p3Shift2_process;


  p3Shift3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pixel3Shift3 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND ShiftEnb = '1' THEN
        pixel3Shift3 <= pixel3Shift2;
      END IF;
    END IF;
  END PROCESS p3Shift3_process;


  GvAdder1 <= resize(pixel1Shift3, 9) + resize(pixel3Shift3, 9);

  reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      GvAdder1Delay <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        GvAdder1Delay <= GvAdder1;
      END IF;
    END IF;
  END PROCESS reg_process;


  pixelInVec_1 <= unsigned(pixelInVec(1));

  p2Shift_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pixel2Shift <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND ShiftEnb = '1' THEN
        pixel2Shift <= pixelInVec_1;
      END IF;
    END IF;
  END PROCESS p2Shift_process;


  p2Shift2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pixel2Shift2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND ShiftEnb = '1' THEN
        pixel2Shift2 <= pixel2Shift;
      END IF;
    END IF;
  END PROCESS p2Shift2_process;


  p2Shift3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      pixel2Shift3 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND ShiftEnb = '1' THEN
        pixel2Shift3 <= pixel2Shift2;
      END IF;
    END IF;
  END PROCESS p2Shift3_process;


  p2S3x2 <= pixel2Shift3;

  reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      p2S3x2Delay <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        p2S3x2Delay <= p2S3x2;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  adder_add_cast <= resize(p2S3x2Delay & '0', 10);
  GvAdder2 <= resize(GvAdder1Delay, 10) + adder_add_cast;

  reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      GvAdder2Delay <= to_unsigned(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        GvAdder2Delay <= GvAdder2;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  p2Sx2 <= pixel2Shift;

  reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      p2Sx2Delay <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        p2Sx2Delay <= p2Sx2;
      END IF;
    END IF;
  END PROCESS reg_3_process;


  GvAdder3 <= resize(pixel1Shift, 9) + resize(pixel3Shift, 9);

  reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      GvAdder3Delay <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        GvAdder3Delay <= GvAdder3;
      END IF;
    END IF;
  END PROCESS reg_4_process;


  adder_add_cast_1 <= resize(p2Sx2Delay & '0', 10);
  GvAdder4 <= adder_add_cast_1 + resize(GvAdder3Delay, 10);

  reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      GvAdder4Delay <= to_unsigned(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        GvAdder4Delay <= GvAdder4;
      END IF;
    END IF;
  END PROCESS reg_5_process;


  subtractor_sub_temp <= resize(GvAdder2Delay, 11) - resize(GvAdder4Delay, 11);
  GvAdder5 <= signed(subtractor_sub_temp);

  -- Gv: Right-shift 3 bit to perform divided by 8
  gvdtc1 <= GvAdder5;

  -- Gv: Cast to the specified gradient data type. Full precision if outputing binary image only
  reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gvdtc1Delay <= to_signed(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gvdtc1Delay <= gvdtc1;
      END IF;
    END IF;
  END PROCESS reg_6_process;


  Gv <= std_logic_vector(gvdtc1Delay);

  p3S2x2 <= pixel3Shift2;

  reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      p3S2x2Delay <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        p3S2x2Delay <= p3S2x2;
      END IF;
    END IF;
  END PROCESS reg_7_process;


  GhAdder3 <= resize(pixel3Shift, 9) + resize(pixel3Shift3, 9);

  reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      GhAdder3Delay <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        GhAdder3Delay <= GhAdder3;
      END IF;
    END IF;
  END PROCESS reg_8_process;


  adder_add_cast_2 <= resize(p3S2x2Delay & '0', 10);
  GhAdder4 <= adder_add_cast_2 + resize(GhAdder3Delay, 10);

  reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      GhAdder4Delay <= to_unsigned(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        GhAdder4Delay <= GhAdder4;
      END IF;
    END IF;
  END PROCESS reg_9_process;


  p1S2x2 <= pixel1Shift2;

  reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      p1S2x2Delay <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        p1S2x2Delay <= p1S2x2;
      END IF;
    END IF;
  END PROCESS reg_10_process;


  GhAdder1 <= resize(pixel1Shift, 9) + resize(pixel1Shift3, 9);

  reg_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      GhAdder1Delay <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        GhAdder1Delay <= GhAdder1;
      END IF;
    END IF;
  END PROCESS reg_11_process;


  adder_add_cast_3 <= resize(p1S2x2Delay & '0', 10);
  GhAdder2 <= adder_add_cast_3 + resize(GhAdder1Delay, 10);

  reg_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      GhAdder2Delay <= to_unsigned(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        GhAdder2Delay <= GhAdder2;
      END IF;
    END IF;
  END PROCESS reg_12_process;


  subtractor_sub_temp_1 <= resize(GhAdder4Delay, 11) - resize(GhAdder2Delay, 11);
  GhAdder5 <= signed(subtractor_sub_temp_1);

  -- Gh: Right-shift 3 bit to perform divided by 8
  ghdtc1 <= GhAdder5;

  -- Gh: Cast to the specified gradient data type. Full precision if outputing binary image only
  reg_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ghdtc1Delay <= to_signed(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ghdtc1Delay <= ghdtc1;
      END IF;
    END IF;
  END PROCESS reg_13_process;


  Gh <= std_logic_vector(ghdtc1Delay);

END rtl;

