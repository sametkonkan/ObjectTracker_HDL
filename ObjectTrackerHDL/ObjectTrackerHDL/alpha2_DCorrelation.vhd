-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\alpha2_DCorrelation.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: alpha2_DCorrelation
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Track/2-DCorrelation
-- Hierarchy Level: 2
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ObjectTrackerHDL_pkg.ALL;

ENTITY alpha2_DCorrelation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        prevPixelIn                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        prevCtrlIn_valid                  :   IN    std_logic;
        currPixelIn                       :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
        currCtrlIn_valid                  :   IN    std_logic;
        streamCtrlIn                      :   IN    std_logic;
        frameCtrl_vEnd                    :   IN    std_logic;
        pixelOut                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En16
        ctrlOut_hStart                    :   OUT   std_logic;
        ctrlOut_hEnd                      :   OUT   std_logic;
        ctrlOut_vStart                    :   OUT   std_logic;
        ctrlOut_vEnd                      :   OUT   std_logic;
        ctrlOut_valid                     :   OUT   std_logic
        );
END alpha2_DCorrelation;


ARCHITECTURE rtl OF alpha2_DCorrelation IS

  -- Component Declarations
  COMPONENT Prev2_DFFT
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          pixelIn                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          ctrlIn_valid                    :   IN    std_logic;
          pixelOut_re                     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          pixelOut_im                     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          ctrlOut_hStart                  :   OUT   std_logic;
          ctrlOut_hEnd                    :   OUT   std_logic;
          ctrlOut_vStart                  :   OUT   std_logic;
          ctrlOut_vEnd                    :   OUT   std_logic;
          ctrlOut_valid                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Curr2_DFFT
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          pixelIn                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En28
          ctrlIn_valid                    :   IN    std_logic;
          pixelOut_re                     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          pixelOut_im                     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          ctrlOut_hStart                  :   OUT   std_logic;
          ctrlOut_hEnd                    :   OUT   std_logic;
          ctrlOut_vStart                  :   OUT   std_logic;
          ctrlOut_vEnd                    :   OUT   std_logic;
          ctrlOut_valid                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT CoefficientsUpdate_block
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          pixelIn_re                      :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          pixelIn_im                      :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          ctrlIn_hStart                   :   IN    std_logic;
          ctrlIn_hEnd                     :   IN    std_logic;
          ctrlIn_vStart                   :   IN    std_logic;
          ctrlIn_vEnd                     :   IN    std_logic;
          ctrlIn_valid                    :   IN    std_logic;
          frameCtrl_vEnd                  :   IN    std_logic;
          pixelOut_re                     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          pixelOut_im                     :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          ctrlOut_hStart                  :   OUT   std_logic;
          ctrlOut_hEnd                    :   OUT   std_logic;
          ctrlOut_vStart                  :   OUT   std_logic;
          ctrlOut_vEnd                    :   OUT   std_logic;
          ctrlOut_valid                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT StreamAlignment
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          pixelIn1_re                     :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          pixelIn1_im                     :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          ctrlIn1_hStart                  :   IN    std_logic;
          ctrlIn1_hEnd                    :   IN    std_logic;
          ctrlIn1_vStart                  :   IN    std_logic;
          ctrlIn1_vEnd                    :   IN    std_logic;
          ctrlIn1_valid                   :   IN    std_logic;
          pixelIn2_re                     :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          pixelIn2_im                     :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          ctrlIn2_hStart                  :   IN    std_logic;
          ctrlIn2_hEnd                    :   IN    std_logic;
          ctrlIn2_vStart                  :   IN    std_logic;
          ctrlIn2_vEnd                    :   IN    std_logic;
          ctrlIn2_valid                   :   IN    std_logic;
          streamCtrl                      :   IN    std_logic;
          pixelOut1_re                    :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          pixelOut1_im                    :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          pixelOut2_re                    :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          pixelOut2_im                    :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En12
          ctrlOut_valid                   :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT alpha2_DIFFT
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          pixelIn_re                      :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En16
          pixelIn_im                      :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En16
          ctrlIn_valid                    :   IN    std_logic;
          pixelOut                        :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En16
          ctrlOut_hStart                  :   OUT   std_logic;
          ctrlOut_hEnd                    :   OUT   std_logic;
          ctrlOut_vStart                  :   OUT   std_logic;
          ctrlOut_vEnd                    :   OUT   std_logic;
          ctrlOut_valid                   :   OUT   std_logic
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Prev2_DFFT
    USE ENTITY work.Prev2_DFFT(rtl);

  FOR ALL : Curr2_DFFT
    USE ENTITY work.Curr2_DFFT(rtl);

  FOR ALL : CoefficientsUpdate_block
    USE ENTITY work.CoefficientsUpdate_block(rtl);

  FOR ALL : StreamAlignment
    USE ENTITY work.StreamAlignment(rtl);

  FOR ALL : alpha2_DIFFT
    USE ENTITY work.alpha2_DIFFT(rtl);

  -- Signals
  SIGNAL Prev2_DFFT_out1_re               : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Prev2_DFFT_out1_im               : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Prev2_DFFT_out2_hStart           : std_logic;
  SIGNAL Prev2_DFFT_out2_hEnd             : std_logic;
  SIGNAL Prev2_DFFT_out2_vStart           : std_logic;
  SIGNAL Prev2_DFFT_out2_vEnd             : std_logic;
  SIGNAL Prev2_DFFT_out2_valid            : std_logic;
  SIGNAL Prev2_DFFT_out1_re_signed        : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Prev2_DFFT_out1_im_signed        : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay_reg_re                     : vector_of_signed24(0 TO 1);  -- sfix24_En12 [2]
  SIGNAL Delay_reg_im                     : vector_of_signed24(0 TO 1);  -- sfix24_En12 [2]
  SIGNAL Delay_out1_re                    : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay_out1_im                    : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay14_reg_re                   : vector_of_signed24(0 TO 1);  -- sfix24_En12 [2]
  SIGNAL Delay14_reg_im                   : vector_of_signed24(0 TO 1);  -- sfix24_En12 [2]
  SIGNAL Delay14_out1_re                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay14_out1_im                  : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL alpha_reg                        : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay1_out1_hStart               : std_logic;
  SIGNAL alpha_reg_1                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay13_out1_hStart              : std_logic;
  SIGNAL alpha_reg_2                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay1_out1_hEnd                 : std_logic;
  SIGNAL alpha_reg_3                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay13_out1_hEnd                : std_logic;
  SIGNAL alpha_reg_4                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay1_out1_vStart               : std_logic;
  SIGNAL alpha_reg_5                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay13_out1_vStart              : std_logic;
  SIGNAL alpha_reg_6                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay1_out1_vEnd                 : std_logic;
  SIGNAL alpha_reg_7                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay13_out1_vEnd                : std_logic;
  SIGNAL alpha_reg_8                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay1_out1_valid                : std_logic;
  SIGNAL alpha_reg_9                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay13_out1_valid               : std_logic;
  SIGNAL Curr2_DFFT_out1_re               : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Curr2_DFFT_out1_im               : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL Curr2_DFFT_out2_hStart           : std_logic;
  SIGNAL Curr2_DFFT_out2_hEnd             : std_logic;
  SIGNAL Curr2_DFFT_out2_vStart           : std_logic;
  SIGNAL Curr2_DFFT_out2_vEnd             : std_logic;
  SIGNAL Curr2_DFFT_out2_valid            : std_logic;
  SIGNAL Curr2_DFFT_out1_re_signed        : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Curr2_DFFT_out1_im_signed        : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay3_out1_re                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay3_out1_im                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay2_out1_hStart               : std_logic;
  SIGNAL Delay2_out1_hEnd                 : std_logic;
  SIGNAL Delay2_out1_vStart               : std_logic;
  SIGNAL Delay2_out1_vEnd                 : std_logic;
  SIGNAL Delay2_out1_valid                : std_logic;
  SIGNAL CoefficientsUpdate_out1_re       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL CoefficientsUpdate_out1_im       : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL CoefficientsUpdate_out2_hStart   : std_logic;
  SIGNAL CoefficientsUpdate_out2_hEnd     : std_logic;
  SIGNAL CoefficientsUpdate_out2_vStart   : std_logic;
  SIGNAL CoefficientsUpdate_out2_vEnd     : std_logic;
  SIGNAL CoefficientsUpdate_out2_valid    : std_logic;
  SIGNAL CoefficientsUpdate_out1_re_signed : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL CoefficientsUpdate_out1_im_signed : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay4_out1_re                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay4_out1_im                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay5_out1_hStart               : std_logic;
  SIGNAL Delay5_out1_hEnd                 : std_logic;
  SIGNAL Delay5_out1_vStart               : std_logic;
  SIGNAL Delay5_out1_vEnd                 : std_logic;
  SIGNAL Delay5_out1_valid                : std_logic;
  SIGNAL Delay12_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay12_out1                     : std_logic;
  SIGNAL Delay15_reg                      : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay15_out1                     : std_logic;
  SIGNAL StreamAlignment_out1_re          : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL StreamAlignment_out1_im          : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL StreamAlignment_out2_re          : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL StreamAlignment_out2_im          : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL StreamAlignment_out3_valid       : std_logic;
  SIGNAL StreamAlignment_out1_re_signed   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL StreamAlignment_out1_im_signed   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay8_out1_re                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay8_out1_im                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL StreamAlignment_out2_re_signed   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL StreamAlignment_out2_im_signed   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay6_out1_re                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Delay6_out1_im                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL Product_mul_temp                 : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL Product_sub_cast                 : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Product_mul_temp_1               : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL Product_sub_cast_1               : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Product_mul_temp_2               : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL Product_add_cast                 : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Product_mul_temp_3               : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL Product_add_cast_1               : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Product_out1_re                  : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Product_out1_im                  : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Delay9_out1_re                   : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Delay9_out1_im                   : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL alpha_reg_14                     : std_logic_vector(1 DOWNTO 0);  -- ufix1 [2]
  SIGNAL Delay7_out1_valid                : std_logic;
  SIGNAL alpha2_DIFFT_out1                : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha2_DIFFT_out2_hStart         : std_logic;
  SIGNAL alpha2_DIFFT_out2_hEnd           : std_logic;
  SIGNAL alpha2_DIFFT_out2_vStart         : std_logic;
  SIGNAL alpha2_DIFFT_out2_vEnd           : std_logic;
  SIGNAL alpha2_DIFFT_out2_valid          : std_logic;
  SIGNAL alpha2_DIFFT_out1_signed         : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Delay10_out1                     : signed(23 DOWNTO 0);  -- sfix24_En16
  SIGNAL Delay11_out1_hStart              : std_logic;
  SIGNAL Delay11_out1_hEnd                : std_logic;
  SIGNAL Delay11_out1_vStart              : std_logic;
  SIGNAL Delay11_out1_vEnd                : std_logic;
  SIGNAL Delay11_out1_valid               : std_logic;

BEGIN
  u_Prev2_DFFT : Prev2_DFFT
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              pixelIn => prevPixelIn,  -- sfix32_En28
              ctrlIn_valid => prevCtrlIn_valid,
              pixelOut_re => Prev2_DFFT_out1_re,  -- sfix24_En12
              pixelOut_im => Prev2_DFFT_out1_im,  -- sfix24_En12
              ctrlOut_hStart => Prev2_DFFT_out2_hStart,
              ctrlOut_hEnd => Prev2_DFFT_out2_hEnd,
              ctrlOut_vStart => Prev2_DFFT_out2_vStart,
              ctrlOut_vEnd => Prev2_DFFT_out2_vEnd,
              ctrlOut_valid => Prev2_DFFT_out2_valid
              );

  u_Curr2_DFFT : Curr2_DFFT
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              pixelIn => currPixelIn,  -- sfix32_En28
              ctrlIn_valid => currCtrlIn_valid,
              pixelOut_re => Curr2_DFFT_out1_re,  -- sfix24_En12
              pixelOut_im => Curr2_DFFT_out1_im,  -- sfix24_En12
              ctrlOut_hStart => Curr2_DFFT_out2_hStart,
              ctrlOut_hEnd => Curr2_DFFT_out2_hEnd,
              ctrlOut_vStart => Curr2_DFFT_out2_vStart,
              ctrlOut_vEnd => Curr2_DFFT_out2_vEnd,
              ctrlOut_valid => Curr2_DFFT_out2_valid
              );

  u_CoefficientsUpdate : CoefficientsUpdate_block
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              pixelIn_re => std_logic_vector(Delay3_out1_re),  -- sfix24_En12
              pixelIn_im => std_logic_vector(Delay3_out1_im),  -- sfix24_En12
              ctrlIn_hStart => Delay2_out1_hStart,
              ctrlIn_hEnd => Delay2_out1_hEnd,
              ctrlIn_vStart => Delay2_out1_vStart,
              ctrlIn_vEnd => Delay2_out1_vEnd,
              ctrlIn_valid => Delay2_out1_valid,
              frameCtrl_vEnd => frameCtrl_vEnd,
              pixelOut_re => CoefficientsUpdate_out1_re,  -- sfix24_En12
              pixelOut_im => CoefficientsUpdate_out1_im,  -- sfix24_En12
              ctrlOut_hStart => CoefficientsUpdate_out2_hStart,
              ctrlOut_hEnd => CoefficientsUpdate_out2_hEnd,
              ctrlOut_vStart => CoefficientsUpdate_out2_vStart,
              ctrlOut_vEnd => CoefficientsUpdate_out2_vEnd,
              ctrlOut_valid => CoefficientsUpdate_out2_valid
              );

  u_StreamAlignment : StreamAlignment
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              pixelIn1_re => std_logic_vector(Delay14_out1_re),  -- sfix24_En12
              pixelIn1_im => std_logic_vector(Delay14_out1_im),  -- sfix24_En12
              ctrlIn1_hStart => Delay13_out1_hStart,
              ctrlIn1_hEnd => Delay13_out1_hEnd,
              ctrlIn1_vStart => Delay13_out1_vStart,
              ctrlIn1_vEnd => Delay13_out1_vEnd,
              ctrlIn1_valid => Delay13_out1_valid,
              pixelIn2_re => std_logic_vector(Delay4_out1_re),  -- sfix24_En12
              pixelIn2_im => std_logic_vector(Delay4_out1_im),  -- sfix24_En12
              ctrlIn2_hStart => Delay5_out1_hStart,
              ctrlIn2_hEnd => Delay5_out1_hEnd,
              ctrlIn2_vStart => Delay5_out1_vStart,
              ctrlIn2_vEnd => Delay5_out1_vEnd,
              ctrlIn2_valid => Delay5_out1_valid,
              streamCtrl => Delay15_out1,
              pixelOut1_re => StreamAlignment_out1_re,  -- sfix24_En12
              pixelOut1_im => StreamAlignment_out1_im,  -- sfix24_En12
              pixelOut2_re => StreamAlignment_out2_re,  -- sfix24_En12
              pixelOut2_im => StreamAlignment_out2_im,  -- sfix24_En12
              ctrlOut_valid => StreamAlignment_out3_valid
              );

  u_2_DIFFT : alpha2_DIFFT
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              pixelIn_re => std_logic_vector(Delay9_out1_re),  -- sfix24_En16
              pixelIn_im => std_logic_vector(Delay9_out1_im),  -- sfix24_En16
              ctrlIn_valid => Delay7_out1_valid,
              pixelOut => alpha2_DIFFT_out1,  -- sfix24_En16
              ctrlOut_hStart => alpha2_DIFFT_out2_hStart,
              ctrlOut_hEnd => alpha2_DIFFT_out2_hEnd,
              ctrlOut_vStart => alpha2_DIFFT_out2_vStart,
              ctrlOut_vEnd => alpha2_DIFFT_out2_vEnd,
              ctrlOut_valid => alpha2_DIFFT_out2_valid
              );

  Prev2_DFFT_out1_re_signed <= signed(Prev2_DFFT_out1_re);

  Prev2_DFFT_out1_im_signed <= signed(Prev2_DFFT_out1_im);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg_re <= (OTHERS => to_signed(16#000000#, 24));
      Delay_reg_im <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_reg_im(0) <= Prev2_DFFT_out1_im_signed;
        Delay_reg_im(1) <= Delay_reg_im(0);
        Delay_reg_re(0) <= Prev2_DFFT_out1_re_signed;
        Delay_reg_re(1) <= Delay_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay_process;

  Delay_out1_re <= Delay_reg_re(1);
  Delay_out1_im <= Delay_reg_im(1);

  Delay14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay14_reg_re <= (OTHERS => to_signed(16#000000#, 24));
      Delay14_reg_im <= (OTHERS => to_signed(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay14_reg_im(0) <= Delay_out1_im;
        Delay14_reg_im(1) <= Delay14_reg_im(0);
        Delay14_reg_re(0) <= Delay_out1_re;
        Delay14_reg_re(1) <= Delay14_reg_re(0);
      END IF;
    END IF;
  END PROCESS Delay14_process;

  Delay14_out1_re <= Delay14_reg_re(1);
  Delay14_out1_im <= Delay14_reg_im(1);

  c_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg(0) <= Prev2_DFFT_out2_hStart;
        alpha_reg(1) <= alpha_reg(0);
      END IF;
    END IF;
  END PROCESS c_process;

  Delay1_out1_hStart <= alpha_reg(1);

  c_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_1(0) <= Delay1_out1_hStart;
        alpha_reg_1(1) <= alpha_reg_1(0);
      END IF;
    END IF;
  END PROCESS c_1_process;

  Delay13_out1_hStart <= alpha_reg_1(1);

  c_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_2 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_2(0) <= Prev2_DFFT_out2_hEnd;
        alpha_reg_2(1) <= alpha_reg_2(0);
      END IF;
    END IF;
  END PROCESS c_2_process;

  Delay1_out1_hEnd <= alpha_reg_2(1);

  c_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_3 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_3(0) <= Delay1_out1_hEnd;
        alpha_reg_3(1) <= alpha_reg_3(0);
      END IF;
    END IF;
  END PROCESS c_3_process;

  Delay13_out1_hEnd <= alpha_reg_3(1);

  c_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_4 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_4(0) <= Prev2_DFFT_out2_vStart;
        alpha_reg_4(1) <= alpha_reg_4(0);
      END IF;
    END IF;
  END PROCESS c_4_process;

  Delay1_out1_vStart <= alpha_reg_4(1);

  c_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_5 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_5(0) <= Delay1_out1_vStart;
        alpha_reg_5(1) <= alpha_reg_5(0);
      END IF;
    END IF;
  END PROCESS c_5_process;

  Delay13_out1_vStart <= alpha_reg_5(1);

  c_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_6 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_6(0) <= Prev2_DFFT_out2_vEnd;
        alpha_reg_6(1) <= alpha_reg_6(0);
      END IF;
    END IF;
  END PROCESS c_6_process;

  Delay1_out1_vEnd <= alpha_reg_6(1);

  c_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_7 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_7(0) <= Delay1_out1_vEnd;
        alpha_reg_7(1) <= alpha_reg_7(0);
      END IF;
    END IF;
  END PROCESS c_7_process;

  Delay13_out1_vEnd <= alpha_reg_7(1);

  c_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_8 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_8(0) <= Prev2_DFFT_out2_valid;
        alpha_reg_8(1) <= alpha_reg_8(0);
      END IF;
    END IF;
  END PROCESS c_8_process;

  Delay1_out1_valid <= alpha_reg_8(1);

  c_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_9 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_9(0) <= Delay1_out1_valid;
        alpha_reg_9(1) <= alpha_reg_9(0);
      END IF;
    END IF;
  END PROCESS c_9_process;

  Delay13_out1_valid <= alpha_reg_9(1);

  Curr2_DFFT_out1_re_signed <= signed(Curr2_DFFT_out1_re);

  Curr2_DFFT_out1_im_signed <= signed(Curr2_DFFT_out1_im);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_re <= to_signed(16#000000#, 24);
      Delay3_out1_im <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1_re <= Curr2_DFFT_out1_re_signed;
        Delay3_out1_im <= Curr2_DFFT_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  c_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_hStart <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1_hStart <= Curr2_DFFT_out2_hStart;
      END IF;
    END IF;
  END PROCESS c_10_process;


  c_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_hEnd <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1_hEnd <= Curr2_DFFT_out2_hEnd;
      END IF;
    END IF;
  END PROCESS c_11_process;


  c_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_vStart <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1_vStart <= Curr2_DFFT_out2_vStart;
      END IF;
    END IF;
  END PROCESS c_12_process;


  c_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_vEnd <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1_vEnd <= Curr2_DFFT_out2_vEnd;
      END IF;
    END IF;
  END PROCESS c_13_process;


  c_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1_valid <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1_valid <= Curr2_DFFT_out2_valid;
      END IF;
    END IF;
  END PROCESS c_14_process;


  CoefficientsUpdate_out1_re_signed <= signed(CoefficientsUpdate_out1_re);

  CoefficientsUpdate_out1_im_signed <= signed(CoefficientsUpdate_out1_im);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1_re <= to_signed(16#000000#, 24);
      Delay4_out1_im <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1_re <= CoefficientsUpdate_out1_re_signed;
        Delay4_out1_im <= CoefficientsUpdate_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  c_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1_hStart <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1_hStart <= CoefficientsUpdate_out2_hStart;
      END IF;
    END IF;
  END PROCESS c_15_process;


  c_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1_hEnd <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1_hEnd <= CoefficientsUpdate_out2_hEnd;
      END IF;
    END IF;
  END PROCESS c_16_process;


  c_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1_vStart <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1_vStart <= CoefficientsUpdate_out2_vStart;
      END IF;
    END IF;
  END PROCESS c_17_process;


  c_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1_vEnd <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1_vEnd <= CoefficientsUpdate_out2_vEnd;
      END IF;
    END IF;
  END PROCESS c_18_process;


  c_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_out1_valid <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay5_out1_valid <= CoefficientsUpdate_out2_valid;
      END IF;
    END IF;
  END PROCESS c_19_process;


  Delay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay12_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay12_reg(0) <= streamCtrlIn;
        Delay12_reg(1) <= Delay12_reg(0);
      END IF;
    END IF;
  END PROCESS Delay12_process;

  Delay12_out1 <= Delay12_reg(1);

  Delay15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay15_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay15_reg(0) <= Delay12_out1;
        Delay15_reg(1) <= Delay15_reg(0);
      END IF;
    END IF;
  END PROCESS Delay15_process;

  Delay15_out1 <= Delay15_reg(1);

  StreamAlignment_out1_re_signed <= signed(StreamAlignment_out1_re);

  StreamAlignment_out1_im_signed <= signed(StreamAlignment_out1_im);

  Delay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay8_out1_re <= to_signed(16#000000#, 24);
      Delay8_out1_im <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay8_out1_re <= StreamAlignment_out1_re_signed;
        Delay8_out1_im <= StreamAlignment_out1_im_signed;
      END IF;
    END IF;
  END PROCESS Delay8_process;


  StreamAlignment_out2_re_signed <= signed(StreamAlignment_out2_re);

  StreamAlignment_out2_im_signed <= signed(StreamAlignment_out2_im);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1_re <= to_signed(16#000000#, 24);
      Delay6_out1_im <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1_re <= StreamAlignment_out2_re_signed;
        Delay6_out1_im <= StreamAlignment_out2_im_signed;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  Product_mul_temp <= Delay8_out1_re * Delay6_out1_re;
  Product_sub_cast <= Product_mul_temp(31 DOWNTO 8);
  Product_mul_temp_1 <= Delay8_out1_im * Delay6_out1_im;
  Product_sub_cast_1 <= Product_mul_temp_1(31 DOWNTO 8);
  Product_out1_re <= Product_sub_cast - Product_sub_cast_1;
  Product_mul_temp_2 <= Delay8_out1_im * Delay6_out1_re;
  Product_add_cast <= Product_mul_temp_2(31 DOWNTO 8);
  Product_mul_temp_3 <= Delay8_out1_re * Delay6_out1_im;
  Product_add_cast_1 <= Product_mul_temp_3(31 DOWNTO 8);
  Product_out1_im <= Product_add_cast + Product_add_cast_1;

  Delay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay9_out1_re <= to_signed(16#000000#, 24);
      Delay9_out1_im <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay9_out1_re <= Product_out1_re;
        Delay9_out1_im <= Product_out1_im;
      END IF;
    END IF;
  END PROCESS Delay9_process;


  c_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_reg_14 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_reg_14(0) <= StreamAlignment_out3_valid;
        alpha_reg_14(1) <= alpha_reg_14(0);
      END IF;
    END IF;
  END PROCESS c_24_process;

  Delay7_out1_valid <= alpha_reg_14(1);

  alpha2_DIFFT_out1_signed <= signed(alpha2_DIFFT_out1);

  Delay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay10_out1 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay10_out1 <= alpha2_DIFFT_out1_signed;
      END IF;
    END IF;
  END PROCESS Delay10_process;


  pixelOut <= std_logic_vector(Delay10_out1);

  c_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1_hStart <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1_hStart <= alpha2_DIFFT_out2_hStart;
      END IF;
    END IF;
  END PROCESS c_25_process;


  c_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1_hEnd <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1_hEnd <= alpha2_DIFFT_out2_hEnd;
      END IF;
    END IF;
  END PROCESS c_26_process;


  c_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1_vStart <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1_vStart <= alpha2_DIFFT_out2_vStart;
      END IF;
    END IF;
  END PROCESS c_27_process;


  c_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1_vEnd <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1_vEnd <= alpha2_DIFFT_out2_vEnd;
      END IF;
    END IF;
  END PROCESS c_28_process;


  c_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay11_out1_valid <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay11_out1_valid <= alpha2_DIFFT_out2_valid;
      END IF;
    END IF;
  END PROCESS c_29_process;


  ctrlOut_hStart <= Delay11_out1_hStart;

  ctrlOut_hEnd <= Delay11_out1_hEnd;

  ctrlOut_vStart <= Delay11_out1_vStart;

  ctrlOut_vEnd <= Delay11_out1_vEnd;

  ctrlOut_valid <= Delay11_out1_valid;

END rtl;

