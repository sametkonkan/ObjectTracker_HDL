-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\dataReadFSM.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dataReadFSM
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Preprocess/CurrPreprocess/Image Statistics/calcMean/dataReadFSM
-- Hierarchy Level: 5
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY dataReadFSM IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        hStart                            :   IN    std_logic;
        hEnd                              :   IN    std_logic;
        vStart                            :   IN    std_logic;
        vEnd                              :   IN    std_logic;
        dataValid                         :   IN    std_logic;
        processPixel                      :   OUT   std_logic;
        lineReset                         :   OUT   std_logic;
        frameStart                        :   OUT   std_logic
        );
END dataReadFSM;


ARCHITECTURE rtl OF dataReadFSM IS

  -- Signals
  SIGNAL statsFSM_inFrame                 : std_logic;
  SIGNAL statsFSM_inLine                  : std_logic;
  SIGNAL statsFSM_inFrame_next            : std_logic;
  SIGNAL statsFSM_inLine_next             : std_logic;

BEGIN
  -- Input Controller - respond to input control signals
  statsFSM_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      statsFSM_inFrame <= '0';
      statsFSM_inLine <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        statsFSM_inFrame <= statsFSM_inFrame_next;
        statsFSM_inLine <= statsFSM_inLine_next;
      END IF;
    END IF;
  END PROCESS statsFSM_process;

  statsFSM_output : PROCESS (dataValid, hEnd, hStart, statsFSM_inFrame, statsFSM_inLine, vEnd, vStart)
  BEGIN
    statsFSM_inFrame_next <= statsFSM_inFrame;
    statsFSM_inLine_next <= statsFSM_inLine;
    IF dataValid /= '0' THEN 
      IF vStart /= '0' THEN 
        statsFSM_inFrame_next <= '1';
        processPixel <= '1';
        lineReset <= '0';
        frameStart <= '0';
        IF hStart /= '0' THEN 
          statsFSM_inLine_next <= '1';
          lineReset <= '1';
        END IF;
      ELSIF statsFSM_inFrame = '1' AND (vEnd /= '0') THEN 
        statsFSM_inFrame_next <= '0';
        statsFSM_inLine_next <= '0';
        processPixel <= '1';
        lineReset <= '0';
        frameStart <= '0';
      ELSIF (statsFSM_inFrame AND statsFSM_inLine) = '1' AND (hEnd /= '0') THEN 
        statsFSM_inLine_next <= '0';
        processPixel <= '1';
        lineReset <= '0';
        frameStart <= '0';
      ELSIF statsFSM_inFrame = '1' AND (hStart /= '0') THEN 
        statsFSM_inLine_next <= '1';
        processPixel <= '1';
        lineReset <= '0';
        frameStart <= '0';
      ELSIF (statsFSM_inFrame AND statsFSM_inLine) = '1' AND (hStart /= '0') THEN 
        statsFSM_inLine_next <= '1';
        processPixel <= '1';
        lineReset <= '1';
        frameStart <= '0';
      ELSIF (statsFSM_inFrame AND statsFSM_inLine) = '1' THEN 
        processPixel <= '1';
        lineReset <= '0';
        frameStart <= '0';
      ELSIF (statsFSM_inFrame AND ( NOT statsFSM_inLine)) = '1' THEN 
        processPixel <= '0';
        lineReset <= '0';
        frameStart <= '0';
      ELSE 
        processPixel <= '0';
        lineReset <= '0';
        frameStart <= '0';
      END IF;
    ELSE 
      processPixel <= '0';
      lineReset <= '0';
      frameStart <= '0';
    END IF;
  END PROCESS statsFSM_output;


END rtl;

