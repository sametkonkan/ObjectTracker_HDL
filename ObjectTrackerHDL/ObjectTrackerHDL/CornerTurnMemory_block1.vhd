-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\CornerTurnMemory_block1.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CornerTurnMemory_block1
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Track/2-DCorrelation/Prev2-DFFT/CornerTurnMemory
-- Hierarchy Level: 4
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CornerTurnMemory_block1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dataIn                            :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
        validIn                           :   IN    std_logic;
        dataOut                           :   OUT   std_logic_vector(63 DOWNTO 0);  -- ufix64
        validOut                          :   OUT   std_logic
        );
END CornerTurnMemory_block1;


ARCHITECTURE rtl OF CornerTurnMemory_block1 IS

  -- Component Declarations
  COMPONENT CounterDelay_block1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          vld_in                          :   IN    std_logic;
          vld_out                         :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT SwapAddr_block1
    PORT( addrIn                          :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
          bankRd                          :   OUT   std_logic;
          addrRd                          :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
          );
  END COMPONENT;

  COMPONENT BankBit_block1
    PORT( addrIn                          :   IN    std_logic_vector(14 DOWNTO 0);  -- ufix15
          bankWr                          :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT UpperRAM_block1
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          wr_addr                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          dout                            :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
          );
  END COMPONENT;

  COMPONENT LowerRAM_block1
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(63 DOWNTO 0);  -- ufix64
          wr_addr                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
          dout                            :   OUT   std_logic_vector(63 DOWNTO 0)  -- ufix64
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : CounterDelay_block1
    USE ENTITY work.CounterDelay_block1(rtl);

  FOR ALL : SwapAddr_block1
    USE ENTITY work.SwapAddr_block1(rtl);

  FOR ALL : BankBit_block1
    USE ENTITY work.BankBit_block1(rtl);

  FOR ALL : UpperRAM_block1
    USE ENTITY work.UpperRAM_block1(rtl);

  FOR ALL : LowerRAM_block1
    USE ENTITY work.LowerRAM_block1(rtl);

  -- Signals
  SIGNAL vld_out                          : std_logic;
  SIGNAL count_step                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL count_from                       : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL readAddr                         : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL count                            : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL count_1                          : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL SwapAddr_out1                    : std_logic;
  SIGNAL addrRd                           : std_logic_vector(13 DOWNTO 0);  -- ufix14
  SIGNAL count_step_1                     : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL count_from_1                     : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL writeAddr                        : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL count_2                          : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL need_to_wrap_1                   : std_logic;
  SIGNAL count_value_1                    : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL count_3                          : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL addrWr                           : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL BankBit_out1                     : std_logic;
  SIGNAL Logical_Operator2_out1           : std_logic;
  SIGNAL enbWrUp                          : std_logic;
  SIGNAL enbWrLo                          : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL UpperRAM_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL UpperRAM_out1_unsigned           : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL LowerRAM_out1                    : std_logic_vector(63 DOWNTO 0);  -- ufix64
  SIGNAL LowerRAM_out1_unsigned           : unsigned(63 DOWNTO 0);  -- ufix64
  SIGNAL dataOut_tmp                      : unsigned(63 DOWNTO 0);  -- ufix64

BEGIN
  u_CounterDelay : CounterDelay_block1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              vld_in => validIn,
              vld_out => vld_out
              );

  u_SwapAddr : SwapAddr_block1
    PORT MAP( addrIn => std_logic_vector(readAddr),  -- ufix15
              bankRd => SwapAddr_out1,
              addrRd => addrRd  -- ufix14
              );

  u_BankBit : BankBit_block1
    PORT MAP( addrIn => std_logic_vector(writeAddr),  -- ufix15
              bankWr => BankBit_out1
              );

  u_UpperRAM : UpperRAM_block1
    PORT MAP( clk => clk,
              enb => enb,
              din => dataIn,  -- ufix64
              wr_addr => std_logic_vector(addrWr),  -- ufix14
              wr_en => enbWrUp,
              rd_addr => addrRd,  -- ufix14
              dout => UpperRAM_out1  -- ufix64
              );

  u_LowerRAM : LowerRAM_block1
    PORT MAP( clk => clk,
              enb => enb,
              din => dataIn,  -- ufix64
              wr_addr => std_logic_vector(addrWr),  -- ufix14
              wr_en => enbWrLo,
              rd_addr => addrRd,  -- ufix14
              dout => LowerRAM_out1  -- ufix64
              );

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 32767
  count_step <= to_unsigned(16#0001#, 15);

  count_from <= to_unsigned(16#0000#, 15);

  count <= readAddr + count_step;

  
  need_to_wrap <= '1' WHEN readAddr = to_unsigned(16#7FFF#, 15) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= readAddr WHEN vld_out = '0' ELSE
      count_value;

  ReadAddrCntr_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      readAddr <= to_unsigned(16#0000#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        readAddr <= count_1;
      END IF;
    END IF;
  END PROCESS ReadAddrCntr_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 32767
  count_step_1 <= to_unsigned(16#0001#, 15);

  count_from_1 <= to_unsigned(16#0000#, 15);

  count_2 <= writeAddr + count_step_1;

  
  need_to_wrap_1 <= '1' WHEN writeAddr = to_unsigned(16#7FFF#, 15) ELSE
      '0';

  
  count_value_1 <= count_2 WHEN need_to_wrap_1 = '0' ELSE
      count_from_1;

  
  count_3 <= writeAddr WHEN validIn = '0' ELSE
      count_value_1;

  WriteAddrCntr_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      writeAddr <= to_unsigned(16#0000#, 15);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        writeAddr <= count_3;
      END IF;
    END IF;
  END PROCESS WriteAddrCntr_process;


  addrWr <= writeAddr(13 DOWNTO 0);

  Logical_Operator2_out1 <=  NOT BankBit_out1;

  enbWrUp <= Logical_Operator2_out1 AND validIn;

  enbWrLo <= validIn AND BankBit_out1;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= SwapAddr_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  UpperRAM_out1_unsigned <= unsigned(UpperRAM_out1);

  LowerRAM_out1_unsigned <= unsigned(LowerRAM_out1);

  
  dataOut_tmp <= UpperRAM_out1_unsigned WHEN Delay_out1 = '0' ELSE
      LowerRAM_out1_unsigned;

  dataOut <= std_logic_vector(dataOut_tmp);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      validOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        validOut <= vld_out;
      END IF;
    END IF;
  END PROCESS Delay1_process;


END rtl;

