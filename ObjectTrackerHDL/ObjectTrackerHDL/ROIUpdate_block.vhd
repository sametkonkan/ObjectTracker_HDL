-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\ROIUpdate_block.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ROIUpdate_block
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Track/ROIUpdate
-- Hierarchy Level: 2
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ObjectTrackerHDL_pkg.ALL;

ENTITY ROIUpdate_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        maxCol                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        maxRow                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        frameCtrl_vEnd                    :   IN    std_logic;
        streamCtrlOut                     :   OUT   std_logic;
        prevROI                           :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- uint16 [4]
        currROI                           :   OUT   vector_of_std_logic_vector16(0 TO 3)  -- uint16 [4]
        );
END ROIUpdate_block;


ARCHITECTURE rtl OF ROIUpdate_block IS

  -- Component Declarations
  COMPONENT ROIUpdate
    PORT( maxRow                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          maxCol                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          yROIIn                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          xROIIn                          :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          yROIOut                         :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17
          xROIOut                         :   OUT   std_logic_vector(16 DOWNTO 0)  -- sfix17
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ROIUpdate
    USE ENTITY work.ROIUpdate(rtl);

  -- Signals
  SIGNAL vEnd                             : std_logic;
  SIGNAL count_step                       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count_from                       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL HDL_Counter1_out1                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count                            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL need_to_wrap                     : std_logic;
  SIGNAL count_value                      : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL count_1                          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Compare_To_Constant2_out1        : std_logic;
  SIGNAL xROI_out1                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL yROI_out1                        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay6_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch10_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch6_out1                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch12_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay3_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch11_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch7_out1                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL ROIUpdate_out1                   : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL ROIUpdate_out1_signed            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Delay1_out1                      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Switch8_out1                     : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Delay1_out1_dtc                  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch13_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL ROIUpdate_out2                   : std_logic_vector(16 DOWNTO 0);  -- ufix17
  SIGNAL ROIUpdate_out2_signed            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Delay4_out1                      : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Switch9_out1                     : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Delay4_out1_dtc                  : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay4_out1_dtc_1                : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch15_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Relational_Operator_out1         : std_logic;
  SIGNAL Delay1_out1_dtc_1                : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Switch14_out1                    : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Equal_out1                       : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL Relational_Operator1_out1        : std_logic;
  SIGNAL OR_out1                          : std_logic;
  SIGNAL sizeROI_out1                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Mux1_out1                        : vector_of_unsigned16(0 TO 3);  -- uint16 [4]
  SIGNAL Mux_out1                         : vector_of_unsigned16(0 TO 3);  -- uint16 [4]

BEGIN
  u_ROIUpdate : ROIUpdate
    PORT MAP( maxRow => maxRow,  -- uint16
              maxCol => maxCol,  -- uint16
              yROIIn => std_logic_vector(Switch13_out1),  -- uint16
              xROIIn => std_logic_vector(Switch12_out1),  -- uint16
              yROIOut => ROIUpdate_out1,  -- sfix17
              xROIOut => ROIUpdate_out2  -- sfix17
              );

  vEnd <= frameCtrl_vEnd;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 4095
  count_step <= to_unsigned(16#001#, 12);

  count_from <= to_unsigned(16#000#, 12);

  count <= HDL_Counter1_out1 + count_step;

  
  need_to_wrap <= '1' WHEN HDL_Counter1_out1 = to_unsigned(16#FFF#, 12) ELSE
      '0';

  
  count_value <= count WHEN need_to_wrap = '0' ELSE
      count_from;

  
  count_1 <= HDL_Counter1_out1 WHEN vEnd = '0' ELSE
      count_value;

  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter1_out1 <= count_1;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  
  Compare_To_Constant2_out1 <= '1' WHEN HDL_Counter1_out1 >= to_unsigned(16#001#, 12) ELSE
      '0';

  xROI_out1 <= to_unsigned(16#0191#, 16);

  yROI_out1 <= to_unsigned(16#0075#, 16);

  
  Switch6_out1 <= Delay6_out1 WHEN vEnd = '0' ELSE
      Switch10_out1;

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay6_out1 <= Switch6_out1;
      END IF;
    END IF;
  END PROCESS Delay6_process;


  
  Switch7_out1 <= Delay3_out1 WHEN vEnd = '0' ELSE
      Switch11_out1;

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1 <= Switch7_out1;
      END IF;
    END IF;
  END PROCESS Delay3_process;


  ROIUpdate_out1_signed <= signed(ROIUpdate_out1);

  
  Switch8_out1 <= Delay1_out1 WHEN vEnd = '0' ELSE
      ROIUpdate_out1_signed;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Switch8_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay1_out1_dtc <= unsigned(Delay1_out1(15 DOWNTO 0));

  
  Switch11_out1 <= yROI_out1 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Delay1_out1_dtc;

  
  Switch13_out1 <= Switch11_out1 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Delay3_out1;

  ROIUpdate_out2_signed <= signed(ROIUpdate_out2);

  
  Switch9_out1 <= Delay4_out1 WHEN vEnd = '0' ELSE
      ROIUpdate_out2_signed;

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= Switch9_out1;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Delay4_out1_dtc <= unsigned(Delay4_out1(15 DOWNTO 0));

  
  Switch10_out1 <= xROI_out1 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Delay4_out1_dtc;

  
  Switch12_out1 <= Switch10_out1 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Delay6_out1;

  Delay4_out1_dtc_1 <= unsigned(Delay4_out1(15 DOWNTO 0));

  
  Switch15_out1 <= Switch10_out1 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Delay4_out1_dtc_1;

  
  Relational_Operator_out1 <= '1' WHEN Switch12_out1 > Switch15_out1 ELSE
      '0';

  Delay1_out1_dtc_1 <= unsigned(Delay1_out1(15 DOWNTO 0));

  
  Switch14_out1 <= Switch11_out1 WHEN Compare_To_Constant2_out1 = '0' ELSE
      Delay1_out1_dtc_1;

  
  Equal_out1 <= '1' WHEN Switch13_out1 = Switch14_out1 ELSE
      '0';

  AND_out1 <= Relational_Operator_out1 AND Equal_out1;

  
  Relational_Operator1_out1 <= '1' WHEN Switch13_out1 > Switch14_out1 ELSE
      '0';

  OR_out1 <=  NOT (AND_out1 OR Relational_Operator1_out1);

  sizeROI_out1 <= to_unsigned(16#0080#, 16);

  Mux1_out1(0) <= Switch12_out1;
  Mux1_out1(1) <= Switch13_out1;
  Mux1_out1(2) <= sizeROI_out1;
  Mux1_out1(3) <= sizeROI_out1;

  outputgen1: FOR k IN 0 TO 3 GENERATE
    prevROI(k) <= std_logic_vector(Mux1_out1(k));
  END GENERATE;

  Mux_out1(0) <= Switch15_out1;
  Mux_out1(1) <= Switch14_out1;
  Mux_out1(2) <= sizeROI_out1;
  Mux_out1(3) <= sizeROI_out1;

  outputgen: FOR k IN 0 TO 3 GENERATE
    currROI(k) <= std_logic_vector(Mux_out1(k));
  END GENERATE;

  streamCtrlOut <= OR_out1;

END rtl;

