-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\ObjectTrackerHDL\SQRTBitSet.vhd
-- Created: 2024-12-03 00:37:46
-- 
-- Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: SQRTBitSet
-- Source Path: ObjectTrackerHDL/ObjectTrackerHDL/Preprocess/CurrPreprocess/Image Statistics/SQRTBitSet
-- Hierarchy Level: 4
-- Model version: 3.7
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY SQRTBitSet IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        din                               :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16
        dout                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- ufix8
        );
END SQRTBitSet;


ARCHITECTURE rtl OF SQRTBitSet IS

  -- Signals
  SIGNAL base7sqr                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL din_unsigned                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL cmp7                             : std_logic;  -- ufix1
  SIGNAL rootsqini                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL root_sqTmp7                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL root_sq7                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL base6sqr                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL rootini                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL MSBy                             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rootTmp7                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL root7                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL squaresum7                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL rootdtc7                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL shift27                          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp_sq6                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL resizedin                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL cmp6                             : std_logic;  -- ufix1
  SIGNAL root_sqTmp6                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL root_sq6                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL base5sqr                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp6                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rootTmp6_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL root6                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL squaresum6                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL rootdtc6                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL shift26                          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp_sq5                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL resizedin_1                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL cmp5                             : std_logic;  -- ufix1
  SIGNAL root_sqTmp5                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL root_sq5                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL base4sqr                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp5                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rootTmp5_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL root5                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL squaresum5                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL rootdtc5                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL shift25                          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp_sq4                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL resizedin_2                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL cmp4                             : std_logic;  -- ufix1
  SIGNAL root_sqTmp4                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL root_sq4                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL base3sqr                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp4                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rootTmp4_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL root4                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL squaresum4                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL rootdtc4                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL shift24                          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp_sq3                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL resizedin_3                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL cmp3                             : std_logic;  -- ufix1
  SIGNAL root_sqTmp3                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL root_sq3                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL base2sqr                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp3                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rootTmp3_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL root3                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL squaresum3                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL rootdtc3                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL shift23                          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp_sq2                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL resizedin_4                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL cmp2                             : std_logic;  -- ufix1
  SIGNAL root_sqTmp2                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL root_sq2                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL base1sqr                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp2                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rootTmp2_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL root2                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL squaresum2                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL rootdtc2                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL shift22                          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp_sq1                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL resizedin_5                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL cmp1                             : std_logic;  -- ufix1
  SIGNAL root_sqTmp1                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL root_sq1                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL base0sqr                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp1                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rootTmp1_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL root1                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL squaresum1                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL rootdtc1                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL shift21                          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL roottmp_sq0                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL resizedin_6                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL cmp0                             : std_logic;  -- ufix1
  SIGNAL roottmp0                         : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rootTmp0_1                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL root0                            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL maxy                             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL cmpmax                           : std_logic;  -- ufix1
  SIGNAL root_sqTmp0                      : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL root_sq0                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL squaresum0                       : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL rootdtc0                         : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL shift20                          : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL yypluslsb                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL sub1                             : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL sub2                             : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL outsel                           : std_logic;  -- ufix1
  SIGNAL lsby                             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rootpluslsb                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL rootout                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL maxcmpout                        : unsigned(7 DOWNTO 0);  -- ufix8

BEGIN
  -- Sqrt Implementation using Shift

  base7sqr <= to_unsigned(16#4000#, 16);

  din_unsigned <= unsigned(din);

  
  cmp7 <= '1' WHEN base7sqr <= din_unsigned ELSE
      '0';

  rootsqini <= to_unsigned(16#0000#, 16);

  
  root_sqTmp7 <= rootsqini WHEN cmp7 = '0' ELSE
      base7sqr;

  reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root_sq7 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root_sq7 <= root_sqTmp7;
      END IF;
    END IF;
  END PROCESS reg_process;


  base6sqr <= to_unsigned(16#1000#, 16);

  rootini <= to_unsigned(16#00#, 8);

  MSBy <= to_unsigned(16#80#, 8);

  
  rootTmp7 <= rootini WHEN cmp7 = '0' ELSE
      MSBy;

  reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root7 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root7 <= rootTmp7;
      END IF;
    END IF;
  END PROCESS reg_1_process;


  squaresum7 <= root_sq7 + base6sqr;

  rootdtc7 <= resize(root7, 16);

  shift27 <= rootdtc7 sll 7;

  roottmp_sq6 <= squaresum7 + shift27;

  reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin <= din_unsigned;
      END IF;
    END IF;
  END PROCESS reg_2_process;


  
  cmp6 <= '1' WHEN roottmp_sq6 <= resizedin ELSE
      '0';

  
  root_sqTmp6 <= root_sq7 WHEN cmp6 = '0' ELSE
      roottmp_sq6;

  reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root_sq6 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root_sq6 <= root_sqTmp6;
      END IF;
    END IF;
  END PROCESS reg_3_process;


  base5sqr <= to_unsigned(16#0400#, 16);

  roottmp6 <= root7 OR to_unsigned(16#40#, 8);

  
  rootTmp6_1 <= root7 WHEN cmp6 = '0' ELSE
      roottmp6;

  reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root6 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root6 <= rootTmp6_1;
      END IF;
    END IF;
  END PROCESS reg_4_process;


  squaresum6 <= root_sq6 + base5sqr;

  rootdtc6 <= resize(root6, 16);

  shift26 <= rootdtc6 sll 6;

  roottmp_sq5 <= squaresum6 + shift26;

  reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin_1 <= resizedin;
      END IF;
    END IF;
  END PROCESS reg_5_process;


  
  cmp5 <= '1' WHEN roottmp_sq5 <= resizedin_1 ELSE
      '0';

  
  root_sqTmp5 <= root_sq6 WHEN cmp5 = '0' ELSE
      roottmp_sq5;

  reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root_sq5 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root_sq5 <= root_sqTmp5;
      END IF;
    END IF;
  END PROCESS reg_6_process;


  base4sqr <= to_unsigned(16#0100#, 16);

  roottmp5 <= root6 OR to_unsigned(16#20#, 8);

  
  rootTmp5_1 <= root6 WHEN cmp5 = '0' ELSE
      roottmp5;

  reg_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root5 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root5 <= rootTmp5_1;
      END IF;
    END IF;
  END PROCESS reg_7_process;


  squaresum5 <= root_sq5 + base4sqr;

  rootdtc5 <= resize(root5, 16);

  shift25 <= rootdtc5 sll 5;

  roottmp_sq4 <= squaresum5 + shift25;

  reg_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin_2 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin_2 <= resizedin_1;
      END IF;
    END IF;
  END PROCESS reg_8_process;


  
  cmp4 <= '1' WHEN roottmp_sq4 <= resizedin_2 ELSE
      '0';

  
  root_sqTmp4 <= root_sq5 WHEN cmp4 = '0' ELSE
      roottmp_sq4;

  reg_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root_sq4 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root_sq4 <= root_sqTmp4;
      END IF;
    END IF;
  END PROCESS reg_9_process;


  base3sqr <= to_unsigned(16#0040#, 16);

  roottmp4 <= root5 OR to_unsigned(16#10#, 8);

  
  rootTmp4_1 <= root5 WHEN cmp4 = '0' ELSE
      roottmp4;

  reg_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root4 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root4 <= rootTmp4_1;
      END IF;
    END IF;
  END PROCESS reg_10_process;


  squaresum4 <= root_sq4 + base3sqr;

  rootdtc4 <= resize(root4, 16);

  shift24 <= rootdtc4 sll 4;

  roottmp_sq3 <= squaresum4 + shift24;

  reg_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin_3 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin_3 <= resizedin_2;
      END IF;
    END IF;
  END PROCESS reg_11_process;


  
  cmp3 <= '1' WHEN roottmp_sq3 <= resizedin_3 ELSE
      '0';

  
  root_sqTmp3 <= root_sq4 WHEN cmp3 = '0' ELSE
      roottmp_sq3;

  reg_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root_sq3 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root_sq3 <= root_sqTmp3;
      END IF;
    END IF;
  END PROCESS reg_12_process;


  base2sqr <= to_unsigned(16#0010#, 16);

  roottmp3 <= root4 OR to_unsigned(16#08#, 8);

  
  rootTmp3_1 <= root4 WHEN cmp3 = '0' ELSE
      roottmp3;

  reg_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root3 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root3 <= rootTmp3_1;
      END IF;
    END IF;
  END PROCESS reg_13_process;


  squaresum3 <= root_sq3 + base2sqr;

  rootdtc3 <= resize(root3, 16);

  shift23 <= rootdtc3 sll 3;

  roottmp_sq2 <= squaresum3 + shift23;

  reg_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin_4 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin_4 <= resizedin_3;
      END IF;
    END IF;
  END PROCESS reg_14_process;


  
  cmp2 <= '1' WHEN roottmp_sq2 <= resizedin_4 ELSE
      '0';

  
  root_sqTmp2 <= root_sq3 WHEN cmp2 = '0' ELSE
      roottmp_sq2;

  reg_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root_sq2 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root_sq2 <= root_sqTmp2;
      END IF;
    END IF;
  END PROCESS reg_15_process;


  base1sqr <= to_unsigned(16#0004#, 16);

  roottmp2 <= root3 OR to_unsigned(16#04#, 8);

  
  rootTmp2_1 <= root3 WHEN cmp2 = '0' ELSE
      roottmp2;

  reg_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root2 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root2 <= rootTmp2_1;
      END IF;
    END IF;
  END PROCESS reg_16_process;


  squaresum2 <= root_sq2 + base1sqr;

  rootdtc2 <= resize(root2, 16);

  shift22 <= rootdtc2 sll 2;

  roottmp_sq1 <= squaresum2 + shift22;

  reg_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin_5 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin_5 <= resizedin_4;
      END IF;
    END IF;
  END PROCESS reg_17_process;


  
  cmp1 <= '1' WHEN roottmp_sq1 <= resizedin_5 ELSE
      '0';

  
  root_sqTmp1 <= root_sq2 WHEN cmp1 = '0' ELSE
      roottmp_sq1;

  reg_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root_sq1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root_sq1 <= root_sqTmp1;
      END IF;
    END IF;
  END PROCESS reg_18_process;


  base0sqr <= to_unsigned(16#0001#, 16);

  roottmp1 <= root2 OR to_unsigned(16#02#, 8);

  
  rootTmp1_1 <= root2 WHEN cmp1 = '0' ELSE
      roottmp1;

  reg_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root1 <= rootTmp1_1;
      END IF;
    END IF;
  END PROCESS reg_19_process;


  squaresum1 <= root_sq1 + base0sqr;

  rootdtc1 <= resize(root1, 16);

  shift21 <= rootdtc1 sll 1;

  roottmp_sq0 <= squaresum1 + shift21;

  reg_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin_6 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        resizedin_6 <= resizedin_5;
      END IF;
    END IF;
  END PROCESS reg_20_process;


  
  cmp0 <= '1' WHEN roottmp_sq0 <= resizedin_6 ELSE
      '0';

  roottmp0 <= root1 OR to_unsigned(16#01#, 8);

  
  rootTmp0_1 <= root1 WHEN cmp0 = '0' ELSE
      roottmp0;

  reg_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root0 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root0 <= rootTmp0_1;
      END IF;
    END IF;
  END PROCESS reg_21_process;


  maxy <= to_unsigned(16#FF#, 8);

  -- Add a LSB when roundmode is Nearest
  
  cmpmax <= '1' WHEN root0 < maxy ELSE
      '0';

  
  root_sqTmp0 <= root_sq1 WHEN cmp0 = '0' ELSE
      roottmp_sq0;

  reg_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      root_sq0 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        root_sq0 <= root_sqTmp0;
      END IF;
    END IF;
  END PROCESS reg_22_process;


  squaresum0 <= root_sq0 + base0sqr;

  rootdtc0 <= resize(root0, 16);

  shift20 <= rootdtc0 sll 1;

  yypluslsb <= squaresum0 + shift20;

  sub1 <= yypluslsb - resizedin_6;

  sub2 <= resizedin_6 - root_sq0;

  
  outsel <= '1' WHEN sub1 < sub2 ELSE
      '0';

  lsby <= to_unsigned(16#01#, 8);

  rootpluslsb <= lsby + root0;

  
  rootout <= root0 WHEN outsel = '0' ELSE
      rootpluslsb;

  
  maxcmpout <= root0 WHEN cmpmax = '0' ELSE
      rootout;

  dout <= std_logic_vector(maxcmpout);

END rtl;

